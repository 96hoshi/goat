"""added source

Revision ID: 86c8016f081e
Revises: 511dcf746333
Create Date: 2022-03-19 13:16:55.783642

"""
from alembic import op
import sqlalchemy as sa
import geoalchemy2
import sqlmodel  

from alembic_utils.pg_grant_table import PGGrantTable
from sqlalchemy import text as sql_text
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '86c8016f081e'
down_revision = '511dcf746333'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('layer_library', sa.Column('source', sa.Text(), nullable=True), schema='customer')
    op.add_column('layer_library', sa.Column('date_1', sa.DateTime(), nullable=True), schema='customer')
    op.add_column('layer_library', sa.Column('source_1', sa.Text(), nullable=True), schema='customer')
    op.create_foreign_key(None, 'layer_library', 'layer_source', ['source_1'], ['name'], source_schema='customer', referent_schema='customer', onupdate='CASCADE')
    op.create_foreign_key(None, 'layer_library', 'layer_source', ['source'], ['name'], source_schema='customer', referent_schema='customer', onupdate='CASCADE')
    op.drop_column('layer_library', 'attributes', schema='customer')
    customer_layer_source_postgres_insert = PGGrantTable(schema='customer', table='layer_source', columns=['id', 'name'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(customer_layer_source_postgres_insert)

    customer_layer_source_postgres_references = PGGrantTable(schema='customer', table='layer_source', columns=['id', 'name'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(customer_layer_source_postgres_references)

    customer_layer_source_postgres_select = PGGrantTable(schema='customer', table='layer_source', columns=['id', 'name'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(customer_layer_source_postgres_select)

    customer_layer_source_postgres_update = PGGrantTable(schema='customer', table='layer_source', columns=['id', 'name'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(customer_layer_source_postgres_update)

    customer_layer_source_postgres_delete = PGGrantTable(schema='customer', table='layer_source', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(customer_layer_source_postgres_delete)

    customer_layer_source_postgres_truncate = PGGrantTable(schema='customer', table='layer_source', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(customer_layer_source_postgres_truncate)

    customer_layer_source_postgres_trigger = PGGrantTable(schema='customer', table='layer_source', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(customer_layer_source_postgres_trigger)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    customer_layer_source_postgres_trigger = PGGrantTable(schema='customer', table='layer_source', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(customer_layer_source_postgres_trigger)

    customer_layer_source_postgres_truncate = PGGrantTable(schema='customer', table='layer_source', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(customer_layer_source_postgres_truncate)

    customer_layer_source_postgres_delete = PGGrantTable(schema='customer', table='layer_source', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(customer_layer_source_postgres_delete)

    customer_layer_source_postgres_update = PGGrantTable(schema='customer', table='layer_source', columns=['id', 'name'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(customer_layer_source_postgres_update)

    customer_layer_source_postgres_select = PGGrantTable(schema='customer', table='layer_source', columns=['id', 'name'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(customer_layer_source_postgres_select)

    customer_layer_source_postgres_references = PGGrantTable(schema='customer', table='layer_source', columns=['id', 'name'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(customer_layer_source_postgres_references)

    customer_layer_source_postgres_insert = PGGrantTable(schema='customer', table='layer_source', columns=['id', 'name'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(customer_layer_source_postgres_insert)

    op.add_column('layer_library', sa.Column('attributes', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True), schema='customer')
    op.drop_constraint(None, 'layer_library', schema='customer', type_='foreignkey')
    op.drop_constraint(None, 'layer_library', schema='customer', type_='foreignkey')
    op.drop_column('layer_library', 'source_1', schema='customer')
    op.drop_column('layer_library', 'date_1', schema='customer')
    op.drop_column('layer_library', 'source', schema='customer')
    # ### end Alembic commands ###

"""added layer and style library

Revision ID: bc570bbc9294
Revises: fb86d4ee2936
Create Date: 2022-03-18 21:40:02.595027

"""
from alembic import op
import sqlalchemy as sa
import geoalchemy2
import sqlmodel  

from alembic_utils.pg_grant_table import PGGrantTable
from sqlalchemy import text as sql_text

# revision identifiers, used by Alembic.
revision = 'bc570bbc9294'
down_revision = 'fb86d4ee2936'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    public_alembic_version_postgres_insert = PGGrantTable(schema='public', table='alembic_version', columns=['version_num'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(public_alembic_version_postgres_insert)

    public_alembic_version_postgres_references = PGGrantTable(schema='public', table='alembic_version', columns=['version_num'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(public_alembic_version_postgres_references)

    public_alembic_version_postgres_select = PGGrantTable(schema='public', table='alembic_version', columns=['version_num'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(public_alembic_version_postgres_select)

    public_alembic_version_postgres_update = PGGrantTable(schema='public', table='alembic_version', columns=['version_num'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(public_alembic_version_postgres_update)

    public_comparison_pop_postgres_insert = PGGrantTable(schema='public', table='comparison_pop', columns=['geom', 'grid_visualization_id', 'modus', 'percentile_population', 'population'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(public_comparison_pop_postgres_insert)

    public_comparison_pop_postgres_references = PGGrantTable(schema='public', table='comparison_pop', columns=['geom', 'grid_visualization_id', 'modus', 'percentile_population', 'population'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(public_comparison_pop_postgres_references)

    public_comparison_pop_postgres_select = PGGrantTable(schema='public', table='comparison_pop', columns=['geom', 'grid_visualization_id', 'modus', 'percentile_population', 'population'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(public_comparison_pop_postgres_select)

    public_comparison_pop_postgres_update = PGGrantTable(schema='public', table='comparison_pop', columns=['geom', 'grid_visualization_id', 'modus', 'percentile_population', 'population'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(public_comparison_pop_postgres_update)

    public_default_pop_postgres_insert = PGGrantTable(schema='public', table='default_pop', columns=['geom', 'grid_visualization_id', 'modus', 'percentile_population', 'population'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(public_default_pop_postgres_insert)

    public_default_pop_postgres_references = PGGrantTable(schema='public', table='default_pop', columns=['geom', 'grid_visualization_id', 'modus', 'percentile_population', 'population'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(public_default_pop_postgres_references)

    public_default_pop_postgres_select = PGGrantTable(schema='public', table='default_pop', columns=['geom', 'grid_visualization_id', 'modus', 'percentile_population', 'population'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(public_default_pop_postgres_select)

    public_default_pop_postgres_update = PGGrantTable(schema='public', table='default_pop', columns=['geom', 'grid_visualization_id', 'modus', 'percentile_population', 'population'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(public_default_pop_postgres_update)

    public_scenario_pop_postgres_insert = PGGrantTable(schema='public', table='scenario_pop', columns=['geom', 'grid_visualization_id', 'modus', 'percentile_population', 'population'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(public_scenario_pop_postgres_insert)

    public_scenario_pop_postgres_references = PGGrantTable(schema='public', table='scenario_pop', columns=['geom', 'grid_visualization_id', 'modus', 'percentile_population', 'population'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(public_scenario_pop_postgres_references)

    public_scenario_pop_postgres_select = PGGrantTable(schema='public', table='scenario_pop', columns=['geom', 'grid_visualization_id', 'modus', 'percentile_population', 'population'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(public_scenario_pop_postgres_select)

    public_scenario_pop_postgres_update = PGGrantTable(schema='public', table='scenario_pop', columns=['geom', 'grid_visualization_id', 'modus', 'percentile_population', 'population'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(public_scenario_pop_postgres_update)

    public_test_postgres_insert = PGGrantTable(schema='public', table='test', columns=['area_isochrone', 'geom', 'grid_visualization_id', 'modus', 'percentile_area_isochrone'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(public_test_postgres_insert)

    public_test_postgres_references = PGGrantTable(schema='public', table='test', columns=['area_isochrone', 'geom', 'grid_visualization_id', 'modus', 'percentile_area_isochrone'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(public_test_postgres_references)

    public_test_postgres_select = PGGrantTable(schema='public', table='test', columns=['area_isochrone', 'geom', 'grid_visualization_id', 'modus', 'percentile_area_isochrone'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(public_test_postgres_select)

    public_test_postgres_update = PGGrantTable(schema='public', table='test', columns=['area_isochrone', 'geom', 'grid_visualization_id', 'modus', 'percentile_area_isochrone'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(public_test_postgres_update)

    public_test_grids_postgres_insert = PGGrantTable(schema='public', table='test_grids', columns=['geom'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(public_test_grids_postgres_insert)

    public_test_grids_postgres_references = PGGrantTable(schema='public', table='test_grids', columns=['geom'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(public_test_grids_postgres_references)

    public_test_grids_postgres_select = PGGrantTable(schema='public', table='test_grids', columns=['geom'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(public_test_grids_postgres_select)

    public_test_grids_postgres_update = PGGrantTable(schema='public', table='test_grids', columns=['geom'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(public_test_grids_postgres_update)

    public_alembic_version_postgres_delete = PGGrantTable(schema='public', table='alembic_version', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(public_alembic_version_postgres_delete)

    public_alembic_version_postgres_truncate = PGGrantTable(schema='public', table='alembic_version', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(public_alembic_version_postgres_truncate)

    public_alembic_version_postgres_trigger = PGGrantTable(schema='public', table='alembic_version', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(public_alembic_version_postgres_trigger)

    public_comparison_pop_postgres_delete = PGGrantTable(schema='public', table='comparison_pop', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(public_comparison_pop_postgres_delete)

    public_comparison_pop_postgres_truncate = PGGrantTable(schema='public', table='comparison_pop', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(public_comparison_pop_postgres_truncate)

    public_comparison_pop_postgres_trigger = PGGrantTable(schema='public', table='comparison_pop', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(public_comparison_pop_postgres_trigger)

    public_default_pop_postgres_delete = PGGrantTable(schema='public', table='default_pop', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(public_default_pop_postgres_delete)

    public_default_pop_postgres_truncate = PGGrantTable(schema='public', table='default_pop', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(public_default_pop_postgres_truncate)

    public_default_pop_postgres_trigger = PGGrantTable(schema='public', table='default_pop', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(public_default_pop_postgres_trigger)

    public_scenario_pop_postgres_delete = PGGrantTable(schema='public', table='scenario_pop', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(public_scenario_pop_postgres_delete)

    public_scenario_pop_postgres_truncate = PGGrantTable(schema='public', table='scenario_pop', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(public_scenario_pop_postgres_truncate)

    public_scenario_pop_postgres_trigger = PGGrantTable(schema='public', table='scenario_pop', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(public_scenario_pop_postgres_trigger)

    public_test_postgres_delete = PGGrantTable(schema='public', table='test', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(public_test_postgres_delete)

    public_test_postgres_truncate = PGGrantTable(schema='public', table='test', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(public_test_postgres_truncate)

    public_test_postgres_trigger = PGGrantTable(schema='public', table='test', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(public_test_postgres_trigger)

    public_test_grids_postgres_delete = PGGrantTable(schema='public', table='test_grids', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(public_test_grids_postgres_delete)

    public_test_grids_postgres_truncate = PGGrantTable(schema='public', table='test_grids', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(public_test_grids_postgres_truncate)

    public_test_grids_postgres_trigger = PGGrantTable(schema='public', table='test_grids', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(public_test_grids_postgres_trigger)

    basic_aoi_postgres_insert = PGGrantTable(schema='basic', table='aoi', columns=['category', 'geom', 'id', 'name', 'opening_hours', 'tags', 'wheelchair'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(basic_aoi_postgres_insert)

    basic_aoi_postgres_references = PGGrantTable(schema='basic', table='aoi', columns=['category', 'geom', 'id', 'name', 'opening_hours', 'tags', 'wheelchair'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(basic_aoi_postgres_references)

    basic_aoi_postgres_select = PGGrantTable(schema='basic', table='aoi', columns=['category', 'geom', 'id', 'name', 'opening_hours', 'tags', 'wheelchair'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(basic_aoi_postgres_select)

    basic_aoi_postgres_update = PGGrantTable(schema='basic', table='aoi', columns=['category', 'geom', 'id', 'name', 'opening_hours', 'tags', 'wheelchair'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(basic_aoi_postgres_update)

    basic_building_postgres_insert = PGGrantTable(schema='basic', table='building', columns=['amenity', 'area', 'building_levels', 'building_levels_residential', 'building_type', 'geom', 'gross_floor_area_residential', 'height', 'housenumber', 'id', 'osm_id', 'residential_status', 'roof_levels', 'street'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(basic_building_postgres_insert)

    basic_building_postgres_references = PGGrantTable(schema='basic', table='building', columns=['amenity', 'area', 'building_levels', 'building_levels_residential', 'building_type', 'geom', 'gross_floor_area_residential', 'height', 'housenumber', 'id', 'osm_id', 'residential_status', 'roof_levels', 'street'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(basic_building_postgres_references)

    basic_building_postgres_select = PGGrantTable(schema='basic', table='building', columns=['amenity', 'area', 'building_levels', 'building_levels_residential', 'building_type', 'geom', 'gross_floor_area_residential', 'height', 'housenumber', 'id', 'osm_id', 'residential_status', 'roof_levels', 'street'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(basic_building_postgres_select)

    basic_building_postgres_update = PGGrantTable(schema='basic', table='building', columns=['amenity', 'area', 'building_levels', 'building_levels_residential', 'building_type', 'geom', 'gross_floor_area_residential', 'height', 'housenumber', 'id', 'osm_id', 'residential_status', 'roof_levels', 'street'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(basic_building_postgres_update)

    basic_edge_postgres_insert = PGGrantTable(schema='basic', table='edge', columns=['bicycle', 'bicycle_road', 'class_id', 'coordinates_3857', 'crossing', 'crossing_delay_category', 'cycleway', 'death_end', 'edge_id', 'foot', 'geom', 'highway', 'id', 'impedance_surface', 'incline', 'incline_percent', 'lanes', 'length_3857', 'length_m', 'lit', 'lit_classified', 'maxspeed_backward', 'maxspeed_forward', 'name', 'one_link_crossing', 'one_way', 'oneway', 'osm_id', 'parking', 'parking_lane_both', 'parking_lane_left', 'parking_lane_right', 'rs_imp', 's_imp', 'scenario_id', 'segregated', 'sidewalk', 'sidewalk_both_width', 'sidewalk_left_width', 'sidewalk_right_width', 'smoothness', 'source', 'surface', 'target', 'wheelchair', 'wheelchair_classified', 'width'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(basic_edge_postgres_insert)

    basic_edge_postgres_references = PGGrantTable(schema='basic', table='edge', columns=['bicycle', 'bicycle_road', 'class_id', 'coordinates_3857', 'crossing', 'crossing_delay_category', 'cycleway', 'death_end', 'edge_id', 'foot', 'geom', 'highway', 'id', 'impedance_surface', 'incline', 'incline_percent', 'lanes', 'length_3857', 'length_m', 'lit', 'lit_classified', 'maxspeed_backward', 'maxspeed_forward', 'name', 'one_link_crossing', 'one_way', 'oneway', 'osm_id', 'parking', 'parking_lane_both', 'parking_lane_left', 'parking_lane_right', 'rs_imp', 's_imp', 'scenario_id', 'segregated', 'sidewalk', 'sidewalk_both_width', 'sidewalk_left_width', 'sidewalk_right_width', 'smoothness', 'source', 'surface', 'target', 'wheelchair', 'wheelchair_classified', 'width'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(basic_edge_postgres_references)

    basic_edge_postgres_select = PGGrantTable(schema='basic', table='edge', columns=['bicycle', 'bicycle_road', 'class_id', 'coordinates_3857', 'crossing', 'crossing_delay_category', 'cycleway', 'death_end', 'edge_id', 'foot', 'geom', 'highway', 'id', 'impedance_surface', 'incline', 'incline_percent', 'lanes', 'length_3857', 'length_m', 'lit', 'lit_classified', 'maxspeed_backward', 'maxspeed_forward', 'name', 'one_link_crossing', 'one_way', 'oneway', 'osm_id', 'parking', 'parking_lane_both', 'parking_lane_left', 'parking_lane_right', 'rs_imp', 's_imp', 'scenario_id', 'segregated', 'sidewalk', 'sidewalk_both_width', 'sidewalk_left_width', 'sidewalk_right_width', 'smoothness', 'source', 'surface', 'target', 'wheelchair', 'wheelchair_classified', 'width'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(basic_edge_postgres_select)

    basic_edge_postgres_update = PGGrantTable(schema='basic', table='edge', columns=['bicycle', 'bicycle_road', 'class_id', 'coordinates_3857', 'crossing', 'crossing_delay_category', 'cycleway', 'death_end', 'edge_id', 'foot', 'geom', 'highway', 'id', 'impedance_surface', 'incline', 'incline_percent', 'lanes', 'length_3857', 'length_m', 'lit', 'lit_classified', 'maxspeed_backward', 'maxspeed_forward', 'name', 'one_link_crossing', 'one_way', 'oneway', 'osm_id', 'parking', 'parking_lane_both', 'parking_lane_left', 'parking_lane_right', 'rs_imp', 's_imp', 'scenario_id', 'segregated', 'sidewalk', 'sidewalk_both_width', 'sidewalk_left_width', 'sidewalk_right_width', 'smoothness', 'source', 'surface', 'target', 'wheelchair', 'wheelchair_classified', 'width'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(basic_edge_postgres_update)

    basic_grid_calculation_postgres_insert = PGGrantTable(schema='basic', table='grid_calculation', columns=['geom', 'grid_visualization_id', 'id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(basic_grid_calculation_postgres_insert)

    basic_grid_calculation_postgres_references = PGGrantTable(schema='basic', table='grid_calculation', columns=['geom', 'grid_visualization_id', 'id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(basic_grid_calculation_postgres_references)

    basic_grid_calculation_postgres_select = PGGrantTable(schema='basic', table='grid_calculation', columns=['geom', 'grid_visualization_id', 'id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(basic_grid_calculation_postgres_select)

    basic_grid_calculation_postgres_update = PGGrantTable(schema='basic', table='grid_calculation', columns=['geom', 'grid_visualization_id', 'id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(basic_grid_calculation_postgres_update)

    basic_grid_visualization_postgres_insert = PGGrantTable(schema='basic', table='grid_visualization', columns=['area_isochrone', 'geom', 'id', 'percentile_area_isochrone', 'percentile_population', 'population'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(basic_grid_visualization_postgres_insert)

    basic_grid_visualization_postgres_references = PGGrantTable(schema='basic', table='grid_visualization', columns=['area_isochrone', 'geom', 'id', 'percentile_area_isochrone', 'percentile_population', 'population'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(basic_grid_visualization_postgres_references)

    basic_grid_visualization_postgres_select = PGGrantTable(schema='basic', table='grid_visualization', columns=['area_isochrone', 'geom', 'id', 'percentile_area_isochrone', 'percentile_population', 'population'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(basic_grid_visualization_postgres_select)

    basic_grid_visualization_postgres_update = PGGrantTable(schema='basic', table='grid_visualization', columns=['area_isochrone', 'geom', 'id', 'percentile_area_isochrone', 'percentile_population', 'population'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(basic_grid_visualization_postgres_update)

    basic_node_postgres_insert = PGGrantTable(schema='basic', table='node', columns=['bicycle', 'class_ids', 'cnt', 'death_end', 'foot', 'geom', 'id', 'lit_classified', 'osm_id', 'scenario_id', 'wheelchair_classified'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(basic_node_postgres_insert)

    basic_node_postgres_references = PGGrantTable(schema='basic', table='node', columns=['bicycle', 'class_ids', 'cnt', 'death_end', 'foot', 'geom', 'id', 'lit_classified', 'osm_id', 'scenario_id', 'wheelchair_classified'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(basic_node_postgres_references)

    basic_node_postgres_select = PGGrantTable(schema='basic', table='node', columns=['bicycle', 'class_ids', 'cnt', 'death_end', 'foot', 'geom', 'id', 'lit_classified', 'osm_id', 'scenario_id', 'wheelchair_classified'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(basic_node_postgres_select)

    basic_node_postgres_update = PGGrantTable(schema='basic', table='node', columns=['bicycle', 'class_ids', 'cnt', 'death_end', 'foot', 'geom', 'id', 'lit_classified', 'osm_id', 'scenario_id', 'wheelchair_classified'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(basic_node_postgres_update)

    basic_poi_postgres_insert = PGGrantTable(schema='basic', table='poi', columns=['category', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(basic_poi_postgres_insert)

    basic_poi_postgres_references = PGGrantTable(schema='basic', table='poi', columns=['category', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(basic_poi_postgres_references)

    basic_poi_postgres_select = PGGrantTable(schema='basic', table='poi', columns=['category', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(basic_poi_postgres_select)

    basic_poi_postgres_update = PGGrantTable(schema='basic', table='poi', columns=['category', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(basic_poi_postgres_update)

    basic_population_postgres_insert = PGGrantTable(schema='basic', table='population', columns=['building_id', 'demography', 'geom', 'id', 'population', 'sub_study_area_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(basic_population_postgres_insert)

    basic_population_postgres_references = PGGrantTable(schema='basic', table='population', columns=['building_id', 'demography', 'geom', 'id', 'population', 'sub_study_area_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(basic_population_postgres_references)

    basic_population_postgres_select = PGGrantTable(schema='basic', table='population', columns=['building_id', 'demography', 'geom', 'id', 'population', 'sub_study_area_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(basic_population_postgres_select)

    basic_population_postgres_update = PGGrantTable(schema='basic', table='population', columns=['building_id', 'demography', 'geom', 'id', 'population', 'sub_study_area_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(basic_population_postgres_update)

    basic_study_area_postgres_insert = PGGrantTable(schema='basic', table='study_area', columns=['buffer_geom_heatmap', 'geom', 'id', 'name', 'population', 'setting'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(basic_study_area_postgres_insert)

    basic_study_area_postgres_references = PGGrantTable(schema='basic', table='study_area', columns=['buffer_geom_heatmap', 'geom', 'id', 'name', 'population', 'setting'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(basic_study_area_postgres_references)

    basic_study_area_postgres_select = PGGrantTable(schema='basic', table='study_area', columns=['buffer_geom_heatmap', 'geom', 'id', 'name', 'population', 'setting'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(basic_study_area_postgres_select)

    basic_study_area_postgres_update = PGGrantTable(schema='basic', table='study_area', columns=['buffer_geom_heatmap', 'geom', 'id', 'name', 'population', 'setting'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(basic_study_area_postgres_update)

    basic_study_area_grid_visualization_postgres_insert = PGGrantTable(schema='basic', table='study_area_grid_visualization', columns=['grid_visualization_id', 'id', 'study_area_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(basic_study_area_grid_visualization_postgres_insert)

    basic_study_area_grid_visualization_postgres_references = PGGrantTable(schema='basic', table='study_area_grid_visualization', columns=['grid_visualization_id', 'id', 'study_area_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(basic_study_area_grid_visualization_postgres_references)

    basic_study_area_grid_visualization_postgres_select = PGGrantTable(schema='basic', table='study_area_grid_visualization', columns=['grid_visualization_id', 'id', 'study_area_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(basic_study_area_grid_visualization_postgres_select)

    basic_study_area_grid_visualization_postgres_update = PGGrantTable(schema='basic', table='study_area_grid_visualization', columns=['grid_visualization_id', 'id', 'study_area_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(basic_study_area_grid_visualization_postgres_update)

    basic_sub_study_area_postgres_insert = PGGrantTable(schema='basic', table='sub_study_area', columns=['area', 'default_building_levels', 'default_roof_levels', 'geom', 'id', 'name', 'population', 'study_area_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(basic_sub_study_area_postgres_insert)

    basic_sub_study_area_postgres_references = PGGrantTable(schema='basic', table='sub_study_area', columns=['area', 'default_building_levels', 'default_roof_levels', 'geom', 'id', 'name', 'population', 'study_area_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(basic_sub_study_area_postgres_references)

    basic_sub_study_area_postgres_select = PGGrantTable(schema='basic', table='sub_study_area', columns=['area', 'default_building_levels', 'default_roof_levels', 'geom', 'id', 'name', 'population', 'study_area_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(basic_sub_study_area_postgres_select)

    basic_sub_study_area_postgres_update = PGGrantTable(schema='basic', table='sub_study_area', columns=['area', 'default_building_levels', 'default_roof_levels', 'geom', 'id', 'name', 'population', 'study_area_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(basic_sub_study_area_postgres_update)

    basic_aoi_postgres_delete = PGGrantTable(schema='basic', table='aoi', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(basic_aoi_postgres_delete)

    basic_aoi_postgres_truncate = PGGrantTable(schema='basic', table='aoi', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(basic_aoi_postgres_truncate)

    basic_aoi_postgres_trigger = PGGrantTable(schema='basic', table='aoi', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(basic_aoi_postgres_trigger)

    basic_node_postgres_delete = PGGrantTable(schema='basic', table='node', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(basic_node_postgres_delete)

    basic_node_postgres_truncate = PGGrantTable(schema='basic', table='node', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(basic_node_postgres_truncate)

    basic_node_postgres_trigger = PGGrantTable(schema='basic', table='node', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(basic_node_postgres_trigger)

    basic_building_postgres_delete = PGGrantTable(schema='basic', table='building', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(basic_building_postgres_delete)

    basic_building_postgres_truncate = PGGrantTable(schema='basic', table='building', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(basic_building_postgres_truncate)

    basic_building_postgres_trigger = PGGrantTable(schema='basic', table='building', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(basic_building_postgres_trigger)

    basic_grid_visualization_postgres_delete = PGGrantTable(schema='basic', table='grid_visualization', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(basic_grid_visualization_postgres_delete)

    basic_grid_visualization_postgres_truncate = PGGrantTable(schema='basic', table='grid_visualization', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(basic_grid_visualization_postgres_truncate)

    basic_grid_visualization_postgres_trigger = PGGrantTable(schema='basic', table='grid_visualization', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(basic_grid_visualization_postgres_trigger)

    basic_edge_postgres_delete = PGGrantTable(schema='basic', table='edge', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(basic_edge_postgres_delete)

    basic_edge_postgres_truncate = PGGrantTable(schema='basic', table='edge', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(basic_edge_postgres_truncate)

    basic_edge_postgres_trigger = PGGrantTable(schema='basic', table='edge', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(basic_edge_postgres_trigger)

    basic_poi_postgres_delete = PGGrantTable(schema='basic', table='poi', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(basic_poi_postgres_delete)

    basic_poi_postgres_truncate = PGGrantTable(schema='basic', table='poi', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(basic_poi_postgres_truncate)

    basic_poi_postgres_trigger = PGGrantTable(schema='basic', table='poi', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(basic_poi_postgres_trigger)

    basic_study_area_grid_visualization_postgres_delete = PGGrantTable(schema='basic', table='study_area_grid_visualization', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(basic_study_area_grid_visualization_postgres_delete)

    basic_study_area_grid_visualization_postgres_truncate = PGGrantTable(schema='basic', table='study_area_grid_visualization', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(basic_study_area_grid_visualization_postgres_truncate)

    basic_study_area_grid_visualization_postgres_trigger = PGGrantTable(schema='basic', table='study_area_grid_visualization', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(basic_study_area_grid_visualization_postgres_trigger)

    basic_population_postgres_delete = PGGrantTable(schema='basic', table='population', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(basic_population_postgres_delete)

    basic_population_postgres_truncate = PGGrantTable(schema='basic', table='population', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(basic_population_postgres_truncate)

    basic_population_postgres_trigger = PGGrantTable(schema='basic', table='population', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(basic_population_postgres_trigger)

    basic_study_area_postgres_delete = PGGrantTable(schema='basic', table='study_area', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(basic_study_area_postgres_delete)

    basic_study_area_postgres_truncate = PGGrantTable(schema='basic', table='study_area', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(basic_study_area_postgres_truncate)

    basic_study_area_postgres_trigger = PGGrantTable(schema='basic', table='study_area', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(basic_study_area_postgres_trigger)

    basic_sub_study_area_postgres_delete = PGGrantTable(schema='basic', table='sub_study_area', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(basic_sub_study_area_postgres_delete)

    basic_sub_study_area_postgres_truncate = PGGrantTable(schema='basic', table='sub_study_area', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(basic_sub_study_area_postgres_truncate)

    basic_sub_study_area_postgres_trigger = PGGrantTable(schema='basic', table='sub_study_area', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(basic_sub_study_area_postgres_trigger)

    basic_grid_calculation_postgres_delete = PGGrantTable(schema='basic', table='grid_calculation', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(basic_grid_calculation_postgres_delete)

    basic_grid_calculation_postgres_truncate = PGGrantTable(schema='basic', table='grid_calculation', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(basic_grid_calculation_postgres_truncate)

    basic_grid_calculation_postgres_trigger = PGGrantTable(schema='basic', table='grid_calculation', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(basic_grid_calculation_postgres_trigger)

    customer_aoi_modified_postgres_insert = PGGrantTable(schema='customer', table='aoi_modified', columns=['category', 'creation_date', 'geom', 'id', 'name', 'opening_hours', 'scenario_id', 'tags', 'wheelchair'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(customer_aoi_modified_postgres_insert)

    customer_aoi_modified_postgres_references = PGGrantTable(schema='customer', table='aoi_modified', columns=['category', 'creation_date', 'geom', 'id', 'name', 'opening_hours', 'scenario_id', 'tags', 'wheelchair'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(customer_aoi_modified_postgres_references)

    customer_aoi_modified_postgres_select = PGGrantTable(schema='customer', table='aoi_modified', columns=['category', 'creation_date', 'geom', 'id', 'name', 'opening_hours', 'scenario_id', 'tags', 'wheelchair'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(customer_aoi_modified_postgres_select)

    customer_aoi_modified_postgres_update = PGGrantTable(schema='customer', table='aoi_modified', columns=['category', 'creation_date', 'geom', 'id', 'name', 'opening_hours', 'scenario_id', 'tags', 'wheelchair'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(customer_aoi_modified_postgres_update)

    customer_aoi_user_postgres_insert = PGGrantTable(schema='customer', table='aoi_user', columns=['category', 'creation_date', 'data_upload_id', 'geom', 'id', 'name', 'opening_hours', 'tags', 'wheelchair'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(customer_aoi_user_postgres_insert)

    customer_aoi_user_postgres_references = PGGrantTable(schema='customer', table='aoi_user', columns=['category', 'creation_date', 'data_upload_id', 'geom', 'id', 'name', 'opening_hours', 'tags', 'wheelchair'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(customer_aoi_user_postgres_references)

    customer_aoi_user_postgres_select = PGGrantTable(schema='customer', table='aoi_user', columns=['category', 'creation_date', 'data_upload_id', 'geom', 'id', 'name', 'opening_hours', 'tags', 'wheelchair'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(customer_aoi_user_postgres_select)

    customer_aoi_user_postgres_update = PGGrantTable(schema='customer', table='aoi_user', columns=['category', 'creation_date', 'data_upload_id', 'geom', 'id', 'name', 'opening_hours', 'tags', 'wheelchair'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(customer_aoi_user_postgres_update)

    customer_building_modified_postgres_insert = PGGrantTable(schema='customer', table='building_modified', columns=['amenity', 'area', 'building_id', 'building_levels', 'building_levels_residential', 'building_type', 'creation_date', 'geom', 'gross_floor_area_residential', 'height', 'housenumber', 'id', 'population', 'residential_status', 'roof_levels', 'scenario_id', 'street'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(customer_building_modified_postgres_insert)

    customer_building_modified_postgres_references = PGGrantTable(schema='customer', table='building_modified', columns=['amenity', 'area', 'building_id', 'building_levels', 'building_levels_residential', 'building_type', 'creation_date', 'geom', 'gross_floor_area_residential', 'height', 'housenumber', 'id', 'population', 'residential_status', 'roof_levels', 'scenario_id', 'street'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(customer_building_modified_postgres_references)

    customer_building_modified_postgres_select = PGGrantTable(schema='customer', table='building_modified', columns=['amenity', 'area', 'building_id', 'building_levels', 'building_levels_residential', 'building_type', 'creation_date', 'geom', 'gross_floor_area_residential', 'height', 'housenumber', 'id', 'population', 'residential_status', 'roof_levels', 'scenario_id', 'street'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(customer_building_modified_postgres_select)

    customer_building_modified_postgres_update = PGGrantTable(schema='customer', table='building_modified', columns=['amenity', 'area', 'building_id', 'building_levels', 'building_levels_residential', 'building_type', 'creation_date', 'geom', 'gross_floor_area_residential', 'height', 'housenumber', 'id', 'population', 'residential_status', 'roof_levels', 'scenario_id', 'street'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(customer_building_modified_postgres_update)

    customer_customization_postgres_insert = PGGrantTable(schema='customer', table='customization', columns=['id', 'role_id', 'setting', 'type'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(customer_customization_postgres_insert)

    customer_customization_postgres_references = PGGrantTable(schema='customer', table='customization', columns=['id', 'role_id', 'setting', 'type'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(customer_customization_postgres_references)

    customer_customization_postgres_select = PGGrantTable(schema='customer', table='customization', columns=['id', 'role_id', 'setting', 'type'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(customer_customization_postgres_select)

    customer_customization_postgres_update = PGGrantTable(schema='customer', table='customization', columns=['id', 'role_id', 'setting', 'type'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(customer_customization_postgres_update)

    customer_data_upload_postgres_insert = PGGrantTable(schema='customer', table='data_upload', columns=['creation_date', 'data_type', 'id', 'reached_poi_heatmap_computed', 'study_area_id', 'upload_grid_ids', 'upload_size', 'upload_type', 'user_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(customer_data_upload_postgres_insert)

    customer_data_upload_postgres_references = PGGrantTable(schema='customer', table='data_upload', columns=['creation_date', 'data_type', 'id', 'reached_poi_heatmap_computed', 'study_area_id', 'upload_grid_ids', 'upload_size', 'upload_type', 'user_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(customer_data_upload_postgres_references)

    customer_data_upload_postgres_select = PGGrantTable(schema='customer', table='data_upload', columns=['creation_date', 'data_type', 'id', 'reached_poi_heatmap_computed', 'study_area_id', 'upload_grid_ids', 'upload_size', 'upload_type', 'user_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(customer_data_upload_postgres_select)

    customer_data_upload_postgres_update = PGGrantTable(schema='customer', table='data_upload', columns=['creation_date', 'data_type', 'id', 'reached_poi_heatmap_computed', 'study_area_id', 'upload_grid_ids', 'upload_size', 'upload_type', 'user_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(customer_data_upload_postgres_update)

    customer_isochrone_calculation_postgres_insert = PGGrantTable(schema='customer', table='isochrone_calculation', columns=['calculation_type', 'creation_date', 'id', 'modus', 'parent_id', 'routing_profile', 'scenario_id', 'speed', 'starting_point', 'user_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(customer_isochrone_calculation_postgres_insert)

    customer_isochrone_calculation_postgres_references = PGGrantTable(schema='customer', table='isochrone_calculation', columns=['calculation_type', 'creation_date', 'id', 'modus', 'parent_id', 'routing_profile', 'scenario_id', 'speed', 'starting_point', 'user_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(customer_isochrone_calculation_postgres_references)

    customer_isochrone_calculation_postgres_select = PGGrantTable(schema='customer', table='isochrone_calculation', columns=['calculation_type', 'creation_date', 'id', 'modus', 'parent_id', 'routing_profile', 'scenario_id', 'speed', 'starting_point', 'user_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(customer_isochrone_calculation_postgres_select)

    customer_isochrone_calculation_postgres_update = PGGrantTable(schema='customer', table='isochrone_calculation', columns=['calculation_type', 'creation_date', 'id', 'modus', 'parent_id', 'routing_profile', 'scenario_id', 'speed', 'starting_point', 'user_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(customer_isochrone_calculation_postgres_update)

    customer_isochrone_edge_postgres_insert = PGGrantTable(schema='customer', table='isochrone_edge', columns=['cost', 'edge_id', 'end_cost', 'end_perc', 'geom', 'id', 'isochrone_calculation_id', 'partial_edge', 'start_cost', 'start_perc'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(customer_isochrone_edge_postgres_insert)

    customer_isochrone_edge_postgres_references = PGGrantTable(schema='customer', table='isochrone_edge', columns=['cost', 'edge_id', 'end_cost', 'end_perc', 'geom', 'id', 'isochrone_calculation_id', 'partial_edge', 'start_cost', 'start_perc'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(customer_isochrone_edge_postgres_references)

    customer_isochrone_edge_postgres_select = PGGrantTable(schema='customer', table='isochrone_edge', columns=['cost', 'edge_id', 'end_cost', 'end_perc', 'geom', 'id', 'isochrone_calculation_id', 'partial_edge', 'start_cost', 'start_perc'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(customer_isochrone_edge_postgres_select)

    customer_isochrone_edge_postgres_update = PGGrantTable(schema='customer', table='isochrone_edge', columns=['cost', 'edge_id', 'end_cost', 'end_perc', 'geom', 'id', 'isochrone_calculation_id', 'partial_edge', 'start_cost', 'start_perc'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(customer_isochrone_edge_postgres_update)

    customer_isochrone_feature_postgres_insert = PGGrantTable(schema='customer', table='isochrone_feature', columns=['geom', 'id', 'isochrone_calculation_id', 'reached_opportunities', 'step'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(customer_isochrone_feature_postgres_insert)

    customer_isochrone_feature_postgres_references = PGGrantTable(schema='customer', table='isochrone_feature', columns=['geom', 'id', 'isochrone_calculation_id', 'reached_opportunities', 'step'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(customer_isochrone_feature_postgres_references)

    customer_isochrone_feature_postgres_select = PGGrantTable(schema='customer', table='isochrone_feature', columns=['geom', 'id', 'isochrone_calculation_id', 'reached_opportunities', 'step'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(customer_isochrone_feature_postgres_select)

    customer_isochrone_feature_postgres_update = PGGrantTable(schema='customer', table='isochrone_feature', columns=['geom', 'id', 'isochrone_calculation_id', 'reached_opportunities', 'step'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(customer_isochrone_feature_postgres_update)

    customer_organization_postgres_insert = PGGrantTable(schema='customer', table='organization', columns=['creation_date', 'id', 'name'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(customer_organization_postgres_insert)

    customer_organization_postgres_references = PGGrantTable(schema='customer', table='organization', columns=['creation_date', 'id', 'name'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(customer_organization_postgres_references)

    customer_organization_postgres_select = PGGrantTable(schema='customer', table='organization', columns=['creation_date', 'id', 'name'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(customer_organization_postgres_select)

    customer_organization_postgres_update = PGGrantTable(schema='customer', table='organization', columns=['creation_date', 'id', 'name'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(customer_organization_postgres_update)

    customer_poi_modified_postgres_insert = PGGrantTable(schema='customer', table='poi_modified', columns=['category', 'creation_date', 'data_upload_id', 'edit_type', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'scenario_id', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(customer_poi_modified_postgres_insert)

    customer_poi_modified_postgres_references = PGGrantTable(schema='customer', table='poi_modified', columns=['category', 'creation_date', 'data_upload_id', 'edit_type', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'scenario_id', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(customer_poi_modified_postgres_references)

    customer_poi_modified_postgres_select = PGGrantTable(schema='customer', table='poi_modified', columns=['category', 'creation_date', 'data_upload_id', 'edit_type', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'scenario_id', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(customer_poi_modified_postgres_select)

    customer_poi_modified_postgres_update = PGGrantTable(schema='customer', table='poi_modified', columns=['category', 'creation_date', 'data_upload_id', 'edit_type', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'scenario_id', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(customer_poi_modified_postgres_update)

    customer_poi_user_postgres_insert = PGGrantTable(schema='customer', table='poi_user', columns=['category', 'creation_date', 'data_upload_id', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(customer_poi_user_postgres_insert)

    customer_poi_user_postgres_references = PGGrantTable(schema='customer', table='poi_user', columns=['category', 'creation_date', 'data_upload_id', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(customer_poi_user_postgres_references)

    customer_poi_user_postgres_select = PGGrantTable(schema='customer', table='poi_user', columns=['category', 'creation_date', 'data_upload_id', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(customer_poi_user_postgres_select)

    customer_poi_user_postgres_update = PGGrantTable(schema='customer', table='poi_user', columns=['category', 'creation_date', 'data_upload_id', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(customer_poi_user_postgres_update)

    customer_population_modified_postgres_insert = PGGrantTable(schema='customer', table='population_modified', columns=['building_modified_id', 'creation_date', 'geom', 'id', 'population', 'scenario_id', 'sub_study_area_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(customer_population_modified_postgres_insert)

    customer_population_modified_postgres_references = PGGrantTable(schema='customer', table='population_modified', columns=['building_modified_id', 'creation_date', 'geom', 'id', 'population', 'scenario_id', 'sub_study_area_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(customer_population_modified_postgres_references)

    customer_population_modified_postgres_select = PGGrantTable(schema='customer', table='population_modified', columns=['building_modified_id', 'creation_date', 'geom', 'id', 'population', 'scenario_id', 'sub_study_area_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(customer_population_modified_postgres_select)

    customer_population_modified_postgres_update = PGGrantTable(schema='customer', table='population_modified', columns=['building_modified_id', 'creation_date', 'geom', 'id', 'population', 'scenario_id', 'sub_study_area_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(customer_population_modified_postgres_update)

    customer_reached_edge_full_heatmap_postgres_insert = PGGrantTable(schema='customer', table='reached_edge_full_heatmap', columns=['edge_id', 'geom', 'id', 'scenario_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(customer_reached_edge_full_heatmap_postgres_insert)

    customer_reached_edge_full_heatmap_postgres_references = PGGrantTable(schema='customer', table='reached_edge_full_heatmap', columns=['edge_id', 'geom', 'id', 'scenario_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(customer_reached_edge_full_heatmap_postgres_references)

    customer_reached_edge_full_heatmap_postgres_select = PGGrantTable(schema='customer', table='reached_edge_full_heatmap', columns=['edge_id', 'geom', 'id', 'scenario_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(customer_reached_edge_full_heatmap_postgres_select)

    customer_reached_edge_full_heatmap_postgres_update = PGGrantTable(schema='customer', table='reached_edge_full_heatmap', columns=['edge_id', 'geom', 'id', 'scenario_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(customer_reached_edge_full_heatmap_postgres_update)

    customer_reached_edge_heatmap_grid_calculation_postgres_insert = PGGrantTable(schema='customer', table='reached_edge_heatmap_grid_calculation', columns=['edge_type', 'end_cost', 'end_perc', 'grid_calculation_id', 'id', 'reached_edge_heatmap_id', 'start_cost', 'start_perc'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(customer_reached_edge_heatmap_grid_calculation_postgres_insert)

    customer_reached_edge_heatmap_grid_calculation_postgres_references = PGGrantTable(schema='customer', table='reached_edge_heatmap_grid_calculation', columns=['edge_type', 'end_cost', 'end_perc', 'grid_calculation_id', 'id', 'reached_edge_heatmap_id', 'start_cost', 'start_perc'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(customer_reached_edge_heatmap_grid_calculation_postgres_references)

    customer_reached_edge_heatmap_grid_calculation_postgres_select = PGGrantTable(schema='customer', table='reached_edge_heatmap_grid_calculation', columns=['edge_type', 'end_cost', 'end_perc', 'grid_calculation_id', 'id', 'reached_edge_heatmap_id', 'start_cost', 'start_perc'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(customer_reached_edge_heatmap_grid_calculation_postgres_select)

    customer_reached_edge_heatmap_grid_calculation_postgres_update = PGGrantTable(schema='customer', table='reached_edge_heatmap_grid_calculation', columns=['edge_type', 'end_cost', 'end_perc', 'grid_calculation_id', 'id', 'reached_edge_heatmap_id', 'start_cost', 'start_perc'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(customer_reached_edge_heatmap_grid_calculation_postgres_update)

    customer_reached_poi_heatmap_postgres_insert = PGGrantTable(schema='customer', table='reached_poi_heatmap', columns=['accessibility_indices', 'costs', 'data_upload_id', 'grid_visualization_ids', 'id', 'poi_uid', 'scenario_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(customer_reached_poi_heatmap_postgres_insert)

    customer_reached_poi_heatmap_postgres_references = PGGrantTable(schema='customer', table='reached_poi_heatmap', columns=['accessibility_indices', 'costs', 'data_upload_id', 'grid_visualization_ids', 'id', 'poi_uid', 'scenario_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(customer_reached_poi_heatmap_postgres_references)

    customer_reached_poi_heatmap_postgres_select = PGGrantTable(schema='customer', table='reached_poi_heatmap', columns=['accessibility_indices', 'costs', 'data_upload_id', 'grid_visualization_ids', 'id', 'poi_uid', 'scenario_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(customer_reached_poi_heatmap_postgres_select)

    customer_reached_poi_heatmap_postgres_update = PGGrantTable(schema='customer', table='reached_poi_heatmap', columns=['accessibility_indices', 'costs', 'data_upload_id', 'grid_visualization_ids', 'id', 'poi_uid', 'scenario_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(customer_reached_poi_heatmap_postgres_update)

    customer_role_postgres_insert = PGGrantTable(schema='customer', table='role', columns=['id', 'name'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(customer_role_postgres_insert)

    customer_role_postgres_references = PGGrantTable(schema='customer', table='role', columns=['id', 'name'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(customer_role_postgres_references)

    customer_role_postgres_select = PGGrantTable(schema='customer', table='role', columns=['id', 'name'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(customer_role_postgres_select)

    customer_role_postgres_update = PGGrantTable(schema='customer', table='role', columns=['id', 'name'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(customer_role_postgres_update)

    customer_scenario_postgres_insert = PGGrantTable(schema='customer', table='scenario', columns=['creation_date', 'data_upload_ids', 'deleted_buildings', 'deleted_pois', 'deleted_ways', 'id', 'routing_heatmap_computed', 'scenario_name', 'user_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(customer_scenario_postgres_insert)

    customer_scenario_postgres_references = PGGrantTable(schema='customer', table='scenario', columns=['creation_date', 'data_upload_ids', 'deleted_buildings', 'deleted_pois', 'deleted_ways', 'id', 'routing_heatmap_computed', 'scenario_name', 'user_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(customer_scenario_postgres_references)

    customer_scenario_postgres_select = PGGrantTable(schema='customer', table='scenario', columns=['creation_date', 'data_upload_ids', 'deleted_buildings', 'deleted_pois', 'deleted_ways', 'id', 'routing_heatmap_computed', 'scenario_name', 'user_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(customer_scenario_postgres_select)

    customer_scenario_postgres_update = PGGrantTable(schema='customer', table='scenario', columns=['creation_date', 'data_upload_ids', 'deleted_buildings', 'deleted_pois', 'deleted_ways', 'id', 'routing_heatmap_computed', 'scenario_name', 'user_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(customer_scenario_postgres_update)

    customer_user_postgres_insert = PGGrantTable(schema='customer', table='user', columns=['active_data_upload_ids', 'active_study_area_id', 'creation_date', 'email', 'hashed_password', 'id', 'is_active', 'limit_scenarios', 'name', 'organization_id', 'storage', 'surname'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(customer_user_postgres_insert)

    customer_user_postgres_references = PGGrantTable(schema='customer', table='user', columns=['active_data_upload_ids', 'active_study_area_id', 'creation_date', 'email', 'hashed_password', 'id', 'is_active', 'limit_scenarios', 'name', 'organization_id', 'storage', 'surname'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(customer_user_postgres_references)

    customer_user_postgres_select = PGGrantTable(schema='customer', table='user', columns=['active_data_upload_ids', 'active_study_area_id', 'creation_date', 'email', 'hashed_password', 'id', 'is_active', 'limit_scenarios', 'name', 'organization_id', 'storage', 'surname'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(customer_user_postgres_select)

    customer_user_postgres_update = PGGrantTable(schema='customer', table='user', columns=['active_data_upload_ids', 'active_study_area_id', 'creation_date', 'email', 'hashed_password', 'id', 'is_active', 'limit_scenarios', 'name', 'organization_id', 'storage', 'surname'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(customer_user_postgres_update)

    customer_user_customization_postgres_insert = PGGrantTable(schema='customer', table='user_customization', columns=['creation_date', 'customization_id', 'id', 'setting', 'study_area_id', 'user_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(customer_user_customization_postgres_insert)

    customer_user_customization_postgres_references = PGGrantTable(schema='customer', table='user_customization', columns=['creation_date', 'customization_id', 'id', 'setting', 'study_area_id', 'user_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(customer_user_customization_postgres_references)

    customer_user_customization_postgres_select = PGGrantTable(schema='customer', table='user_customization', columns=['creation_date', 'customization_id', 'id', 'setting', 'study_area_id', 'user_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(customer_user_customization_postgres_select)

    customer_user_customization_postgres_update = PGGrantTable(schema='customer', table='user_customization', columns=['creation_date', 'customization_id', 'id', 'setting', 'study_area_id', 'user_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(customer_user_customization_postgres_update)

    customer_user_role_postgres_insert = PGGrantTable(schema='customer', table='user_role', columns=['id', 'role_id', 'user_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(customer_user_role_postgres_insert)

    customer_user_role_postgres_references = PGGrantTable(schema='customer', table='user_role', columns=['id', 'role_id', 'user_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(customer_user_role_postgres_references)

    customer_user_role_postgres_select = PGGrantTable(schema='customer', table='user_role', columns=['id', 'role_id', 'user_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(customer_user_role_postgres_select)

    customer_user_role_postgres_update = PGGrantTable(schema='customer', table='user_role', columns=['id', 'role_id', 'user_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(customer_user_role_postgres_update)

    customer_user_study_area_postgres_insert = PGGrantTable(schema='customer', table='user_study_area', columns=['creation_date', 'id', 'study_area_id', 'user_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(customer_user_study_area_postgres_insert)

    customer_user_study_area_postgres_references = PGGrantTable(schema='customer', table='user_study_area', columns=['creation_date', 'id', 'study_area_id', 'user_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(customer_user_study_area_postgres_references)

    customer_user_study_area_postgres_select = PGGrantTable(schema='customer', table='user_study_area', columns=['creation_date', 'id', 'study_area_id', 'user_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(customer_user_study_area_postgres_select)

    customer_user_study_area_postgres_update = PGGrantTable(schema='customer', table='user_study_area', columns=['creation_date', 'id', 'study_area_id', 'user_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(customer_user_study_area_postgres_update)

    customer_way_modified_postgres_insert = PGGrantTable(schema='customer', table='way_modified', columns=['bicycle', 'bicycle_road', 'class_id', 'creation_date', 'crossing', 'crossing_delay_category', 'cycleway', 'death_end', 'edit_type', 'foot', 'geom', 'highway', 'id', 'impedance_surface', 'incline', 'incline_percent', 'lanes', 'lit', 'lit_classified', 'maxspeed_backward', 'maxspeed_forward', 'name', 'one_link_crossing', 'one_way', 'oneway', 'osm_id', 'parking', 'parking_lane_both', 'parking_lane_left', 'parking_lane_right', 'rs_imp', 's_imp', 'scenario_id', 'segregated', 'sidewalk', 'sidewalk_both_width', 'sidewalk_left_width', 'sidewalk_right_width', 'smoothness', 'surface', 'way_id', 'way_type', 'wheelchair', 'wheelchair_classified', 'width'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(customer_way_modified_postgres_insert)

    customer_way_modified_postgres_references = PGGrantTable(schema='customer', table='way_modified', columns=['bicycle', 'bicycle_road', 'class_id', 'creation_date', 'crossing', 'crossing_delay_category', 'cycleway', 'death_end', 'edit_type', 'foot', 'geom', 'highway', 'id', 'impedance_surface', 'incline', 'incline_percent', 'lanes', 'lit', 'lit_classified', 'maxspeed_backward', 'maxspeed_forward', 'name', 'one_link_crossing', 'one_way', 'oneway', 'osm_id', 'parking', 'parking_lane_both', 'parking_lane_left', 'parking_lane_right', 'rs_imp', 's_imp', 'scenario_id', 'segregated', 'sidewalk', 'sidewalk_both_width', 'sidewalk_left_width', 'sidewalk_right_width', 'smoothness', 'surface', 'way_id', 'way_type', 'wheelchair', 'wheelchair_classified', 'width'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(customer_way_modified_postgres_references)

    customer_way_modified_postgres_select = PGGrantTable(schema='customer', table='way_modified', columns=['bicycle', 'bicycle_road', 'class_id', 'creation_date', 'crossing', 'crossing_delay_category', 'cycleway', 'death_end', 'edit_type', 'foot', 'geom', 'highway', 'id', 'impedance_surface', 'incline', 'incline_percent', 'lanes', 'lit', 'lit_classified', 'maxspeed_backward', 'maxspeed_forward', 'name', 'one_link_crossing', 'one_way', 'oneway', 'osm_id', 'parking', 'parking_lane_both', 'parking_lane_left', 'parking_lane_right', 'rs_imp', 's_imp', 'scenario_id', 'segregated', 'sidewalk', 'sidewalk_both_width', 'sidewalk_left_width', 'sidewalk_right_width', 'smoothness', 'surface', 'way_id', 'way_type', 'wheelchair', 'wheelchair_classified', 'width'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(customer_way_modified_postgres_select)

    customer_way_modified_postgres_update = PGGrantTable(schema='customer', table='way_modified', columns=['bicycle', 'bicycle_road', 'class_id', 'creation_date', 'crossing', 'crossing_delay_category', 'cycleway', 'death_end', 'edit_type', 'foot', 'geom', 'highway', 'id', 'impedance_surface', 'incline', 'incline_percent', 'lanes', 'lit', 'lit_classified', 'maxspeed_backward', 'maxspeed_forward', 'name', 'one_link_crossing', 'one_way', 'oneway', 'osm_id', 'parking', 'parking_lane_both', 'parking_lane_left', 'parking_lane_right', 'rs_imp', 's_imp', 'scenario_id', 'segregated', 'sidewalk', 'sidewalk_both_width', 'sidewalk_left_width', 'sidewalk_right_width', 'smoothness', 'surface', 'way_id', 'way_type', 'wheelchair', 'wheelchair_classified', 'width'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(customer_way_modified_postgres_update)

    customer_aoi_user_postgres_delete = PGGrantTable(schema='customer', table='aoi_user', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(customer_aoi_user_postgres_delete)

    customer_aoi_user_postgres_truncate = PGGrantTable(schema='customer', table='aoi_user', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(customer_aoi_user_postgres_truncate)

    customer_aoi_user_postgres_trigger = PGGrantTable(schema='customer', table='aoi_user', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(customer_aoi_user_postgres_trigger)

    customer_building_modified_postgres_delete = PGGrantTable(schema='customer', table='building_modified', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(customer_building_modified_postgres_delete)

    customer_building_modified_postgres_truncate = PGGrantTable(schema='customer', table='building_modified', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(customer_building_modified_postgres_truncate)

    customer_building_modified_postgres_trigger = PGGrantTable(schema='customer', table='building_modified', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(customer_building_modified_postgres_trigger)

    customer_aoi_modified_postgres_delete = PGGrantTable(schema='customer', table='aoi_modified', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(customer_aoi_modified_postgres_delete)

    customer_aoi_modified_postgres_truncate = PGGrantTable(schema='customer', table='aoi_modified', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(customer_aoi_modified_postgres_truncate)

    customer_aoi_modified_postgres_trigger = PGGrantTable(schema='customer', table='aoi_modified', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(customer_aoi_modified_postgres_trigger)

    customer_customization_postgres_delete = PGGrantTable(schema='customer', table='customization', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(customer_customization_postgres_delete)

    customer_customization_postgres_truncate = PGGrantTable(schema='customer', table='customization', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(customer_customization_postgres_truncate)

    customer_customization_postgres_trigger = PGGrantTable(schema='customer', table='customization', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(customer_customization_postgres_trigger)

    customer_isochrone_edge_postgres_delete = PGGrantTable(schema='customer', table='isochrone_edge', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(customer_isochrone_edge_postgres_delete)

    customer_isochrone_edge_postgres_truncate = PGGrantTable(schema='customer', table='isochrone_edge', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(customer_isochrone_edge_postgres_truncate)

    customer_isochrone_edge_postgres_trigger = PGGrantTable(schema='customer', table='isochrone_edge', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(customer_isochrone_edge_postgres_trigger)

    customer_isochrone_feature_postgres_delete = PGGrantTable(schema='customer', table='isochrone_feature', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(customer_isochrone_feature_postgres_delete)

    customer_isochrone_feature_postgres_truncate = PGGrantTable(schema='customer', table='isochrone_feature', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(customer_isochrone_feature_postgres_truncate)

    customer_isochrone_feature_postgres_trigger = PGGrantTable(schema='customer', table='isochrone_feature', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(customer_isochrone_feature_postgres_trigger)

    customer_poi_modified_postgres_delete = PGGrantTable(schema='customer', table='poi_modified', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(customer_poi_modified_postgres_delete)

    customer_poi_modified_postgres_truncate = PGGrantTable(schema='customer', table='poi_modified', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(customer_poi_modified_postgres_truncate)

    customer_poi_modified_postgres_trigger = PGGrantTable(schema='customer', table='poi_modified', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(customer_poi_modified_postgres_trigger)

    customer_poi_user_postgres_delete = PGGrantTable(schema='customer', table='poi_user', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(customer_poi_user_postgres_delete)

    customer_poi_user_postgres_truncate = PGGrantTable(schema='customer', table='poi_user', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(customer_poi_user_postgres_truncate)

    customer_poi_user_postgres_trigger = PGGrantTable(schema='customer', table='poi_user', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(customer_poi_user_postgres_trigger)

    customer_population_modified_postgres_delete = PGGrantTable(schema='customer', table='population_modified', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(customer_population_modified_postgres_delete)

    customer_population_modified_postgres_truncate = PGGrantTable(schema='customer', table='population_modified', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(customer_population_modified_postgres_truncate)

    customer_population_modified_postgres_trigger = PGGrantTable(schema='customer', table='population_modified', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(customer_population_modified_postgres_trigger)

    customer_organization_postgres_delete = PGGrantTable(schema='customer', table='organization', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(customer_organization_postgres_delete)

    customer_organization_postgres_truncate = PGGrantTable(schema='customer', table='organization', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(customer_organization_postgres_truncate)

    customer_organization_postgres_trigger = PGGrantTable(schema='customer', table='organization', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(customer_organization_postgres_trigger)

    customer_data_upload_postgres_delete = PGGrantTable(schema='customer', table='data_upload', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(customer_data_upload_postgres_delete)

    customer_data_upload_postgres_truncate = PGGrantTable(schema='customer', table='data_upload', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(customer_data_upload_postgres_truncate)

    customer_data_upload_postgres_trigger = PGGrantTable(schema='customer', table='data_upload', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(customer_data_upload_postgres_trigger)

    customer_isochrone_calculation_postgres_delete = PGGrantTable(schema='customer', table='isochrone_calculation', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(customer_isochrone_calculation_postgres_delete)

    customer_isochrone_calculation_postgres_truncate = PGGrantTable(schema='customer', table='isochrone_calculation', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(customer_isochrone_calculation_postgres_truncate)

    customer_isochrone_calculation_postgres_trigger = PGGrantTable(schema='customer', table='isochrone_calculation', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(customer_isochrone_calculation_postgres_trigger)

    customer_reached_edge_full_heatmap_postgres_delete = PGGrantTable(schema='customer', table='reached_edge_full_heatmap', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(customer_reached_edge_full_heatmap_postgres_delete)

    customer_reached_edge_full_heatmap_postgres_truncate = PGGrantTable(schema='customer', table='reached_edge_full_heatmap', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(customer_reached_edge_full_heatmap_postgres_truncate)

    customer_reached_edge_full_heatmap_postgres_trigger = PGGrantTable(schema='customer', table='reached_edge_full_heatmap', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(customer_reached_edge_full_heatmap_postgres_trigger)

    customer_reached_edge_heatmap_grid_calculation_postgres_delete = PGGrantTable(schema='customer', table='reached_edge_heatmap_grid_calculation', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(customer_reached_edge_heatmap_grid_calculation_postgres_delete)

    customer_reached_edge_heatmap_grid_calculation_postgres_truncate = PGGrantTable(schema='customer', table='reached_edge_heatmap_grid_calculation', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(customer_reached_edge_heatmap_grid_calculation_postgres_truncate)

    customer_reached_edge_heatmap_grid_calculation_postgres_trigger = PGGrantTable(schema='customer', table='reached_edge_heatmap_grid_calculation', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(customer_reached_edge_heatmap_grid_calculation_postgres_trigger)

    customer_reached_poi_heatmap_postgres_delete = PGGrantTable(schema='customer', table='reached_poi_heatmap', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(customer_reached_poi_heatmap_postgres_delete)

    customer_reached_poi_heatmap_postgres_truncate = PGGrantTable(schema='customer', table='reached_poi_heatmap', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(customer_reached_poi_heatmap_postgres_truncate)

    customer_reached_poi_heatmap_postgres_trigger = PGGrantTable(schema='customer', table='reached_poi_heatmap', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(customer_reached_poi_heatmap_postgres_trigger)

    customer_scenario_postgres_delete = PGGrantTable(schema='customer', table='scenario', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(customer_scenario_postgres_delete)

    customer_scenario_postgres_truncate = PGGrantTable(schema='customer', table='scenario', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(customer_scenario_postgres_truncate)

    customer_scenario_postgres_trigger = PGGrantTable(schema='customer', table='scenario', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(customer_scenario_postgres_trigger)

    customer_user_role_postgres_delete = PGGrantTable(schema='customer', table='user_role', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(customer_user_role_postgres_delete)

    customer_user_role_postgres_truncate = PGGrantTable(schema='customer', table='user_role', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(customer_user_role_postgres_truncate)

    customer_user_role_postgres_trigger = PGGrantTable(schema='customer', table='user_role', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(customer_user_role_postgres_trigger)

    customer_way_modified_postgres_delete = PGGrantTable(schema='customer', table='way_modified', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(customer_way_modified_postgres_delete)

    customer_way_modified_postgres_truncate = PGGrantTable(schema='customer', table='way_modified', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(customer_way_modified_postgres_truncate)

    customer_way_modified_postgres_trigger = PGGrantTable(schema='customer', table='way_modified', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(customer_way_modified_postgres_trigger)

    customer_user_customization_postgres_delete = PGGrantTable(schema='customer', table='user_customization', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(customer_user_customization_postgres_delete)

    customer_user_customization_postgres_truncate = PGGrantTable(schema='customer', table='user_customization', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(customer_user_customization_postgres_truncate)

    customer_user_customization_postgres_trigger = PGGrantTable(schema='customer', table='user_customization', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(customer_user_customization_postgres_trigger)

    customer_user_study_area_postgres_delete = PGGrantTable(schema='customer', table='user_study_area', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(customer_user_study_area_postgres_delete)

    customer_user_study_area_postgres_truncate = PGGrantTable(schema='customer', table='user_study_area', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(customer_user_study_area_postgres_truncate)

    customer_user_study_area_postgres_trigger = PGGrantTable(schema='customer', table='user_study_area', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(customer_user_study_area_postgres_trigger)

    customer_role_postgres_delete = PGGrantTable(schema='customer', table='role', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(customer_role_postgres_delete)

    customer_role_postgres_truncate = PGGrantTable(schema='customer', table='role', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(customer_role_postgres_truncate)

    customer_role_postgres_trigger = PGGrantTable(schema='customer', table='role', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(customer_role_postgres_trigger)

    customer_user_postgres_delete = PGGrantTable(schema='customer', table='user', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(customer_user_postgres_delete)

    customer_user_postgres_truncate = PGGrantTable(schema='customer', table='user', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(customer_user_postgres_truncate)

    customer_user_postgres_trigger = PGGrantTable(schema='customer', table='user', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(customer_user_postgres_trigger)

    temporal_artificial_full_edges_postgres_insert = PGGrantTable(schema='temporal', table='artificial_full_edges', columns=['edge_id', 'geom', 'index'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(temporal_artificial_full_edges_postgres_insert)

    temporal_artificial_full_edges_postgres_references = PGGrantTable(schema='temporal', table='artificial_full_edges', columns=['edge_id', 'geom', 'index'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(temporal_artificial_full_edges_postgres_references)

    temporal_artificial_full_edges_postgres_select = PGGrantTable(schema='temporal', table='artificial_full_edges', columns=['edge_id', 'geom', 'index'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(temporal_artificial_full_edges_postgres_select)

    temporal_artificial_full_edges_postgres_update = PGGrantTable(schema='temporal', table='artificial_full_edges', columns=['edge_id', 'geom', 'index'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(temporal_artificial_full_edges_postgres_update)

    temporal_full_edges_postgres_insert = PGGrantTable(schema='temporal', table='full_edges', columns=['edge_id', 'index'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(temporal_full_edges_postgres_insert)

    temporal_full_edges_postgres_references = PGGrantTable(schema='temporal', table='full_edges', columns=['edge_id', 'index'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(temporal_full_edges_postgres_references)

    temporal_full_edges_postgres_select = PGGrantTable(schema='temporal', table='full_edges', columns=['edge_id', 'index'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(temporal_full_edges_postgres_select)

    temporal_full_edges_postgres_update = PGGrantTable(schema='temporal', table='full_edges', columns=['edge_id', 'index'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(temporal_full_edges_postgres_update)

    temporal_heatmap_edges_artificial_postgres_insert = PGGrantTable(schema='temporal', table='heatmap_edges_artificial', columns=['cost', 'geom', 'id', 'length_m', 'point_geom', 'reverse_cost', 'source', 'target', 'wid'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(temporal_heatmap_edges_artificial_postgres_insert)

    temporal_heatmap_edges_artificial_postgres_references = PGGrantTable(schema='temporal', table='heatmap_edges_artificial', columns=['cost', 'geom', 'id', 'length_m', 'point_geom', 'reverse_cost', 'source', 'target', 'wid'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(temporal_heatmap_edges_artificial_postgres_references)

    temporal_heatmap_edges_artificial_postgres_select = PGGrantTable(schema='temporal', table='heatmap_edges_artificial', columns=['cost', 'geom', 'id', 'length_m', 'point_geom', 'reverse_cost', 'source', 'target', 'wid'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(temporal_heatmap_edges_artificial_postgres_select)

    temporal_heatmap_edges_artificial_postgres_update = PGGrantTable(schema='temporal', table='heatmap_edges_artificial', columns=['cost', 'geom', 'id', 'length_m', 'point_geom', 'reverse_cost', 'source', 'target', 'wid'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(temporal_heatmap_edges_artificial_postgres_update)

    temporal_heatmap_grid_helper_postgres_insert = PGGrantTable(schema='temporal', table='heatmap_grid_helper', columns=['already_processed', 'cid', 'geom', 'id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(temporal_heatmap_grid_helper_postgres_insert)

    temporal_heatmap_grid_helper_postgres_references = PGGrantTable(schema='temporal', table='heatmap_grid_helper', columns=['already_processed', 'cid', 'geom', 'id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(temporal_heatmap_grid_helper_postgres_references)

    temporal_heatmap_grid_helper_postgres_select = PGGrantTable(schema='temporal', table='heatmap_grid_helper', columns=['already_processed', 'cid', 'geom', 'id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(temporal_heatmap_grid_helper_postgres_select)

    temporal_heatmap_grid_helper_postgres_update = PGGrantTable(schema='temporal', table='heatmap_grid_helper', columns=['already_processed', 'cid', 'geom', 'id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(temporal_heatmap_grid_helper_postgres_update)

    temporal_heatmap_starting_vertices_postgres_insert = PGGrantTable(schema='temporal', table='heatmap_starting_vertices', columns=['geom', 'id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(temporal_heatmap_starting_vertices_postgres_insert)

    temporal_heatmap_starting_vertices_postgres_references = PGGrantTable(schema='temporal', table='heatmap_starting_vertices', columns=['geom', 'id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(temporal_heatmap_starting_vertices_postgres_references)

    temporal_heatmap_starting_vertices_postgres_select = PGGrantTable(schema='temporal', table='heatmap_starting_vertices', columns=['geom', 'id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(temporal_heatmap_starting_vertices_postgres_select)

    temporal_heatmap_starting_vertices_postgres_update = PGGrantTable(schema='temporal', table='heatmap_starting_vertices', columns=['geom', 'id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(temporal_heatmap_starting_vertices_postgres_update)

    temporal_size_isochrone_heatmap_postgres_insert = PGGrantTable(schema='temporal', table='size_isochrone_heatmap', columns=['area_isochrone', 'id', 'index'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(temporal_size_isochrone_heatmap_postgres_insert)

    temporal_size_isochrone_heatmap_postgres_references = PGGrantTable(schema='temporal', table='size_isochrone_heatmap', columns=['area_isochrone', 'id', 'index'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(temporal_size_isochrone_heatmap_postgres_references)

    temporal_size_isochrone_heatmap_postgres_select = PGGrantTable(schema='temporal', table='size_isochrone_heatmap', columns=['area_isochrone', 'id', 'index'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(temporal_size_isochrone_heatmap_postgres_select)

    temporal_size_isochrone_heatmap_postgres_update = PGGrantTable(schema='temporal', table='size_isochrone_heatmap', columns=['area_isochrone', 'id', 'index'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(temporal_size_isochrone_heatmap_postgres_update)

    temporal_artificial_full_edges_postgres_delete = PGGrantTable(schema='temporal', table='artificial_full_edges', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(temporal_artificial_full_edges_postgres_delete)

    temporal_artificial_full_edges_postgres_truncate = PGGrantTable(schema='temporal', table='artificial_full_edges', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(temporal_artificial_full_edges_postgres_truncate)

    temporal_artificial_full_edges_postgres_trigger = PGGrantTable(schema='temporal', table='artificial_full_edges', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(temporal_artificial_full_edges_postgres_trigger)

    temporal_full_edges_postgres_delete = PGGrantTable(schema='temporal', table='full_edges', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(temporal_full_edges_postgres_delete)

    temporal_full_edges_postgres_truncate = PGGrantTable(schema='temporal', table='full_edges', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(temporal_full_edges_postgres_truncate)

    temporal_full_edges_postgres_trigger = PGGrantTable(schema='temporal', table='full_edges', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(temporal_full_edges_postgres_trigger)

    temporal_heatmap_edges_artificial_postgres_delete = PGGrantTable(schema='temporal', table='heatmap_edges_artificial', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(temporal_heatmap_edges_artificial_postgres_delete)

    temporal_heatmap_edges_artificial_postgres_truncate = PGGrantTable(schema='temporal', table='heatmap_edges_artificial', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(temporal_heatmap_edges_artificial_postgres_truncate)

    temporal_heatmap_edges_artificial_postgres_trigger = PGGrantTable(schema='temporal', table='heatmap_edges_artificial', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(temporal_heatmap_edges_artificial_postgres_trigger)

    temporal_heatmap_grid_helper_postgres_delete = PGGrantTable(schema='temporal', table='heatmap_grid_helper', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(temporal_heatmap_grid_helper_postgres_delete)

    temporal_heatmap_grid_helper_postgres_truncate = PGGrantTable(schema='temporal', table='heatmap_grid_helper', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(temporal_heatmap_grid_helper_postgres_truncate)

    temporal_heatmap_grid_helper_postgres_trigger = PGGrantTable(schema='temporal', table='heatmap_grid_helper', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(temporal_heatmap_grid_helper_postgres_trigger)

    temporal_heatmap_starting_vertices_postgres_delete = PGGrantTable(schema='temporal', table='heatmap_starting_vertices', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(temporal_heatmap_starting_vertices_postgres_delete)

    temporal_heatmap_starting_vertices_postgres_truncate = PGGrantTable(schema='temporal', table='heatmap_starting_vertices', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(temporal_heatmap_starting_vertices_postgres_truncate)

    temporal_heatmap_starting_vertices_postgres_trigger = PGGrantTable(schema='temporal', table='heatmap_starting_vertices', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(temporal_heatmap_starting_vertices_postgres_trigger)

    temporal_size_isochrone_heatmap_postgres_delete = PGGrantTable(schema='temporal', table='size_isochrone_heatmap', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(temporal_size_isochrone_heatmap_postgres_delete)

    temporal_size_isochrone_heatmap_postgres_truncate = PGGrantTable(schema='temporal', table='size_isochrone_heatmap', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(temporal_size_isochrone_heatmap_postgres_truncate)

    temporal_size_isochrone_heatmap_postgres_trigger = PGGrantTable(schema='temporal', table='size_isochrone_heatmap', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(temporal_size_isochrone_heatmap_postgres_trigger)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    temporal_size_isochrone_heatmap_postgres_trigger = PGGrantTable(schema='temporal', table='size_isochrone_heatmap', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(temporal_size_isochrone_heatmap_postgres_trigger)

    temporal_size_isochrone_heatmap_postgres_truncate = PGGrantTable(schema='temporal', table='size_isochrone_heatmap', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(temporal_size_isochrone_heatmap_postgres_truncate)

    temporal_size_isochrone_heatmap_postgres_delete = PGGrantTable(schema='temporal', table='size_isochrone_heatmap', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(temporal_size_isochrone_heatmap_postgres_delete)

    temporal_heatmap_starting_vertices_postgres_trigger = PGGrantTable(schema='temporal', table='heatmap_starting_vertices', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(temporal_heatmap_starting_vertices_postgres_trigger)

    temporal_heatmap_starting_vertices_postgres_truncate = PGGrantTable(schema='temporal', table='heatmap_starting_vertices', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(temporal_heatmap_starting_vertices_postgres_truncate)

    temporal_heatmap_starting_vertices_postgres_delete = PGGrantTable(schema='temporal', table='heatmap_starting_vertices', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(temporal_heatmap_starting_vertices_postgres_delete)

    temporal_heatmap_grid_helper_postgres_trigger = PGGrantTable(schema='temporal', table='heatmap_grid_helper', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(temporal_heatmap_grid_helper_postgres_trigger)

    temporal_heatmap_grid_helper_postgres_truncate = PGGrantTable(schema='temporal', table='heatmap_grid_helper', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(temporal_heatmap_grid_helper_postgres_truncate)

    temporal_heatmap_grid_helper_postgres_delete = PGGrantTable(schema='temporal', table='heatmap_grid_helper', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(temporal_heatmap_grid_helper_postgres_delete)

    temporal_heatmap_edges_artificial_postgres_trigger = PGGrantTable(schema='temporal', table='heatmap_edges_artificial', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(temporal_heatmap_edges_artificial_postgres_trigger)

    temporal_heatmap_edges_artificial_postgres_truncate = PGGrantTable(schema='temporal', table='heatmap_edges_artificial', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(temporal_heatmap_edges_artificial_postgres_truncate)

    temporal_heatmap_edges_artificial_postgres_delete = PGGrantTable(schema='temporal', table='heatmap_edges_artificial', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(temporal_heatmap_edges_artificial_postgres_delete)

    temporal_full_edges_postgres_trigger = PGGrantTable(schema='temporal', table='full_edges', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(temporal_full_edges_postgres_trigger)

    temporal_full_edges_postgres_truncate = PGGrantTable(schema='temporal', table='full_edges', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(temporal_full_edges_postgres_truncate)

    temporal_full_edges_postgres_delete = PGGrantTable(schema='temporal', table='full_edges', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(temporal_full_edges_postgres_delete)

    temporal_artificial_full_edges_postgres_trigger = PGGrantTable(schema='temporal', table='artificial_full_edges', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(temporal_artificial_full_edges_postgres_trigger)

    temporal_artificial_full_edges_postgres_truncate = PGGrantTable(schema='temporal', table='artificial_full_edges', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(temporal_artificial_full_edges_postgres_truncate)

    temporal_artificial_full_edges_postgres_delete = PGGrantTable(schema='temporal', table='artificial_full_edges', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(temporal_artificial_full_edges_postgres_delete)

    temporal_size_isochrone_heatmap_postgres_update = PGGrantTable(schema='temporal', table='size_isochrone_heatmap', columns=['area_isochrone', 'id', 'index'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(temporal_size_isochrone_heatmap_postgres_update)

    temporal_size_isochrone_heatmap_postgres_select = PGGrantTable(schema='temporal', table='size_isochrone_heatmap', columns=['area_isochrone', 'id', 'index'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(temporal_size_isochrone_heatmap_postgres_select)

    temporal_size_isochrone_heatmap_postgres_references = PGGrantTable(schema='temporal', table='size_isochrone_heatmap', columns=['area_isochrone', 'id', 'index'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(temporal_size_isochrone_heatmap_postgres_references)

    temporal_size_isochrone_heatmap_postgres_insert = PGGrantTable(schema='temporal', table='size_isochrone_heatmap', columns=['area_isochrone', 'id', 'index'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(temporal_size_isochrone_heatmap_postgres_insert)

    temporal_heatmap_starting_vertices_postgres_update = PGGrantTable(schema='temporal', table='heatmap_starting_vertices', columns=['geom', 'id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(temporal_heatmap_starting_vertices_postgres_update)

    temporal_heatmap_starting_vertices_postgres_select = PGGrantTable(schema='temporal', table='heatmap_starting_vertices', columns=['geom', 'id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(temporal_heatmap_starting_vertices_postgres_select)

    temporal_heatmap_starting_vertices_postgres_references = PGGrantTable(schema='temporal', table='heatmap_starting_vertices', columns=['geom', 'id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(temporal_heatmap_starting_vertices_postgres_references)

    temporal_heatmap_starting_vertices_postgres_insert = PGGrantTable(schema='temporal', table='heatmap_starting_vertices', columns=['geom', 'id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(temporal_heatmap_starting_vertices_postgres_insert)

    temporal_heatmap_grid_helper_postgres_update = PGGrantTable(schema='temporal', table='heatmap_grid_helper', columns=['already_processed', 'cid', 'geom', 'id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(temporal_heatmap_grid_helper_postgres_update)

    temporal_heatmap_grid_helper_postgres_select = PGGrantTable(schema='temporal', table='heatmap_grid_helper', columns=['already_processed', 'cid', 'geom', 'id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(temporal_heatmap_grid_helper_postgres_select)

    temporal_heatmap_grid_helper_postgres_references = PGGrantTable(schema='temporal', table='heatmap_grid_helper', columns=['already_processed', 'cid', 'geom', 'id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(temporal_heatmap_grid_helper_postgres_references)

    temporal_heatmap_grid_helper_postgres_insert = PGGrantTable(schema='temporal', table='heatmap_grid_helper', columns=['already_processed', 'cid', 'geom', 'id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(temporal_heatmap_grid_helper_postgres_insert)

    temporal_heatmap_edges_artificial_postgres_update = PGGrantTable(schema='temporal', table='heatmap_edges_artificial', columns=['cost', 'geom', 'id', 'length_m', 'point_geom', 'reverse_cost', 'source', 'target', 'wid'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(temporal_heatmap_edges_artificial_postgres_update)

    temporal_heatmap_edges_artificial_postgres_select = PGGrantTable(schema='temporal', table='heatmap_edges_artificial', columns=['cost', 'geom', 'id', 'length_m', 'point_geom', 'reverse_cost', 'source', 'target', 'wid'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(temporal_heatmap_edges_artificial_postgres_select)

    temporal_heatmap_edges_artificial_postgres_references = PGGrantTable(schema='temporal', table='heatmap_edges_artificial', columns=['cost', 'geom', 'id', 'length_m', 'point_geom', 'reverse_cost', 'source', 'target', 'wid'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(temporal_heatmap_edges_artificial_postgres_references)

    temporal_heatmap_edges_artificial_postgres_insert = PGGrantTable(schema='temporal', table='heatmap_edges_artificial', columns=['cost', 'geom', 'id', 'length_m', 'point_geom', 'reverse_cost', 'source', 'target', 'wid'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(temporal_heatmap_edges_artificial_postgres_insert)

    temporal_full_edges_postgres_update = PGGrantTable(schema='temporal', table='full_edges', columns=['edge_id', 'index'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(temporal_full_edges_postgres_update)

    temporal_full_edges_postgres_select = PGGrantTable(schema='temporal', table='full_edges', columns=['edge_id', 'index'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(temporal_full_edges_postgres_select)

    temporal_full_edges_postgres_references = PGGrantTable(schema='temporal', table='full_edges', columns=['edge_id', 'index'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(temporal_full_edges_postgres_references)

    temporal_full_edges_postgres_insert = PGGrantTable(schema='temporal', table='full_edges', columns=['edge_id', 'index'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(temporal_full_edges_postgres_insert)

    temporal_artificial_full_edges_postgres_update = PGGrantTable(schema='temporal', table='artificial_full_edges', columns=['edge_id', 'geom', 'index'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(temporal_artificial_full_edges_postgres_update)

    temporal_artificial_full_edges_postgres_select = PGGrantTable(schema='temporal', table='artificial_full_edges', columns=['edge_id', 'geom', 'index'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(temporal_artificial_full_edges_postgres_select)

    temporal_artificial_full_edges_postgres_references = PGGrantTable(schema='temporal', table='artificial_full_edges', columns=['edge_id', 'geom', 'index'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(temporal_artificial_full_edges_postgres_references)

    temporal_artificial_full_edges_postgres_insert = PGGrantTable(schema='temporal', table='artificial_full_edges', columns=['edge_id', 'geom', 'index'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(temporal_artificial_full_edges_postgres_insert)

    customer_user_postgres_trigger = PGGrantTable(schema='customer', table='user', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(customer_user_postgres_trigger)

    customer_user_postgres_truncate = PGGrantTable(schema='customer', table='user', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(customer_user_postgres_truncate)

    customer_user_postgres_delete = PGGrantTable(schema='customer', table='user', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(customer_user_postgres_delete)

    customer_role_postgres_trigger = PGGrantTable(schema='customer', table='role', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(customer_role_postgres_trigger)

    customer_role_postgres_truncate = PGGrantTable(schema='customer', table='role', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(customer_role_postgres_truncate)

    customer_role_postgres_delete = PGGrantTable(schema='customer', table='role', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(customer_role_postgres_delete)

    customer_user_study_area_postgres_trigger = PGGrantTable(schema='customer', table='user_study_area', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(customer_user_study_area_postgres_trigger)

    customer_user_study_area_postgres_truncate = PGGrantTable(schema='customer', table='user_study_area', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(customer_user_study_area_postgres_truncate)

    customer_user_study_area_postgres_delete = PGGrantTable(schema='customer', table='user_study_area', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(customer_user_study_area_postgres_delete)

    customer_user_customization_postgres_trigger = PGGrantTable(schema='customer', table='user_customization', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(customer_user_customization_postgres_trigger)

    customer_user_customization_postgres_truncate = PGGrantTable(schema='customer', table='user_customization', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(customer_user_customization_postgres_truncate)

    customer_user_customization_postgres_delete = PGGrantTable(schema='customer', table='user_customization', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(customer_user_customization_postgres_delete)

    customer_way_modified_postgres_trigger = PGGrantTable(schema='customer', table='way_modified', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(customer_way_modified_postgres_trigger)

    customer_way_modified_postgres_truncate = PGGrantTable(schema='customer', table='way_modified', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(customer_way_modified_postgres_truncate)

    customer_way_modified_postgres_delete = PGGrantTable(schema='customer', table='way_modified', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(customer_way_modified_postgres_delete)

    customer_user_role_postgres_trigger = PGGrantTable(schema='customer', table='user_role', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(customer_user_role_postgres_trigger)

    customer_user_role_postgres_truncate = PGGrantTable(schema='customer', table='user_role', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(customer_user_role_postgres_truncate)

    customer_user_role_postgres_delete = PGGrantTable(schema='customer', table='user_role', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(customer_user_role_postgres_delete)

    customer_scenario_postgres_trigger = PGGrantTable(schema='customer', table='scenario', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(customer_scenario_postgres_trigger)

    customer_scenario_postgres_truncate = PGGrantTable(schema='customer', table='scenario', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(customer_scenario_postgres_truncate)

    customer_scenario_postgres_delete = PGGrantTable(schema='customer', table='scenario', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(customer_scenario_postgres_delete)

    customer_reached_poi_heatmap_postgres_trigger = PGGrantTable(schema='customer', table='reached_poi_heatmap', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(customer_reached_poi_heatmap_postgres_trigger)

    customer_reached_poi_heatmap_postgres_truncate = PGGrantTable(schema='customer', table='reached_poi_heatmap', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(customer_reached_poi_heatmap_postgres_truncate)

    customer_reached_poi_heatmap_postgres_delete = PGGrantTable(schema='customer', table='reached_poi_heatmap', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(customer_reached_poi_heatmap_postgres_delete)

    customer_reached_edge_heatmap_grid_calculation_postgres_trigger = PGGrantTable(schema='customer', table='reached_edge_heatmap_grid_calculation', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(customer_reached_edge_heatmap_grid_calculation_postgres_trigger)

    customer_reached_edge_heatmap_grid_calculation_postgres_truncate = PGGrantTable(schema='customer', table='reached_edge_heatmap_grid_calculation', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(customer_reached_edge_heatmap_grid_calculation_postgres_truncate)

    customer_reached_edge_heatmap_grid_calculation_postgres_delete = PGGrantTable(schema='customer', table='reached_edge_heatmap_grid_calculation', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(customer_reached_edge_heatmap_grid_calculation_postgres_delete)

    customer_reached_edge_full_heatmap_postgres_trigger = PGGrantTable(schema='customer', table='reached_edge_full_heatmap', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(customer_reached_edge_full_heatmap_postgres_trigger)

    customer_reached_edge_full_heatmap_postgres_truncate = PGGrantTable(schema='customer', table='reached_edge_full_heatmap', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(customer_reached_edge_full_heatmap_postgres_truncate)

    customer_reached_edge_full_heatmap_postgres_delete = PGGrantTable(schema='customer', table='reached_edge_full_heatmap', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(customer_reached_edge_full_heatmap_postgres_delete)

    customer_isochrone_calculation_postgres_trigger = PGGrantTable(schema='customer', table='isochrone_calculation', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(customer_isochrone_calculation_postgres_trigger)

    customer_isochrone_calculation_postgres_truncate = PGGrantTable(schema='customer', table='isochrone_calculation', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(customer_isochrone_calculation_postgres_truncate)

    customer_isochrone_calculation_postgres_delete = PGGrantTable(schema='customer', table='isochrone_calculation', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(customer_isochrone_calculation_postgres_delete)

    customer_data_upload_postgres_trigger = PGGrantTable(schema='customer', table='data_upload', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(customer_data_upload_postgres_trigger)

    customer_data_upload_postgres_truncate = PGGrantTable(schema='customer', table='data_upload', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(customer_data_upload_postgres_truncate)

    customer_data_upload_postgres_delete = PGGrantTable(schema='customer', table='data_upload', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(customer_data_upload_postgres_delete)

    customer_organization_postgres_trigger = PGGrantTable(schema='customer', table='organization', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(customer_organization_postgres_trigger)

    customer_organization_postgres_truncate = PGGrantTable(schema='customer', table='organization', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(customer_organization_postgres_truncate)

    customer_organization_postgres_delete = PGGrantTable(schema='customer', table='organization', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(customer_organization_postgres_delete)

    customer_population_modified_postgres_trigger = PGGrantTable(schema='customer', table='population_modified', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(customer_population_modified_postgres_trigger)

    customer_population_modified_postgres_truncate = PGGrantTable(schema='customer', table='population_modified', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(customer_population_modified_postgres_truncate)

    customer_population_modified_postgres_delete = PGGrantTable(schema='customer', table='population_modified', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(customer_population_modified_postgres_delete)

    customer_poi_user_postgres_trigger = PGGrantTable(schema='customer', table='poi_user', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(customer_poi_user_postgres_trigger)

    customer_poi_user_postgres_truncate = PGGrantTable(schema='customer', table='poi_user', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(customer_poi_user_postgres_truncate)

    customer_poi_user_postgres_delete = PGGrantTable(schema='customer', table='poi_user', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(customer_poi_user_postgres_delete)

    customer_poi_modified_postgres_trigger = PGGrantTable(schema='customer', table='poi_modified', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(customer_poi_modified_postgres_trigger)

    customer_poi_modified_postgres_truncate = PGGrantTable(schema='customer', table='poi_modified', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(customer_poi_modified_postgres_truncate)

    customer_poi_modified_postgres_delete = PGGrantTable(schema='customer', table='poi_modified', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(customer_poi_modified_postgres_delete)

    customer_isochrone_feature_postgres_trigger = PGGrantTable(schema='customer', table='isochrone_feature', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(customer_isochrone_feature_postgres_trigger)

    customer_isochrone_feature_postgres_truncate = PGGrantTable(schema='customer', table='isochrone_feature', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(customer_isochrone_feature_postgres_truncate)

    customer_isochrone_feature_postgres_delete = PGGrantTable(schema='customer', table='isochrone_feature', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(customer_isochrone_feature_postgres_delete)

    customer_isochrone_edge_postgres_trigger = PGGrantTable(schema='customer', table='isochrone_edge', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(customer_isochrone_edge_postgres_trigger)

    customer_isochrone_edge_postgres_truncate = PGGrantTable(schema='customer', table='isochrone_edge', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(customer_isochrone_edge_postgres_truncate)

    customer_isochrone_edge_postgres_delete = PGGrantTable(schema='customer', table='isochrone_edge', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(customer_isochrone_edge_postgres_delete)

    customer_customization_postgres_trigger = PGGrantTable(schema='customer', table='customization', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(customer_customization_postgres_trigger)

    customer_customization_postgres_truncate = PGGrantTable(schema='customer', table='customization', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(customer_customization_postgres_truncate)

    customer_customization_postgres_delete = PGGrantTable(schema='customer', table='customization', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(customer_customization_postgres_delete)

    customer_aoi_modified_postgres_trigger = PGGrantTable(schema='customer', table='aoi_modified', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(customer_aoi_modified_postgres_trigger)

    customer_aoi_modified_postgres_truncate = PGGrantTable(schema='customer', table='aoi_modified', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(customer_aoi_modified_postgres_truncate)

    customer_aoi_modified_postgres_delete = PGGrantTable(schema='customer', table='aoi_modified', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(customer_aoi_modified_postgres_delete)

    customer_building_modified_postgres_trigger = PGGrantTable(schema='customer', table='building_modified', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(customer_building_modified_postgres_trigger)

    customer_building_modified_postgres_truncate = PGGrantTable(schema='customer', table='building_modified', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(customer_building_modified_postgres_truncate)

    customer_building_modified_postgres_delete = PGGrantTable(schema='customer', table='building_modified', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(customer_building_modified_postgres_delete)

    customer_aoi_user_postgres_trigger = PGGrantTable(schema='customer', table='aoi_user', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(customer_aoi_user_postgres_trigger)

    customer_aoi_user_postgres_truncate = PGGrantTable(schema='customer', table='aoi_user', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(customer_aoi_user_postgres_truncate)

    customer_aoi_user_postgres_delete = PGGrantTable(schema='customer', table='aoi_user', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(customer_aoi_user_postgres_delete)

    customer_way_modified_postgres_update = PGGrantTable(schema='customer', table='way_modified', columns=['bicycle', 'bicycle_road', 'class_id', 'creation_date', 'crossing', 'crossing_delay_category', 'cycleway', 'death_end', 'edit_type', 'foot', 'geom', 'highway', 'id', 'impedance_surface', 'incline', 'incline_percent', 'lanes', 'lit', 'lit_classified', 'maxspeed_backward', 'maxspeed_forward', 'name', 'one_link_crossing', 'one_way', 'oneway', 'osm_id', 'parking', 'parking_lane_both', 'parking_lane_left', 'parking_lane_right', 'rs_imp', 's_imp', 'scenario_id', 'segregated', 'sidewalk', 'sidewalk_both_width', 'sidewalk_left_width', 'sidewalk_right_width', 'smoothness', 'surface', 'way_id', 'way_type', 'wheelchair', 'wheelchair_classified', 'width'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(customer_way_modified_postgres_update)

    customer_way_modified_postgres_select = PGGrantTable(schema='customer', table='way_modified', columns=['bicycle', 'bicycle_road', 'class_id', 'creation_date', 'crossing', 'crossing_delay_category', 'cycleway', 'death_end', 'edit_type', 'foot', 'geom', 'highway', 'id', 'impedance_surface', 'incline', 'incline_percent', 'lanes', 'lit', 'lit_classified', 'maxspeed_backward', 'maxspeed_forward', 'name', 'one_link_crossing', 'one_way', 'oneway', 'osm_id', 'parking', 'parking_lane_both', 'parking_lane_left', 'parking_lane_right', 'rs_imp', 's_imp', 'scenario_id', 'segregated', 'sidewalk', 'sidewalk_both_width', 'sidewalk_left_width', 'sidewalk_right_width', 'smoothness', 'surface', 'way_id', 'way_type', 'wheelchair', 'wheelchair_classified', 'width'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(customer_way_modified_postgres_select)

    customer_way_modified_postgres_references = PGGrantTable(schema='customer', table='way_modified', columns=['bicycle', 'bicycle_road', 'class_id', 'creation_date', 'crossing', 'crossing_delay_category', 'cycleway', 'death_end', 'edit_type', 'foot', 'geom', 'highway', 'id', 'impedance_surface', 'incline', 'incline_percent', 'lanes', 'lit', 'lit_classified', 'maxspeed_backward', 'maxspeed_forward', 'name', 'one_link_crossing', 'one_way', 'oneway', 'osm_id', 'parking', 'parking_lane_both', 'parking_lane_left', 'parking_lane_right', 'rs_imp', 's_imp', 'scenario_id', 'segregated', 'sidewalk', 'sidewalk_both_width', 'sidewalk_left_width', 'sidewalk_right_width', 'smoothness', 'surface', 'way_id', 'way_type', 'wheelchair', 'wheelchair_classified', 'width'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(customer_way_modified_postgres_references)

    customer_way_modified_postgres_insert = PGGrantTable(schema='customer', table='way_modified', columns=['bicycle', 'bicycle_road', 'class_id', 'creation_date', 'crossing', 'crossing_delay_category', 'cycleway', 'death_end', 'edit_type', 'foot', 'geom', 'highway', 'id', 'impedance_surface', 'incline', 'incline_percent', 'lanes', 'lit', 'lit_classified', 'maxspeed_backward', 'maxspeed_forward', 'name', 'one_link_crossing', 'one_way', 'oneway', 'osm_id', 'parking', 'parking_lane_both', 'parking_lane_left', 'parking_lane_right', 'rs_imp', 's_imp', 'scenario_id', 'segregated', 'sidewalk', 'sidewalk_both_width', 'sidewalk_left_width', 'sidewalk_right_width', 'smoothness', 'surface', 'way_id', 'way_type', 'wheelchair', 'wheelchair_classified', 'width'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(customer_way_modified_postgres_insert)

    customer_user_study_area_postgres_update = PGGrantTable(schema='customer', table='user_study_area', columns=['creation_date', 'id', 'study_area_id', 'user_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(customer_user_study_area_postgres_update)

    customer_user_study_area_postgres_select = PGGrantTable(schema='customer', table='user_study_area', columns=['creation_date', 'id', 'study_area_id', 'user_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(customer_user_study_area_postgres_select)

    customer_user_study_area_postgres_references = PGGrantTable(schema='customer', table='user_study_area', columns=['creation_date', 'id', 'study_area_id', 'user_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(customer_user_study_area_postgres_references)

    customer_user_study_area_postgres_insert = PGGrantTable(schema='customer', table='user_study_area', columns=['creation_date', 'id', 'study_area_id', 'user_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(customer_user_study_area_postgres_insert)

    customer_user_role_postgres_update = PGGrantTable(schema='customer', table='user_role', columns=['id', 'role_id', 'user_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(customer_user_role_postgres_update)

    customer_user_role_postgres_select = PGGrantTable(schema='customer', table='user_role', columns=['id', 'role_id', 'user_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(customer_user_role_postgres_select)

    customer_user_role_postgres_references = PGGrantTable(schema='customer', table='user_role', columns=['id', 'role_id', 'user_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(customer_user_role_postgres_references)

    customer_user_role_postgres_insert = PGGrantTable(schema='customer', table='user_role', columns=['id', 'role_id', 'user_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(customer_user_role_postgres_insert)

    customer_user_customization_postgres_update = PGGrantTable(schema='customer', table='user_customization', columns=['creation_date', 'customization_id', 'id', 'setting', 'study_area_id', 'user_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(customer_user_customization_postgres_update)

    customer_user_customization_postgres_select = PGGrantTable(schema='customer', table='user_customization', columns=['creation_date', 'customization_id', 'id', 'setting', 'study_area_id', 'user_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(customer_user_customization_postgres_select)

    customer_user_customization_postgres_references = PGGrantTable(schema='customer', table='user_customization', columns=['creation_date', 'customization_id', 'id', 'setting', 'study_area_id', 'user_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(customer_user_customization_postgres_references)

    customer_user_customization_postgres_insert = PGGrantTable(schema='customer', table='user_customization', columns=['creation_date', 'customization_id', 'id', 'setting', 'study_area_id', 'user_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(customer_user_customization_postgres_insert)

    customer_user_postgres_update = PGGrantTable(schema='customer', table='user', columns=['active_data_upload_ids', 'active_study_area_id', 'creation_date', 'email', 'hashed_password', 'id', 'is_active', 'limit_scenarios', 'name', 'organization_id', 'storage', 'surname'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(customer_user_postgres_update)

    customer_user_postgres_select = PGGrantTable(schema='customer', table='user', columns=['active_data_upload_ids', 'active_study_area_id', 'creation_date', 'email', 'hashed_password', 'id', 'is_active', 'limit_scenarios', 'name', 'organization_id', 'storage', 'surname'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(customer_user_postgres_select)

    customer_user_postgres_references = PGGrantTable(schema='customer', table='user', columns=['active_data_upload_ids', 'active_study_area_id', 'creation_date', 'email', 'hashed_password', 'id', 'is_active', 'limit_scenarios', 'name', 'organization_id', 'storage', 'surname'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(customer_user_postgres_references)

    customer_user_postgres_insert = PGGrantTable(schema='customer', table='user', columns=['active_data_upload_ids', 'active_study_area_id', 'creation_date', 'email', 'hashed_password', 'id', 'is_active', 'limit_scenarios', 'name', 'organization_id', 'storage', 'surname'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(customer_user_postgres_insert)

    customer_scenario_postgres_update = PGGrantTable(schema='customer', table='scenario', columns=['creation_date', 'data_upload_ids', 'deleted_buildings', 'deleted_pois', 'deleted_ways', 'id', 'routing_heatmap_computed', 'scenario_name', 'user_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(customer_scenario_postgres_update)

    customer_scenario_postgres_select = PGGrantTable(schema='customer', table='scenario', columns=['creation_date', 'data_upload_ids', 'deleted_buildings', 'deleted_pois', 'deleted_ways', 'id', 'routing_heatmap_computed', 'scenario_name', 'user_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(customer_scenario_postgres_select)

    customer_scenario_postgres_references = PGGrantTable(schema='customer', table='scenario', columns=['creation_date', 'data_upload_ids', 'deleted_buildings', 'deleted_pois', 'deleted_ways', 'id', 'routing_heatmap_computed', 'scenario_name', 'user_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(customer_scenario_postgres_references)

    customer_scenario_postgres_insert = PGGrantTable(schema='customer', table='scenario', columns=['creation_date', 'data_upload_ids', 'deleted_buildings', 'deleted_pois', 'deleted_ways', 'id', 'routing_heatmap_computed', 'scenario_name', 'user_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(customer_scenario_postgres_insert)

    customer_role_postgres_update = PGGrantTable(schema='customer', table='role', columns=['id', 'name'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(customer_role_postgres_update)

    customer_role_postgres_select = PGGrantTable(schema='customer', table='role', columns=['id', 'name'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(customer_role_postgres_select)

    customer_role_postgres_references = PGGrantTable(schema='customer', table='role', columns=['id', 'name'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(customer_role_postgres_references)

    customer_role_postgres_insert = PGGrantTable(schema='customer', table='role', columns=['id', 'name'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(customer_role_postgres_insert)

    customer_reached_poi_heatmap_postgres_update = PGGrantTable(schema='customer', table='reached_poi_heatmap', columns=['accessibility_indices', 'costs', 'data_upload_id', 'grid_visualization_ids', 'id', 'poi_uid', 'scenario_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(customer_reached_poi_heatmap_postgres_update)

    customer_reached_poi_heatmap_postgres_select = PGGrantTable(schema='customer', table='reached_poi_heatmap', columns=['accessibility_indices', 'costs', 'data_upload_id', 'grid_visualization_ids', 'id', 'poi_uid', 'scenario_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(customer_reached_poi_heatmap_postgres_select)

    customer_reached_poi_heatmap_postgres_references = PGGrantTable(schema='customer', table='reached_poi_heatmap', columns=['accessibility_indices', 'costs', 'data_upload_id', 'grid_visualization_ids', 'id', 'poi_uid', 'scenario_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(customer_reached_poi_heatmap_postgres_references)

    customer_reached_poi_heatmap_postgres_insert = PGGrantTable(schema='customer', table='reached_poi_heatmap', columns=['accessibility_indices', 'costs', 'data_upload_id', 'grid_visualization_ids', 'id', 'poi_uid', 'scenario_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(customer_reached_poi_heatmap_postgres_insert)

    customer_reached_edge_heatmap_grid_calculation_postgres_update = PGGrantTable(schema='customer', table='reached_edge_heatmap_grid_calculation', columns=['edge_type', 'end_cost', 'end_perc', 'grid_calculation_id', 'id', 'reached_edge_heatmap_id', 'start_cost', 'start_perc'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(customer_reached_edge_heatmap_grid_calculation_postgres_update)

    customer_reached_edge_heatmap_grid_calculation_postgres_select = PGGrantTable(schema='customer', table='reached_edge_heatmap_grid_calculation', columns=['edge_type', 'end_cost', 'end_perc', 'grid_calculation_id', 'id', 'reached_edge_heatmap_id', 'start_cost', 'start_perc'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(customer_reached_edge_heatmap_grid_calculation_postgres_select)

    customer_reached_edge_heatmap_grid_calculation_postgres_references = PGGrantTable(schema='customer', table='reached_edge_heatmap_grid_calculation', columns=['edge_type', 'end_cost', 'end_perc', 'grid_calculation_id', 'id', 'reached_edge_heatmap_id', 'start_cost', 'start_perc'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(customer_reached_edge_heatmap_grid_calculation_postgres_references)

    customer_reached_edge_heatmap_grid_calculation_postgres_insert = PGGrantTable(schema='customer', table='reached_edge_heatmap_grid_calculation', columns=['edge_type', 'end_cost', 'end_perc', 'grid_calculation_id', 'id', 'reached_edge_heatmap_id', 'start_cost', 'start_perc'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(customer_reached_edge_heatmap_grid_calculation_postgres_insert)

    customer_reached_edge_full_heatmap_postgres_update = PGGrantTable(schema='customer', table='reached_edge_full_heatmap', columns=['edge_id', 'geom', 'id', 'scenario_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(customer_reached_edge_full_heatmap_postgres_update)

    customer_reached_edge_full_heatmap_postgres_select = PGGrantTable(schema='customer', table='reached_edge_full_heatmap', columns=['edge_id', 'geom', 'id', 'scenario_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(customer_reached_edge_full_heatmap_postgres_select)

    customer_reached_edge_full_heatmap_postgres_references = PGGrantTable(schema='customer', table='reached_edge_full_heatmap', columns=['edge_id', 'geom', 'id', 'scenario_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(customer_reached_edge_full_heatmap_postgres_references)

    customer_reached_edge_full_heatmap_postgres_insert = PGGrantTable(schema='customer', table='reached_edge_full_heatmap', columns=['edge_id', 'geom', 'id', 'scenario_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(customer_reached_edge_full_heatmap_postgres_insert)

    customer_population_modified_postgres_update = PGGrantTable(schema='customer', table='population_modified', columns=['building_modified_id', 'creation_date', 'geom', 'id', 'population', 'scenario_id', 'sub_study_area_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(customer_population_modified_postgres_update)

    customer_population_modified_postgres_select = PGGrantTable(schema='customer', table='population_modified', columns=['building_modified_id', 'creation_date', 'geom', 'id', 'population', 'scenario_id', 'sub_study_area_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(customer_population_modified_postgres_select)

    customer_population_modified_postgres_references = PGGrantTable(schema='customer', table='population_modified', columns=['building_modified_id', 'creation_date', 'geom', 'id', 'population', 'scenario_id', 'sub_study_area_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(customer_population_modified_postgres_references)

    customer_population_modified_postgres_insert = PGGrantTable(schema='customer', table='population_modified', columns=['building_modified_id', 'creation_date', 'geom', 'id', 'population', 'scenario_id', 'sub_study_area_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(customer_population_modified_postgres_insert)

    customer_poi_user_postgres_update = PGGrantTable(schema='customer', table='poi_user', columns=['category', 'creation_date', 'data_upload_id', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(customer_poi_user_postgres_update)

    customer_poi_user_postgres_select = PGGrantTable(schema='customer', table='poi_user', columns=['category', 'creation_date', 'data_upload_id', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(customer_poi_user_postgres_select)

    customer_poi_user_postgres_references = PGGrantTable(schema='customer', table='poi_user', columns=['category', 'creation_date', 'data_upload_id', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(customer_poi_user_postgres_references)

    customer_poi_user_postgres_insert = PGGrantTable(schema='customer', table='poi_user', columns=['category', 'creation_date', 'data_upload_id', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(customer_poi_user_postgres_insert)

    customer_poi_modified_postgres_update = PGGrantTable(schema='customer', table='poi_modified', columns=['category', 'creation_date', 'data_upload_id', 'edit_type', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'scenario_id', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(customer_poi_modified_postgres_update)

    customer_poi_modified_postgres_select = PGGrantTable(schema='customer', table='poi_modified', columns=['category', 'creation_date', 'data_upload_id', 'edit_type', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'scenario_id', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(customer_poi_modified_postgres_select)

    customer_poi_modified_postgres_references = PGGrantTable(schema='customer', table='poi_modified', columns=['category', 'creation_date', 'data_upload_id', 'edit_type', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'scenario_id', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(customer_poi_modified_postgres_references)

    customer_poi_modified_postgres_insert = PGGrantTable(schema='customer', table='poi_modified', columns=['category', 'creation_date', 'data_upload_id', 'edit_type', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'scenario_id', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(customer_poi_modified_postgres_insert)

    customer_organization_postgres_update = PGGrantTable(schema='customer', table='organization', columns=['creation_date', 'id', 'name'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(customer_organization_postgres_update)

    customer_organization_postgres_select = PGGrantTable(schema='customer', table='organization', columns=['creation_date', 'id', 'name'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(customer_organization_postgres_select)

    customer_organization_postgres_references = PGGrantTable(schema='customer', table='organization', columns=['creation_date', 'id', 'name'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(customer_organization_postgres_references)

    customer_organization_postgres_insert = PGGrantTable(schema='customer', table='organization', columns=['creation_date', 'id', 'name'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(customer_organization_postgres_insert)

    customer_isochrone_feature_postgres_update = PGGrantTable(schema='customer', table='isochrone_feature', columns=['geom', 'id', 'isochrone_calculation_id', 'reached_opportunities', 'step'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(customer_isochrone_feature_postgres_update)

    customer_isochrone_feature_postgres_select = PGGrantTable(schema='customer', table='isochrone_feature', columns=['geom', 'id', 'isochrone_calculation_id', 'reached_opportunities', 'step'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(customer_isochrone_feature_postgres_select)

    customer_isochrone_feature_postgres_references = PGGrantTable(schema='customer', table='isochrone_feature', columns=['geom', 'id', 'isochrone_calculation_id', 'reached_opportunities', 'step'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(customer_isochrone_feature_postgres_references)

    customer_isochrone_feature_postgres_insert = PGGrantTable(schema='customer', table='isochrone_feature', columns=['geom', 'id', 'isochrone_calculation_id', 'reached_opportunities', 'step'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(customer_isochrone_feature_postgres_insert)

    customer_isochrone_edge_postgres_update = PGGrantTable(schema='customer', table='isochrone_edge', columns=['cost', 'edge_id', 'end_cost', 'end_perc', 'geom', 'id', 'isochrone_calculation_id', 'partial_edge', 'start_cost', 'start_perc'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(customer_isochrone_edge_postgres_update)

    customer_isochrone_edge_postgres_select = PGGrantTable(schema='customer', table='isochrone_edge', columns=['cost', 'edge_id', 'end_cost', 'end_perc', 'geom', 'id', 'isochrone_calculation_id', 'partial_edge', 'start_cost', 'start_perc'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(customer_isochrone_edge_postgres_select)

    customer_isochrone_edge_postgres_references = PGGrantTable(schema='customer', table='isochrone_edge', columns=['cost', 'edge_id', 'end_cost', 'end_perc', 'geom', 'id', 'isochrone_calculation_id', 'partial_edge', 'start_cost', 'start_perc'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(customer_isochrone_edge_postgres_references)

    customer_isochrone_edge_postgres_insert = PGGrantTable(schema='customer', table='isochrone_edge', columns=['cost', 'edge_id', 'end_cost', 'end_perc', 'geom', 'id', 'isochrone_calculation_id', 'partial_edge', 'start_cost', 'start_perc'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(customer_isochrone_edge_postgres_insert)

    customer_isochrone_calculation_postgres_update = PGGrantTable(schema='customer', table='isochrone_calculation', columns=['calculation_type', 'creation_date', 'id', 'modus', 'parent_id', 'routing_profile', 'scenario_id', 'speed', 'starting_point', 'user_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(customer_isochrone_calculation_postgres_update)

    customer_isochrone_calculation_postgres_select = PGGrantTable(schema='customer', table='isochrone_calculation', columns=['calculation_type', 'creation_date', 'id', 'modus', 'parent_id', 'routing_profile', 'scenario_id', 'speed', 'starting_point', 'user_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(customer_isochrone_calculation_postgres_select)

    customer_isochrone_calculation_postgres_references = PGGrantTable(schema='customer', table='isochrone_calculation', columns=['calculation_type', 'creation_date', 'id', 'modus', 'parent_id', 'routing_profile', 'scenario_id', 'speed', 'starting_point', 'user_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(customer_isochrone_calculation_postgres_references)

    customer_isochrone_calculation_postgres_insert = PGGrantTable(schema='customer', table='isochrone_calculation', columns=['calculation_type', 'creation_date', 'id', 'modus', 'parent_id', 'routing_profile', 'scenario_id', 'speed', 'starting_point', 'user_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(customer_isochrone_calculation_postgres_insert)

    customer_data_upload_postgres_update = PGGrantTable(schema='customer', table='data_upload', columns=['creation_date', 'data_type', 'id', 'reached_poi_heatmap_computed', 'study_area_id', 'upload_grid_ids', 'upload_size', 'upload_type', 'user_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(customer_data_upload_postgres_update)

    customer_data_upload_postgres_select = PGGrantTable(schema='customer', table='data_upload', columns=['creation_date', 'data_type', 'id', 'reached_poi_heatmap_computed', 'study_area_id', 'upload_grid_ids', 'upload_size', 'upload_type', 'user_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(customer_data_upload_postgres_select)

    customer_data_upload_postgres_references = PGGrantTable(schema='customer', table='data_upload', columns=['creation_date', 'data_type', 'id', 'reached_poi_heatmap_computed', 'study_area_id', 'upload_grid_ids', 'upload_size', 'upload_type', 'user_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(customer_data_upload_postgres_references)

    customer_data_upload_postgres_insert = PGGrantTable(schema='customer', table='data_upload', columns=['creation_date', 'data_type', 'id', 'reached_poi_heatmap_computed', 'study_area_id', 'upload_grid_ids', 'upload_size', 'upload_type', 'user_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(customer_data_upload_postgres_insert)

    customer_customization_postgres_update = PGGrantTable(schema='customer', table='customization', columns=['id', 'role_id', 'setting', 'type'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(customer_customization_postgres_update)

    customer_customization_postgres_select = PGGrantTable(schema='customer', table='customization', columns=['id', 'role_id', 'setting', 'type'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(customer_customization_postgres_select)

    customer_customization_postgres_references = PGGrantTable(schema='customer', table='customization', columns=['id', 'role_id', 'setting', 'type'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(customer_customization_postgres_references)

    customer_customization_postgres_insert = PGGrantTable(schema='customer', table='customization', columns=['id', 'role_id', 'setting', 'type'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(customer_customization_postgres_insert)

    customer_building_modified_postgres_update = PGGrantTable(schema='customer', table='building_modified', columns=['amenity', 'area', 'building_id', 'building_levels', 'building_levels_residential', 'building_type', 'creation_date', 'geom', 'gross_floor_area_residential', 'height', 'housenumber', 'id', 'population', 'residential_status', 'roof_levels', 'scenario_id', 'street'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(customer_building_modified_postgres_update)

    customer_building_modified_postgres_select = PGGrantTable(schema='customer', table='building_modified', columns=['amenity', 'area', 'building_id', 'building_levels', 'building_levels_residential', 'building_type', 'creation_date', 'geom', 'gross_floor_area_residential', 'height', 'housenumber', 'id', 'population', 'residential_status', 'roof_levels', 'scenario_id', 'street'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(customer_building_modified_postgres_select)

    customer_building_modified_postgres_references = PGGrantTable(schema='customer', table='building_modified', columns=['amenity', 'area', 'building_id', 'building_levels', 'building_levels_residential', 'building_type', 'creation_date', 'geom', 'gross_floor_area_residential', 'height', 'housenumber', 'id', 'population', 'residential_status', 'roof_levels', 'scenario_id', 'street'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(customer_building_modified_postgres_references)

    customer_building_modified_postgres_insert = PGGrantTable(schema='customer', table='building_modified', columns=['amenity', 'area', 'building_id', 'building_levels', 'building_levels_residential', 'building_type', 'creation_date', 'geom', 'gross_floor_area_residential', 'height', 'housenumber', 'id', 'population', 'residential_status', 'roof_levels', 'scenario_id', 'street'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(customer_building_modified_postgres_insert)

    customer_aoi_user_postgres_update = PGGrantTable(schema='customer', table='aoi_user', columns=['category', 'creation_date', 'data_upload_id', 'geom', 'id', 'name', 'opening_hours', 'tags', 'wheelchair'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(customer_aoi_user_postgres_update)

    customer_aoi_user_postgres_select = PGGrantTable(schema='customer', table='aoi_user', columns=['category', 'creation_date', 'data_upload_id', 'geom', 'id', 'name', 'opening_hours', 'tags', 'wheelchair'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(customer_aoi_user_postgres_select)

    customer_aoi_user_postgres_references = PGGrantTable(schema='customer', table='aoi_user', columns=['category', 'creation_date', 'data_upload_id', 'geom', 'id', 'name', 'opening_hours', 'tags', 'wheelchair'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(customer_aoi_user_postgres_references)

    customer_aoi_user_postgres_insert = PGGrantTable(schema='customer', table='aoi_user', columns=['category', 'creation_date', 'data_upload_id', 'geom', 'id', 'name', 'opening_hours', 'tags', 'wheelchair'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(customer_aoi_user_postgres_insert)

    customer_aoi_modified_postgres_update = PGGrantTable(schema='customer', table='aoi_modified', columns=['category', 'creation_date', 'geom', 'id', 'name', 'opening_hours', 'scenario_id', 'tags', 'wheelchair'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(customer_aoi_modified_postgres_update)

    customer_aoi_modified_postgres_select = PGGrantTable(schema='customer', table='aoi_modified', columns=['category', 'creation_date', 'geom', 'id', 'name', 'opening_hours', 'scenario_id', 'tags', 'wheelchair'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(customer_aoi_modified_postgres_select)

    customer_aoi_modified_postgres_references = PGGrantTable(schema='customer', table='aoi_modified', columns=['category', 'creation_date', 'geom', 'id', 'name', 'opening_hours', 'scenario_id', 'tags', 'wheelchair'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(customer_aoi_modified_postgres_references)

    customer_aoi_modified_postgres_insert = PGGrantTable(schema='customer', table='aoi_modified', columns=['category', 'creation_date', 'geom', 'id', 'name', 'opening_hours', 'scenario_id', 'tags', 'wheelchair'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(customer_aoi_modified_postgres_insert)

    basic_grid_calculation_postgres_trigger = PGGrantTable(schema='basic', table='grid_calculation', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(basic_grid_calculation_postgres_trigger)

    basic_grid_calculation_postgres_truncate = PGGrantTable(schema='basic', table='grid_calculation', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(basic_grid_calculation_postgres_truncate)

    basic_grid_calculation_postgres_delete = PGGrantTable(schema='basic', table='grid_calculation', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(basic_grid_calculation_postgres_delete)

    basic_sub_study_area_postgres_trigger = PGGrantTable(schema='basic', table='sub_study_area', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(basic_sub_study_area_postgres_trigger)

    basic_sub_study_area_postgres_truncate = PGGrantTable(schema='basic', table='sub_study_area', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(basic_sub_study_area_postgres_truncate)

    basic_sub_study_area_postgres_delete = PGGrantTable(schema='basic', table='sub_study_area', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(basic_sub_study_area_postgres_delete)

    basic_study_area_postgres_trigger = PGGrantTable(schema='basic', table='study_area', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(basic_study_area_postgres_trigger)

    basic_study_area_postgres_truncate = PGGrantTable(schema='basic', table='study_area', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(basic_study_area_postgres_truncate)

    basic_study_area_postgres_delete = PGGrantTable(schema='basic', table='study_area', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(basic_study_area_postgres_delete)

    basic_population_postgres_trigger = PGGrantTable(schema='basic', table='population', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(basic_population_postgres_trigger)

    basic_population_postgres_truncate = PGGrantTable(schema='basic', table='population', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(basic_population_postgres_truncate)

    basic_population_postgres_delete = PGGrantTable(schema='basic', table='population', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(basic_population_postgres_delete)

    basic_study_area_grid_visualization_postgres_trigger = PGGrantTable(schema='basic', table='study_area_grid_visualization', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(basic_study_area_grid_visualization_postgres_trigger)

    basic_study_area_grid_visualization_postgres_truncate = PGGrantTable(schema='basic', table='study_area_grid_visualization', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(basic_study_area_grid_visualization_postgres_truncate)

    basic_study_area_grid_visualization_postgres_delete = PGGrantTable(schema='basic', table='study_area_grid_visualization', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(basic_study_area_grid_visualization_postgres_delete)

    basic_poi_postgres_trigger = PGGrantTable(schema='basic', table='poi', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(basic_poi_postgres_trigger)

    basic_poi_postgres_truncate = PGGrantTable(schema='basic', table='poi', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(basic_poi_postgres_truncate)

    basic_poi_postgres_delete = PGGrantTable(schema='basic', table='poi', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(basic_poi_postgres_delete)

    basic_edge_postgres_trigger = PGGrantTable(schema='basic', table='edge', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(basic_edge_postgres_trigger)

    basic_edge_postgres_truncate = PGGrantTable(schema='basic', table='edge', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(basic_edge_postgres_truncate)

    basic_edge_postgres_delete = PGGrantTable(schema='basic', table='edge', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(basic_edge_postgres_delete)

    basic_grid_visualization_postgres_trigger = PGGrantTable(schema='basic', table='grid_visualization', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(basic_grid_visualization_postgres_trigger)

    basic_grid_visualization_postgres_truncate = PGGrantTable(schema='basic', table='grid_visualization', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(basic_grid_visualization_postgres_truncate)

    basic_grid_visualization_postgres_delete = PGGrantTable(schema='basic', table='grid_visualization', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(basic_grid_visualization_postgres_delete)

    basic_building_postgres_trigger = PGGrantTable(schema='basic', table='building', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(basic_building_postgres_trigger)

    basic_building_postgres_truncate = PGGrantTable(schema='basic', table='building', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(basic_building_postgres_truncate)

    basic_building_postgres_delete = PGGrantTable(schema='basic', table='building', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(basic_building_postgres_delete)

    basic_node_postgres_trigger = PGGrantTable(schema='basic', table='node', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(basic_node_postgres_trigger)

    basic_node_postgres_truncate = PGGrantTable(schema='basic', table='node', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(basic_node_postgres_truncate)

    basic_node_postgres_delete = PGGrantTable(schema='basic', table='node', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(basic_node_postgres_delete)

    basic_aoi_postgres_trigger = PGGrantTable(schema='basic', table='aoi', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(basic_aoi_postgres_trigger)

    basic_aoi_postgres_truncate = PGGrantTable(schema='basic', table='aoi', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(basic_aoi_postgres_truncate)

    basic_aoi_postgres_delete = PGGrantTable(schema='basic', table='aoi', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(basic_aoi_postgres_delete)

    basic_sub_study_area_postgres_update = PGGrantTable(schema='basic', table='sub_study_area', columns=['area', 'default_building_levels', 'default_roof_levels', 'geom', 'id', 'name', 'population', 'study_area_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(basic_sub_study_area_postgres_update)

    basic_sub_study_area_postgres_select = PGGrantTable(schema='basic', table='sub_study_area', columns=['area', 'default_building_levels', 'default_roof_levels', 'geom', 'id', 'name', 'population', 'study_area_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(basic_sub_study_area_postgres_select)

    basic_sub_study_area_postgres_references = PGGrantTable(schema='basic', table='sub_study_area', columns=['area', 'default_building_levels', 'default_roof_levels', 'geom', 'id', 'name', 'population', 'study_area_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(basic_sub_study_area_postgres_references)

    basic_sub_study_area_postgres_insert = PGGrantTable(schema='basic', table='sub_study_area', columns=['area', 'default_building_levels', 'default_roof_levels', 'geom', 'id', 'name', 'population', 'study_area_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(basic_sub_study_area_postgres_insert)

    basic_study_area_grid_visualization_postgres_update = PGGrantTable(schema='basic', table='study_area_grid_visualization', columns=['grid_visualization_id', 'id', 'study_area_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(basic_study_area_grid_visualization_postgres_update)

    basic_study_area_grid_visualization_postgres_select = PGGrantTable(schema='basic', table='study_area_grid_visualization', columns=['grid_visualization_id', 'id', 'study_area_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(basic_study_area_grid_visualization_postgres_select)

    basic_study_area_grid_visualization_postgres_references = PGGrantTable(schema='basic', table='study_area_grid_visualization', columns=['grid_visualization_id', 'id', 'study_area_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(basic_study_area_grid_visualization_postgres_references)

    basic_study_area_grid_visualization_postgres_insert = PGGrantTable(schema='basic', table='study_area_grid_visualization', columns=['grid_visualization_id', 'id', 'study_area_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(basic_study_area_grid_visualization_postgres_insert)

    basic_study_area_postgres_update = PGGrantTable(schema='basic', table='study_area', columns=['buffer_geom_heatmap', 'geom', 'id', 'name', 'population', 'setting'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(basic_study_area_postgres_update)

    basic_study_area_postgres_select = PGGrantTable(schema='basic', table='study_area', columns=['buffer_geom_heatmap', 'geom', 'id', 'name', 'population', 'setting'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(basic_study_area_postgres_select)

    basic_study_area_postgres_references = PGGrantTable(schema='basic', table='study_area', columns=['buffer_geom_heatmap', 'geom', 'id', 'name', 'population', 'setting'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(basic_study_area_postgres_references)

    basic_study_area_postgres_insert = PGGrantTable(schema='basic', table='study_area', columns=['buffer_geom_heatmap', 'geom', 'id', 'name', 'population', 'setting'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(basic_study_area_postgres_insert)

    basic_population_postgres_update = PGGrantTable(schema='basic', table='population', columns=['building_id', 'demography', 'geom', 'id', 'population', 'sub_study_area_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(basic_population_postgres_update)

    basic_population_postgres_select = PGGrantTable(schema='basic', table='population', columns=['building_id', 'demography', 'geom', 'id', 'population', 'sub_study_area_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(basic_population_postgres_select)

    basic_population_postgres_references = PGGrantTable(schema='basic', table='population', columns=['building_id', 'demography', 'geom', 'id', 'population', 'sub_study_area_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(basic_population_postgres_references)

    basic_population_postgres_insert = PGGrantTable(schema='basic', table='population', columns=['building_id', 'demography', 'geom', 'id', 'population', 'sub_study_area_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(basic_population_postgres_insert)

    basic_poi_postgres_update = PGGrantTable(schema='basic', table='poi', columns=['category', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(basic_poi_postgres_update)

    basic_poi_postgres_select = PGGrantTable(schema='basic', table='poi', columns=['category', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(basic_poi_postgres_select)

    basic_poi_postgres_references = PGGrantTable(schema='basic', table='poi', columns=['category', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(basic_poi_postgres_references)

    basic_poi_postgres_insert = PGGrantTable(schema='basic', table='poi', columns=['category', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(basic_poi_postgres_insert)

    basic_node_postgres_update = PGGrantTable(schema='basic', table='node', columns=['bicycle', 'class_ids', 'cnt', 'death_end', 'foot', 'geom', 'id', 'lit_classified', 'osm_id', 'scenario_id', 'wheelchair_classified'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(basic_node_postgres_update)

    basic_node_postgres_select = PGGrantTable(schema='basic', table='node', columns=['bicycle', 'class_ids', 'cnt', 'death_end', 'foot', 'geom', 'id', 'lit_classified', 'osm_id', 'scenario_id', 'wheelchair_classified'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(basic_node_postgres_select)

    basic_node_postgres_references = PGGrantTable(schema='basic', table='node', columns=['bicycle', 'class_ids', 'cnt', 'death_end', 'foot', 'geom', 'id', 'lit_classified', 'osm_id', 'scenario_id', 'wheelchair_classified'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(basic_node_postgres_references)

    basic_node_postgres_insert = PGGrantTable(schema='basic', table='node', columns=['bicycle', 'class_ids', 'cnt', 'death_end', 'foot', 'geom', 'id', 'lit_classified', 'osm_id', 'scenario_id', 'wheelchair_classified'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(basic_node_postgres_insert)

    basic_grid_visualization_postgres_update = PGGrantTable(schema='basic', table='grid_visualization', columns=['area_isochrone', 'geom', 'id', 'percentile_area_isochrone', 'percentile_population', 'population'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(basic_grid_visualization_postgres_update)

    basic_grid_visualization_postgres_select = PGGrantTable(schema='basic', table='grid_visualization', columns=['area_isochrone', 'geom', 'id', 'percentile_area_isochrone', 'percentile_population', 'population'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(basic_grid_visualization_postgres_select)

    basic_grid_visualization_postgres_references = PGGrantTable(schema='basic', table='grid_visualization', columns=['area_isochrone', 'geom', 'id', 'percentile_area_isochrone', 'percentile_population', 'population'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(basic_grid_visualization_postgres_references)

    basic_grid_visualization_postgres_insert = PGGrantTable(schema='basic', table='grid_visualization', columns=['area_isochrone', 'geom', 'id', 'percentile_area_isochrone', 'percentile_population', 'population'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(basic_grid_visualization_postgres_insert)

    basic_grid_calculation_postgres_update = PGGrantTable(schema='basic', table='grid_calculation', columns=['geom', 'grid_visualization_id', 'id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(basic_grid_calculation_postgres_update)

    basic_grid_calculation_postgres_select = PGGrantTable(schema='basic', table='grid_calculation', columns=['geom', 'grid_visualization_id', 'id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(basic_grid_calculation_postgres_select)

    basic_grid_calculation_postgres_references = PGGrantTable(schema='basic', table='grid_calculation', columns=['geom', 'grid_visualization_id', 'id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(basic_grid_calculation_postgres_references)

    basic_grid_calculation_postgres_insert = PGGrantTable(schema='basic', table='grid_calculation', columns=['geom', 'grid_visualization_id', 'id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(basic_grid_calculation_postgres_insert)

    basic_edge_postgres_update = PGGrantTable(schema='basic', table='edge', columns=['bicycle', 'bicycle_road', 'class_id', 'coordinates_3857', 'crossing', 'crossing_delay_category', 'cycleway', 'death_end', 'edge_id', 'foot', 'geom', 'highway', 'id', 'impedance_surface', 'incline', 'incline_percent', 'lanes', 'length_3857', 'length_m', 'lit', 'lit_classified', 'maxspeed_backward', 'maxspeed_forward', 'name', 'one_link_crossing', 'one_way', 'oneway', 'osm_id', 'parking', 'parking_lane_both', 'parking_lane_left', 'parking_lane_right', 'rs_imp', 's_imp', 'scenario_id', 'segregated', 'sidewalk', 'sidewalk_both_width', 'sidewalk_left_width', 'sidewalk_right_width', 'smoothness', 'source', 'surface', 'target', 'wheelchair', 'wheelchair_classified', 'width'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(basic_edge_postgres_update)

    basic_edge_postgres_select = PGGrantTable(schema='basic', table='edge', columns=['bicycle', 'bicycle_road', 'class_id', 'coordinates_3857', 'crossing', 'crossing_delay_category', 'cycleway', 'death_end', 'edge_id', 'foot', 'geom', 'highway', 'id', 'impedance_surface', 'incline', 'incline_percent', 'lanes', 'length_3857', 'length_m', 'lit', 'lit_classified', 'maxspeed_backward', 'maxspeed_forward', 'name', 'one_link_crossing', 'one_way', 'oneway', 'osm_id', 'parking', 'parking_lane_both', 'parking_lane_left', 'parking_lane_right', 'rs_imp', 's_imp', 'scenario_id', 'segregated', 'sidewalk', 'sidewalk_both_width', 'sidewalk_left_width', 'sidewalk_right_width', 'smoothness', 'source', 'surface', 'target', 'wheelchair', 'wheelchair_classified', 'width'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(basic_edge_postgres_select)

    basic_edge_postgres_references = PGGrantTable(schema='basic', table='edge', columns=['bicycle', 'bicycle_road', 'class_id', 'coordinates_3857', 'crossing', 'crossing_delay_category', 'cycleway', 'death_end', 'edge_id', 'foot', 'geom', 'highway', 'id', 'impedance_surface', 'incline', 'incline_percent', 'lanes', 'length_3857', 'length_m', 'lit', 'lit_classified', 'maxspeed_backward', 'maxspeed_forward', 'name', 'one_link_crossing', 'one_way', 'oneway', 'osm_id', 'parking', 'parking_lane_both', 'parking_lane_left', 'parking_lane_right', 'rs_imp', 's_imp', 'scenario_id', 'segregated', 'sidewalk', 'sidewalk_both_width', 'sidewalk_left_width', 'sidewalk_right_width', 'smoothness', 'source', 'surface', 'target', 'wheelchair', 'wheelchair_classified', 'width'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(basic_edge_postgres_references)

    basic_edge_postgres_insert = PGGrantTable(schema='basic', table='edge', columns=['bicycle', 'bicycle_road', 'class_id', 'coordinates_3857', 'crossing', 'crossing_delay_category', 'cycleway', 'death_end', 'edge_id', 'foot', 'geom', 'highway', 'id', 'impedance_surface', 'incline', 'incline_percent', 'lanes', 'length_3857', 'length_m', 'lit', 'lit_classified', 'maxspeed_backward', 'maxspeed_forward', 'name', 'one_link_crossing', 'one_way', 'oneway', 'osm_id', 'parking', 'parking_lane_both', 'parking_lane_left', 'parking_lane_right', 'rs_imp', 's_imp', 'scenario_id', 'segregated', 'sidewalk', 'sidewalk_both_width', 'sidewalk_left_width', 'sidewalk_right_width', 'smoothness', 'source', 'surface', 'target', 'wheelchair', 'wheelchair_classified', 'width'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(basic_edge_postgres_insert)

    basic_building_postgres_update = PGGrantTable(schema='basic', table='building', columns=['amenity', 'area', 'building_levels', 'building_levels_residential', 'building_type', 'geom', 'gross_floor_area_residential', 'height', 'housenumber', 'id', 'osm_id', 'residential_status', 'roof_levels', 'street'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(basic_building_postgres_update)

    basic_building_postgres_select = PGGrantTable(schema='basic', table='building', columns=['amenity', 'area', 'building_levels', 'building_levels_residential', 'building_type', 'geom', 'gross_floor_area_residential', 'height', 'housenumber', 'id', 'osm_id', 'residential_status', 'roof_levels', 'street'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(basic_building_postgres_select)

    basic_building_postgres_references = PGGrantTable(schema='basic', table='building', columns=['amenity', 'area', 'building_levels', 'building_levels_residential', 'building_type', 'geom', 'gross_floor_area_residential', 'height', 'housenumber', 'id', 'osm_id', 'residential_status', 'roof_levels', 'street'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(basic_building_postgres_references)

    basic_building_postgres_insert = PGGrantTable(schema='basic', table='building', columns=['amenity', 'area', 'building_levels', 'building_levels_residential', 'building_type', 'geom', 'gross_floor_area_residential', 'height', 'housenumber', 'id', 'osm_id', 'residential_status', 'roof_levels', 'street'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(basic_building_postgres_insert)

    basic_aoi_postgres_update = PGGrantTable(schema='basic', table='aoi', columns=['category', 'geom', 'id', 'name', 'opening_hours', 'tags', 'wheelchair'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(basic_aoi_postgres_update)

    basic_aoi_postgres_select = PGGrantTable(schema='basic', table='aoi', columns=['category', 'geom', 'id', 'name', 'opening_hours', 'tags', 'wheelchair'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(basic_aoi_postgres_select)

    basic_aoi_postgres_references = PGGrantTable(schema='basic', table='aoi', columns=['category', 'geom', 'id', 'name', 'opening_hours', 'tags', 'wheelchair'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(basic_aoi_postgres_references)

    basic_aoi_postgres_insert = PGGrantTable(schema='basic', table='aoi', columns=['category', 'geom', 'id', 'name', 'opening_hours', 'tags', 'wheelchair'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(basic_aoi_postgres_insert)

    public_test_grids_postgres_trigger = PGGrantTable(schema='public', table='test_grids', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(public_test_grids_postgres_trigger)

    public_test_grids_postgres_truncate = PGGrantTable(schema='public', table='test_grids', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(public_test_grids_postgres_truncate)

    public_test_grids_postgres_delete = PGGrantTable(schema='public', table='test_grids', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(public_test_grids_postgres_delete)

    public_test_postgres_trigger = PGGrantTable(schema='public', table='test', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(public_test_postgres_trigger)

    public_test_postgres_truncate = PGGrantTable(schema='public', table='test', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(public_test_postgres_truncate)

    public_test_postgres_delete = PGGrantTable(schema='public', table='test', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(public_test_postgres_delete)

    public_scenario_pop_postgres_trigger = PGGrantTable(schema='public', table='scenario_pop', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(public_scenario_pop_postgres_trigger)

    public_scenario_pop_postgres_truncate = PGGrantTable(schema='public', table='scenario_pop', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(public_scenario_pop_postgres_truncate)

    public_scenario_pop_postgres_delete = PGGrantTable(schema='public', table='scenario_pop', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(public_scenario_pop_postgres_delete)

    public_default_pop_postgres_trigger = PGGrantTable(schema='public', table='default_pop', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(public_default_pop_postgres_trigger)

    public_default_pop_postgres_truncate = PGGrantTable(schema='public', table='default_pop', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(public_default_pop_postgres_truncate)

    public_default_pop_postgres_delete = PGGrantTable(schema='public', table='default_pop', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(public_default_pop_postgres_delete)

    public_comparison_pop_postgres_trigger = PGGrantTable(schema='public', table='comparison_pop', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(public_comparison_pop_postgres_trigger)

    public_comparison_pop_postgres_truncate = PGGrantTable(schema='public', table='comparison_pop', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(public_comparison_pop_postgres_truncate)

    public_comparison_pop_postgres_delete = PGGrantTable(schema='public', table='comparison_pop', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(public_comparison_pop_postgres_delete)

    public_alembic_version_postgres_trigger = PGGrantTable(schema='public', table='alembic_version', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(public_alembic_version_postgres_trigger)

    public_alembic_version_postgres_truncate = PGGrantTable(schema='public', table='alembic_version', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(public_alembic_version_postgres_truncate)

    public_alembic_version_postgres_delete = PGGrantTable(schema='public', table='alembic_version', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(public_alembic_version_postgres_delete)

    public_test_grids_postgres_update = PGGrantTable(schema='public', table='test_grids', columns=['geom'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(public_test_grids_postgres_update)

    public_test_grids_postgres_select = PGGrantTable(schema='public', table='test_grids', columns=['geom'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(public_test_grids_postgres_select)

    public_test_grids_postgres_references = PGGrantTable(schema='public', table='test_grids', columns=['geom'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(public_test_grids_postgres_references)

    public_test_grids_postgres_insert = PGGrantTable(schema='public', table='test_grids', columns=['geom'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(public_test_grids_postgres_insert)

    public_test_postgres_update = PGGrantTable(schema='public', table='test', columns=['area_isochrone', 'geom', 'grid_visualization_id', 'modus', 'percentile_area_isochrone'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(public_test_postgres_update)

    public_test_postgres_select = PGGrantTable(schema='public', table='test', columns=['area_isochrone', 'geom', 'grid_visualization_id', 'modus', 'percentile_area_isochrone'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(public_test_postgres_select)

    public_test_postgres_references = PGGrantTable(schema='public', table='test', columns=['area_isochrone', 'geom', 'grid_visualization_id', 'modus', 'percentile_area_isochrone'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(public_test_postgres_references)

    public_test_postgres_insert = PGGrantTable(schema='public', table='test', columns=['area_isochrone', 'geom', 'grid_visualization_id', 'modus', 'percentile_area_isochrone'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(public_test_postgres_insert)

    public_scenario_pop_postgres_update = PGGrantTable(schema='public', table='scenario_pop', columns=['geom', 'grid_visualization_id', 'modus', 'percentile_population', 'population'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(public_scenario_pop_postgres_update)

    public_scenario_pop_postgres_select = PGGrantTable(schema='public', table='scenario_pop', columns=['geom', 'grid_visualization_id', 'modus', 'percentile_population', 'population'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(public_scenario_pop_postgres_select)

    public_scenario_pop_postgres_references = PGGrantTable(schema='public', table='scenario_pop', columns=['geom', 'grid_visualization_id', 'modus', 'percentile_population', 'population'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(public_scenario_pop_postgres_references)

    public_scenario_pop_postgres_insert = PGGrantTable(schema='public', table='scenario_pop', columns=['geom', 'grid_visualization_id', 'modus', 'percentile_population', 'population'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(public_scenario_pop_postgres_insert)

    public_default_pop_postgres_update = PGGrantTable(schema='public', table='default_pop', columns=['geom', 'grid_visualization_id', 'modus', 'percentile_population', 'population'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(public_default_pop_postgres_update)

    public_default_pop_postgres_select = PGGrantTable(schema='public', table='default_pop', columns=['geom', 'grid_visualization_id', 'modus', 'percentile_population', 'population'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(public_default_pop_postgres_select)

    public_default_pop_postgres_references = PGGrantTable(schema='public', table='default_pop', columns=['geom', 'grid_visualization_id', 'modus', 'percentile_population', 'population'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(public_default_pop_postgres_references)

    public_default_pop_postgres_insert = PGGrantTable(schema='public', table='default_pop', columns=['geom', 'grid_visualization_id', 'modus', 'percentile_population', 'population'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(public_default_pop_postgres_insert)

    public_comparison_pop_postgres_update = PGGrantTable(schema='public', table='comparison_pop', columns=['geom', 'grid_visualization_id', 'modus', 'percentile_population', 'population'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(public_comparison_pop_postgres_update)

    public_comparison_pop_postgres_select = PGGrantTable(schema='public', table='comparison_pop', columns=['geom', 'grid_visualization_id', 'modus', 'percentile_population', 'population'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(public_comparison_pop_postgres_select)

    public_comparison_pop_postgres_references = PGGrantTable(schema='public', table='comparison_pop', columns=['geom', 'grid_visualization_id', 'modus', 'percentile_population', 'population'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(public_comparison_pop_postgres_references)

    public_comparison_pop_postgres_insert = PGGrantTable(schema='public', table='comparison_pop', columns=['geom', 'grid_visualization_id', 'modus', 'percentile_population', 'population'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(public_comparison_pop_postgres_insert)

    public_alembic_version_postgres_update = PGGrantTable(schema='public', table='alembic_version', columns=['version_num'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(public_alembic_version_postgres_update)

    public_alembic_version_postgres_select = PGGrantTable(schema='public', table='alembic_version', columns=['version_num'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(public_alembic_version_postgres_select)

    public_alembic_version_postgres_references = PGGrantTable(schema='public', table='alembic_version', columns=['version_num'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(public_alembic_version_postgres_references)

    public_alembic_version_postgres_insert = PGGrantTable(schema='public', table='alembic_version', columns=['version_num'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(public_alembic_version_postgres_insert)

    # ### end Alembic commands ###

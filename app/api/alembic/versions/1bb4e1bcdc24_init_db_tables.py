"""Init db tables

Revision ID: 1bb4e1bcdc24
Revises: 
Create Date: 2022-02-10 21:20:35.517590

"""
from alembic import op
import sqlalchemy as sa
import geoalchemy2
import sqlmodel  



# revision identifiers, used by Alembic.
revision = '1bb4e1bcdc24'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    op.execute('CREATE SCHEMA IF NOT EXISTS temporal')
    op.execute('CREATE SCHEMA IF NOT EXISTS extra')
    op.execute('CREATE SCHEMA IF NOT EXISTS basic')
    op.execute('CREATE SCHEMA IF NOT EXISTS customer')
    op.execute('DROP SCHEMA IF EXISTS tiger CASCADE')
    op.execute('DROP SCHEMA IF EXISTS tiger_data CASCADE')
    op.execute('DROP SCHEMA IF EXISTS topology CASCADE')
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('aoi',
    sa.Column('category', sa.Text(), nullable=False),
    sa.Column('name', sa.Text(), nullable=True),
    sa.Column('opening_hours', sa.Text(), nullable=True),
    sa.Column('wheelchair', sa.Text(), nullable=True),
    sa.Column('tags', sa.JSON(), nullable=True),
    sa.Column('geom', geoalchemy2.types.Geometry(geometry_type='MULTIPOLYGON', srid=4326, spatial_index=False, from_text='ST_GeomFromEWKT', name='geometry'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    schema='basic'
    )
    op.create_index('idx_aoi_geom', 'aoi', ['geom'], unique=False, schema='basic', postgresql_using='gist')
    op.create_index(op.f('ix_basic_aoi_category'), 'aoi', ['category'], unique=False, schema='basic')
    op.create_table('building',
    sa.Column('building', sa.Text(), nullable=True),
    sa.Column('amenity', sa.Text(), nullable=True),
    sa.Column('residential_status', sa.Text(), nullable=True),
    sa.Column('housenumber', sa.Text(), nullable=True),
    sa.Column('street', sa.Text(), nullable=True),
    sa.Column('building_levels', sa.SmallInteger(), nullable=True),
    sa.Column('building_levels_residential', sa.SmallInteger(), nullable=True),
    sa.Column('roof_levels', sa.SmallInteger(), nullable=True),
    sa.Column('height', sa.Float(precision=53), nullable=True),
    sa.Column('geom', geoalchemy2.types.Geometry(geometry_type='POLYGON', srid=4326, spatial_index=False, from_text='ST_GeomFromEWKT', name='geometry'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('area', sa.Integer(), nullable=True),
    sa.Column('gross_floor_area_residential', sa.Integer(), nullable=True),
    sa.Column('osm_id', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    schema='basic'
    )
    op.create_index('idx_building_geom', 'building', ['geom'], unique=False, schema='basic', postgresql_using='gist')
    op.create_table('grid_visualization',
    sa.Column('id', sa.BigInteger(), autoincrement=False, nullable=False),
    sa.Column('geom', geoalchemy2.types.Geometry(geometry_type='POLYGON', srid=4326, spatial_index=False, from_text='ST_GeomFromEWKT', name='geometry'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    schema='basic'
    )
    op.create_index('idx_grid_visualization_geom', 'grid_visualization', ['geom'], unique=False, schema='basic', postgresql_using='gist')
    op.create_table('poi',
    sa.Column('category', sa.Text(), nullable=False),
    sa.Column('name', sa.Text(), nullable=True),
    sa.Column('street', sa.Text(), nullable=True),
    sa.Column('housenumber', sa.Text(), nullable=True),
    sa.Column('zipcode', sa.Text(), nullable=True),
    sa.Column('opening_hours', sa.Text(), nullable=True),
    sa.Column('wheelchair', sa.Text(), nullable=True),
    sa.Column('tags', sa.JSON(), nullable=True),
    sa.Column('geom', geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326, spatial_index=False, from_text='ST_GeomFromEWKT', name='geometry'), nullable=False),
    sa.Column('uid', sa.Text(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('uid'),
    schema='basic'
    )
    op.create_index('idx_poi_geom', 'poi', ['geom'], unique=False, schema='basic', postgresql_using='gist')
    op.create_index(op.f('ix_basic_poi_category'), 'poi', ['category'], unique=False, schema='basic')
    op.create_index(op.f('ix_basic_poi_uid'), 'poi', ['uid'], unique=False, schema='basic')
    op.create_table('study_area',
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('geom', geoalchemy2.types.Geometry(geometry_type='MULTIPOLYGON', srid=4326, spatial_index=False, from_text='ST_GeomFromEWKT', name='geometry'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('population', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    schema='basic'
    )
    op.create_index('idx_study_area_geom', 'study_area', ['geom'], unique=False, schema='basic', postgresql_using='gist')
    op.create_table('organization',
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('creation_date', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    schema='customer'
    )
    op.create_table('role',
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    schema='customer'
    )
    op.create_table('grid_calculation',
    sa.Column('id', sa.BigInteger(), autoincrement=False, nullable=False),
    sa.Column('geom', geoalchemy2.types.Geometry(geometry_type='POLYGON', srid=4326, spatial_index=False, from_text='ST_GeomFromEWKT', name='geometry'), nullable=False),
    sa.Column('grid_visualization_id', sa.BigInteger(), nullable=False),
    sa.ForeignKeyConstraint(['grid_visualization_id'], ['basic.grid_visualization.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='basic'
    )
    op.create_index('idx_grid_caclulation_geom', 'grid_calculation', ['geom'], unique=False, schema='basic', postgresql_using='gist')
    op.create_table('grid_visualization_parameter',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('area_isochrone', sa.Float(precision=53), nullable=True),
    sa.Column('percentile_area_isochrone', sa.SmallInteger(), nullable=False),
    sa.Column('percentile_population', sa.SmallInteger(), nullable=False),
    sa.Column('population', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['basic.grid_visualization.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='basic'
    )
    op.create_table('population',
    sa.Column('population', sa.Float(precision=53), nullable=True),
    sa.Column('geom', geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326, spatial_index=False, from_text='ST_GeomFromEWKT', name='geometry'), nullable=False),
    sa.Column('demography', sa.JSON(), nullable=True),
    sa.Column('building_id', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['building_id'], ['basic.building.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='basic'
    )
    op.create_index('idx_population_geom', 'population', ['geom'], unique=False, schema='basic', postgresql_using='gist')
    op.create_index(op.f('ix_basic_population_building_id'), 'population', ['building_id'], unique=False, schema='basic')
    op.create_table('study_area_grid_visualization',
    sa.Column('study_area_id', sa.Integer(), nullable=False),
    sa.Column('grid_visualization_id', sa.BigInteger(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['grid_visualization_id'], ['basic.grid_visualization.id'], ),
    sa.ForeignKeyConstraint(['study_area_id'], ['basic.study_area.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='basic'
    )
    op.create_index(op.f('ix_basic_study_area_grid_visualization_study_area_id'), 'study_area_grid_visualization', ['study_area_id'], unique=False, schema='basic')
    op.create_table('sub_study_area',
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('default_building_levels', sa.SmallInteger(), nullable=True),
    sa.Column('default_roof_levels', sa.SmallInteger(), nullable=True),
    sa.Column('area', sa.Float(precision=53), nullable=True),
    sa.Column('geom', geoalchemy2.types.Geometry(geometry_type='MULTIPOLYGON', srid=4326, spatial_index=False, from_text='ST_GeomFromEWKT', name='geometry'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('population', sa.Integer(), nullable=False),
    sa.Column('study_area_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['study_area_id'], ['basic.study_area.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='basic'
    )
    op.create_index('idx_sub_study_area_geom', 'sub_study_area', ['geom'], unique=False, schema='basic', postgresql_using='gist')
    op.create_index(op.f('ix_basic_sub_study_area_study_area_id'), 'sub_study_area', ['study_area_id'], unique=False, schema='basic')
    op.create_table('customization',
    sa.Column('type', sa.Text(), nullable=False),
    sa.Column('default_setting', sa.JSON(), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['customer.role.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='customer'
    )
    op.create_table('user',
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('surname', sa.Text(), nullable=False),
    sa.Column('email', sa.Text(), nullable=False),
    sa.Column('hashed_password', sa.Text(), nullable=False),
    sa.Column('creation_date', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('organization_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('storage', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['organization_id'], ['customer.organization.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='customer'
    )
    op.create_table('data_upload',
    sa.Column('data_type', sa.Text(), nullable=False),
    sa.Column('upload_type', sa.Text(), nullable=False),
    sa.Column('upload_grid_ids', sa.ARRAY(sa.Text()), server_default=sa.text("'{}'::text[]"), nullable=False),
    sa.Column('creation_date', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('upload_size', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['customer.user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='customer'
    )
    op.create_table('scenario',
    sa.Column('scenario_name', sa.Text(), nullable=False),
    sa.Column('deleted_ways', sa.ARRAY(sa.Integer()), server_default=sa.text("'{}'::int[]"), nullable=True),
    sa.Column('deleted_pois', sa.ARRAY(sa.Text()), server_default=sa.text("'{}'::text[]"), nullable=True),
    sa.Column('deleted_buildings', sa.ARRAY(sa.Integer()), server_default=sa.text("'{}'::int[]"), nullable=True),
    sa.Column('creation_date', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('routing_heatmap_computed', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['customer.user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='customer'
    )
    op.create_table('user_customization',
    sa.Column('setting', sa.JSON(), nullable=False),
    sa.Column('creation_date', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('customization_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['customization_id'], ['customer.customization.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['customer.user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='customer'
    )
    op.create_table('user_role',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('role_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['customer.role.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['customer.user.id'], ),
    sa.PrimaryKeyConstraint('id', 'user_id', 'role_id'),
    schema='customer'
    )
    op.create_table('user_study_area',
    sa.Column('creation_date', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('study_area_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['study_area_id'], ['basic.study_area.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['customer.user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='customer'
    )
    op.create_table('node',
    sa.Column('osm_id', sa.BigInteger(), nullable=True),
    sa.Column('class_ids', sa.ARRAY(sa.Integer()), nullable=True),
    sa.Column('foot', sa.ARRAY(sa.Text()), nullable=True),
    sa.Column('bicycle', sa.ARRAY(sa.Text()), nullable=True),
    sa.Column('lit_classified', sa.ARRAY(sa.Text()), nullable=True),
    sa.Column('wheelchair_classified', sa.ARRAY(sa.Text()), nullable=True),
    sa.Column('geom', geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326, spatial_index=False, from_text='ST_GeomFromEWKT', name='geometry'), nullable=False),
    sa.Column('scenario_id', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('cnt', sa.Integer(), nullable=True),
    sa.Column('death_end', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['scenario_id'], ['customer.scenario.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='basic'
    )
    op.create_index('idx_node_geom', 'node', ['geom'], unique=False, schema='basic', postgresql_using='gist')
    op.create_index(op.f('ix_basic_node_death_end'), 'node', ['death_end'], unique=False, schema='basic')
    op.create_index(op.f('ix_basic_node_scenario_id'), 'node', ['scenario_id'], unique=False, schema='basic')
    op.create_table('reached_poi_heatmap',
    sa.Column('grid_calculation_id', sa.BigInteger(), nullable=False),
    sa.Column('poi_id', sa.Integer(), nullable=False),
    sa.Column('scenario_id', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('cost', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['grid_calculation_id'], ['basic.grid_calculation.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['poi_id'], ['basic.poi.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['scenario_id'], ['customer.scenario.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='basic'
    )
    op.create_index(op.f('ix_basic_reached_poi_heatmap_scenario_id'), 'reached_poi_heatmap', ['scenario_id'], unique=False, schema='basic')
    op.create_table('aoi_modified',
    sa.Column('category', sa.Text(), nullable=False),
    sa.Column('name', sa.Text(), nullable=True),
    sa.Column('opening_hours', sa.Text(), nullable=True),
    sa.Column('wheelchair', sa.Text(), nullable=True),
    sa.Column('tags', sa.JSON(), nullable=True),
    sa.Column('geom', geoalchemy2.types.Geometry(geometry_type='MULTIPOLYGON', srid=4326, spatial_index=False, from_text='ST_GeomFromEWKT', name='geometry'), nullable=False),
    sa.Column('creation_date', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('scenario_id', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['scenario_id'], ['customer.scenario.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='customer'
    )
    op.create_index('idx_aoi_modified_geom', 'aoi_modified', ['geom'], unique=False, schema='customer', postgresql_using='gist')
    op.create_index(op.f('ix_customer_aoi_modified_category'), 'aoi_modified', ['category'], unique=False, schema='customer')
    op.create_index(op.f('ix_customer_aoi_modified_scenario_id'), 'aoi_modified', ['scenario_id'], unique=False, schema='customer')
    op.create_table('aoi_user',
    sa.Column('category', sa.Text(), nullable=False),
    sa.Column('name', sa.Text(), nullable=True),
    sa.Column('opening_hours', sa.Text(), nullable=True),
    sa.Column('wheelchair', sa.Text(), nullable=True),
    sa.Column('tags', sa.JSON(), nullable=True),
    sa.Column('geom', geoalchemy2.types.Geometry(geometry_type='MULTIPOLYGON', srid=4326, spatial_index=False, from_text='ST_GeomFromEWKT', name='geometry'), nullable=False),
    sa.Column('creation_date', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('data_upload_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['data_upload_id'], ['customer.data_upload.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='customer'
    )
    op.create_index('idx_aoi_user_geom', 'aoi_user', ['geom'], unique=False, schema='customer', postgresql_using='gist')
    op.create_index(op.f('ix_customer_aoi_user_category'), 'aoi_user', ['category'], unique=False, schema='customer')
    op.create_index(op.f('ix_customer_aoi_user_data_upload_id'), 'aoi_user', ['data_upload_id'], unique=False, schema='customer')
    op.create_table('building_modified',
    sa.Column('amenity', sa.Text(), nullable=True),
    sa.Column('residential_status', sa.Text(), nullable=True),
    sa.Column('housenumber', sa.Text(), nullable=True),
    sa.Column('street', sa.Text(), nullable=True),
    sa.Column('building_levels', sa.SmallInteger(), nullable=True),
    sa.Column('building_levels_residential', sa.SmallInteger(), nullable=True),
    sa.Column('roof_levels', sa.SmallInteger(), nullable=True),
    sa.Column('height', sa.Float(precision=53), nullable=True),
    sa.Column('geom', geoalchemy2.types.Geometry(geometry_type='POLYGON', srid=4326, spatial_index=False, from_text='ST_GeomFromEWKT', name='geometry'), nullable=False),
    sa.Column('creation_date', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('building_id', sa.Integer(), nullable=True),
    sa.Column('scenario_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('area', sa.Integer(), nullable=True),
    sa.Column('gross_floor_area_residential', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['building_id'], ['basic.building.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['scenario_id'], ['customer.scenario.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='customer'
    )
    op.create_index('idx_building_modified_geom', 'building_modified', ['geom'], unique=False, schema='customer', postgresql_using='gist')
    op.create_index(op.f('ix_customer_building_modified_scenario_id'), 'building_modified', ['scenario_id'], unique=False, schema='customer')
    op.create_table('isochrone_calculation',
    sa.Column('calculation_type', sa.Text(), nullable=False),
    sa.Column('starting_point', sa.Text(), nullable=False),
    sa.Column('routing_profile', sa.Text(), nullable=False),
    sa.Column('speed', sa.Float(precision=53), nullable=False),
    sa.Column('modus', sa.Text(), nullable=False),
    sa.Column('creation_date', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('parent_id', sa.Integer(), nullable=True),
    sa.Column('scenario_id', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['parent_id'], ['customer.isochrone_calculation.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['scenario_id'], ['customer.scenario.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['customer.user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='customer'
    )
    op.create_table('poi_modified',
    sa.Column('category', sa.Text(), nullable=False),
    sa.Column('name', sa.Text(), nullable=True),
    sa.Column('street', sa.Text(), nullable=True),
    sa.Column('housenumber', sa.Text(), nullable=True),
    sa.Column('zipcode', sa.Text(), nullable=True),
    sa.Column('opening_hours', sa.Text(), nullable=True),
    sa.Column('wheelchair', sa.Text(), nullable=True),
    sa.Column('tags', sa.JSON(), nullable=True),
    sa.Column('geom', geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326, spatial_index=False, from_text='ST_GeomFromEWKT', name='geometry'), nullable=False),
    sa.Column('uid', sa.Text(), nullable=False),
    sa.Column('edit_type', sa.Text(), nullable=False),
    sa.Column('table_name', sa.Text(), nullable=False),
    sa.Column('creation_date', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('scenario_id', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['scenario_id'], ['customer.scenario.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='customer'
    )
    op.create_index('idx_poi_modified_geom', 'poi_modified', ['geom'], unique=False, schema='customer', postgresql_using='gist')
    op.create_index(op.f('ix_customer_poi_modified_category'), 'poi_modified', ['category'], unique=False, schema='customer')
    op.create_index(op.f('ix_customer_poi_modified_edit_type'), 'poi_modified', ['edit_type'], unique=False, schema='customer')
    op.create_index(op.f('ix_customer_poi_modified_scenario_id'), 'poi_modified', ['scenario_id'], unique=False, schema='customer')
    op.create_index(op.f('ix_customer_poi_modified_table_name'), 'poi_modified', ['table_name'], unique=False, schema='customer')
    op.create_index(op.f('ix_customer_poi_modified_uid'), 'poi_modified', ['uid'], unique=False, schema='customer')
    op.create_table('poi_user',
    sa.Column('category', sa.Text(), nullable=False),
    sa.Column('name', sa.Text(), nullable=True),
    sa.Column('street', sa.Text(), nullable=True),
    sa.Column('housenumber', sa.Text(), nullable=True),
    sa.Column('zipcode', sa.Text(), nullable=True),
    sa.Column('opening_hours', sa.Text(), nullable=True),
    sa.Column('wheelchair', sa.Text(), nullable=True),
    sa.Column('tags', sa.JSON(), nullable=True),
    sa.Column('geom', geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326, spatial_index=False, from_text='ST_GeomFromEWKT', name='geometry'), nullable=False),
    sa.Column('uid', sa.Text(), nullable=False),
    sa.Column('creation_date', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('data_upload_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['data_upload_id'], ['customer.data_upload.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='customer'
    )
    op.create_index('idx_poi_user_geom', 'poi_user', ['geom'], unique=False, schema='customer', postgresql_using='gist')
    op.create_index(op.f('ix_customer_poi_user_category'), 'poi_user', ['category'], unique=False, schema='customer')
    op.create_index(op.f('ix_customer_poi_user_data_upload_id'), 'poi_user', ['data_upload_id'], unique=False, schema='customer')
    op.create_index(op.f('ix_customer_poi_user_uid'), 'poi_user', ['uid'], unique=False, schema='customer')
    op.create_table('edge',
    sa.Column('length_m', sa.Float(precision=53), nullable=False),
    sa.Column('name', sa.Text(), nullable=True),
    sa.Column('osm_id', sa.BigInteger(), nullable=True),
    sa.Column('bicycle', sa.Text(), nullable=True),
    sa.Column('foot', sa.Text(), nullable=True),
    sa.Column('oneway', sa.Text(), nullable=True),
    sa.Column('crossing', sa.Text(), nullable=True),
    sa.Column('crossing_delay_category', sa.SmallInteger(), nullable=True),
    sa.Column('bicycle_road', sa.Text(), nullable=True),
    sa.Column('cycleway', sa.Text(), nullable=True),
    sa.Column('highway', sa.Text(), nullable=True),
    sa.Column('incline', sa.Text(), nullable=True),
    sa.Column('lanes', sa.Float(precision=53), nullable=True),
    sa.Column('lit', sa.Text(), nullable=True),
    sa.Column('lit_classified', sa.Text(), nullable=True),
    sa.Column('parking', sa.Text(), nullable=True),
    sa.Column('parking_lane_both', sa.Text(), nullable=True),
    sa.Column('parking_lane_right', sa.Text(), nullable=True),
    sa.Column('parking_lane_left', sa.Text(), nullable=True),
    sa.Column('segregated', sa.Text(), nullable=True),
    sa.Column('sidewalk', sa.Text(), nullable=True),
    sa.Column('sidewalk_both_width', sa.Float(precision=53), nullable=True),
    sa.Column('sidewalk_left_width', sa.Float(precision=53), nullable=True),
    sa.Column('sidewalk_right_width', sa.Float(precision=53), nullable=True),
    sa.Column('smoothness', sa.Text(), nullable=True),
    sa.Column('surface', sa.Text(), nullable=True),
    sa.Column('wheelchair', sa.Text(), nullable=True),
    sa.Column('wheelchair_classified', sa.Text(), nullable=True),
    sa.Column('width', sa.Float(precision=53), nullable=True),
    sa.Column('s_imp', sa.Float(precision=53), nullable=True),
    sa.Column('rs_imp', sa.Float(precision=53), nullable=True),
    sa.Column('impedance_surface', sa.Float(precision=53), nullable=True),
    sa.Column('geom', geoalchemy2.types.Geometry(geometry_type='LINESTRING', srid=4326, spatial_index=False, from_text='ST_GeomFromEWKT', name='geometry'), nullable=False),
    sa.Column('scenario_id', sa.Integer(), nullable=True),
    sa.Column('length_3857', sa.Float(precision=53), nullable=False),
    sa.Column('coordinates_3857', sa.JSON(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('class_id', sa.Integer(), nullable=False),
    sa.Column('one_way', sa.Integer(), nullable=True),
    sa.Column('maxspeed_forward', sa.Integer(), nullable=True),
    sa.Column('maxspeed_backward', sa.Integer(), nullable=True),
    sa.Column('one_link_crossing', sa.Boolean(), nullable=True),
    sa.Column('incline_percent', sa.Integer(), nullable=True),
    sa.Column('death_end', sa.Integer(), nullable=True),
    sa.Column('edge_id', sa.Integer(), nullable=True),
    sa.Column('source', sa.Integer(), nullable=False),
    sa.Column('target', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['edge_id'], ['basic.edge.id'], ),
    sa.ForeignKeyConstraint(['scenario_id'], ['customer.scenario.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['source'], ['basic.node.id'], ),
    sa.ForeignKeyConstraint(['target'], ['basic.node.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='basic'
    )
    op.create_index('idx_edge_geom', 'edge', ['geom'], unique=False, schema='basic', postgresql_using='gist')
    op.create_index(op.f('ix_basic_edge_bicycle'), 'edge', ['bicycle'], unique=False, schema='basic')
    op.create_index(op.f('ix_basic_edge_edge_id'), 'edge', ['edge_id'], unique=False, schema='basic')
    op.create_index(op.f('ix_basic_edge_foot'), 'edge', ['foot'], unique=False, schema='basic')
    op.create_index(op.f('ix_basic_edge_scenario_id'), 'edge', ['scenario_id'], unique=False, schema='basic')
    op.create_index(op.f('ix_basic_edge_source'), 'edge', ['source'], unique=False, schema='basic')
    op.create_index(op.f('ix_basic_edge_target'), 'edge', ['target'], unique=False, schema='basic')
    op.create_table('reached_poi_heatmap_accessibility',
    sa.Column('reached_poi_heatmap_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('sensitivity', sa.Integer(), nullable=False),
    sa.Column('accessibility_index', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['reached_poi_heatmap_id'], ['basic.reached_poi_heatmap.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='basic'
    )
    op.create_table('isochrone_feature',
    sa.Column('reached_opportunities', sa.JSON(), nullable=True),
    sa.Column('geom', geoalchemy2.types.Geometry(geometry_type='MULTIPOLYGON', srid=4326, spatial_index=False, from_text='ST_GeomFromEWKT', name='geometry'), nullable=False),
    sa.Column('isochrone_calculation_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('step', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['isochrone_calculation_id'], ['customer.isochrone_calculation.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='customer'
    )
    op.create_index('idx_isochrone_feature_geom', 'isochrone_feature', ['geom'], unique=False, schema='customer', postgresql_using='gist')
    op.create_index(op.f('ix_customer_isochrone_feature_isochrone_calculation_id'), 'isochrone_feature', ['isochrone_calculation_id'], unique=False, schema='customer')
    op.create_table('population_modified',
    sa.Column('population', sa.Float(precision=53), nullable=True),
    sa.Column('geom', geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326, spatial_index=False, from_text='ST_GeomFromEWKT', name='geometry'), nullable=False),
    sa.Column('creation_date', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('building_modified_id', sa.Integer(), nullable=False),
    sa.Column('scenario_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['building_modified_id'], ['customer.building_modified.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['scenario_id'], ['customer.scenario.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='customer'
    )
    op.create_index('idx_population_modified_geom', 'population_modified', ['geom'], unique=False, schema='customer', postgresql_using='gist')
    op.create_index(op.f('ix_customer_population_modified_building_modified_id'), 'population_modified', ['building_modified_id'], unique=False, schema='customer')
    op.create_index(op.f('ix_customer_population_modified_scenario_id'), 'population_modified', ['scenario_id'], unique=False, schema='customer')
    op.create_table('reached_edge_heatmap',
    sa.Column('start_perc', sa.Float(precision=53), nullable=False),
    sa.Column('end_perc', sa.Float(precision=53), nullable=False),
    sa.Column('geom', geoalchemy2.types.Geometry(geometry_type='LINESTRING', srid=4326, spatial_index=False, from_text='ST_GeomFromEWKT', name='geometry'), nullable=False),
    sa.Column('edge_id', sa.Integer(), nullable=False),
    sa.Column('scenario_id', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('partial_edge', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['edge_id'], ['basic.edge.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['scenario_id'], ['customer.scenario.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='basic'
    )
    op.create_index('idx_reached_edge_heatmap_geom', 'reached_edge_heatmap', ['geom'], unique=False, schema='basic', postgresql_using='gist')
    op.create_index(op.f('ix_basic_reached_edge_heatmap_edge_id'), 'reached_edge_heatmap', ['edge_id'], unique=False, schema='basic')
    op.create_index(op.f('ix_basic_reached_edge_heatmap_scenario_id'), 'reached_edge_heatmap', ['scenario_id'], unique=False, schema='basic')
    op.create_table('isochrone_edge',
    sa.Column('cost', sa.Float(precision=53), nullable=False),
    sa.Column('start_cost', sa.Float(precision=53), nullable=False),
    sa.Column('end_cost', sa.Float(precision=53), nullable=False),
    sa.Column('start_perc', sa.Float(precision=53), nullable=True),
    sa.Column('end_perc', sa.Float(precision=53), nullable=True),
    sa.Column('geom', geoalchemy2.types.Geometry(geometry_type='LINESTRING', srid=4326, spatial_index=False, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('isochrone_calculation_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('partial_edge', sa.Boolean(), nullable=True),
    sa.Column('edge_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['edge_id'], ['basic.edge.id'], ),
    sa.ForeignKeyConstraint(['isochrone_calculation_id'], ['customer.isochrone_calculation.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='customer'
    )
    op.create_index(op.f('ix_customer_isochrone_edge_isochrone_calculation_id'), 'isochrone_edge', ['isochrone_calculation_id'], unique=False, schema='customer')
    op.create_table('way_modified',
    sa.Column('length_m', sa.Float(precision=53), nullable=False),
    sa.Column('name', sa.Text(), nullable=True),
    sa.Column('osm_id', sa.BigInteger(), nullable=True),
    sa.Column('bicycle', sa.Text(), nullable=True),
    sa.Column('foot', sa.Text(), nullable=True),
    sa.Column('oneway', sa.Text(), nullable=True),
    sa.Column('crossing', sa.Text(), nullable=True),
    sa.Column('crossing_delay_category', sa.SmallInteger(), nullable=True),
    sa.Column('bicycle_road', sa.Text(), nullable=True),
    sa.Column('cycleway', sa.Text(), nullable=True),
    sa.Column('highway', sa.Text(), nullable=True),
    sa.Column('incline', sa.Text(), nullable=True),
    sa.Column('lanes', sa.Float(precision=53), nullable=True),
    sa.Column('lit', sa.Text(), nullable=True),
    sa.Column('lit_classified', sa.Text(), nullable=True),
    sa.Column('parking', sa.Text(), nullable=True),
    sa.Column('parking_lane_both', sa.Text(), nullable=True),
    sa.Column('parking_lane_right', sa.Text(), nullable=True),
    sa.Column('parking_lane_left', sa.Text(), nullable=True),
    sa.Column('segregated', sa.Text(), nullable=True),
    sa.Column('sidewalk', sa.Text(), nullable=True),
    sa.Column('sidewalk_both_width', sa.Float(precision=53), nullable=True),
    sa.Column('sidewalk_left_width', sa.Float(precision=53), nullable=True),
    sa.Column('sidewalk_right_width', sa.Float(precision=53), nullable=True),
    sa.Column('smoothness', sa.Text(), nullable=True),
    sa.Column('surface', sa.Text(), nullable=True),
    sa.Column('wheelchair', sa.Text(), nullable=True),
    sa.Column('wheelchair_classified', sa.Text(), nullable=True),
    sa.Column('width', sa.Float(precision=53), nullable=True),
    sa.Column('s_imp', sa.Float(precision=53), nullable=True),
    sa.Column('rs_imp', sa.Float(precision=53), nullable=True),
    sa.Column('impedance_surface', sa.Float(precision=53), nullable=True),
    sa.Column('geom', geoalchemy2.types.Geometry(geometry_type='LINESTRING', srid=4326, spatial_index=False, from_text='ST_GeomFromEWKT', name='geometry'), nullable=False),
    sa.Column('scenario_id', sa.Integer(), nullable=True),
    sa.Column('way_type', sa.Text(), nullable=True),
    sa.Column('edit_type', sa.Text(), nullable=True),
    sa.Column('creation_date', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('class_id', sa.Integer(), nullable=False),
    sa.Column('one_way', sa.Integer(), nullable=True),
    sa.Column('maxspeed_forward', sa.Integer(), nullable=True),
    sa.Column('maxspeed_backward', sa.Integer(), nullable=True),
    sa.Column('one_link_crossing', sa.Boolean(), nullable=True),
    sa.Column('incline_percent', sa.Integer(), nullable=True),
    sa.Column('death_end', sa.Integer(), nullable=True),
    sa.Column('edge_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['edge_id'], ['basic.edge.id'], ),
    sa.ForeignKeyConstraint(['scenario_id'], ['customer.scenario.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='customer'
    )
    op.create_index('idx_way_modified_geom', 'way_modified', ['geom'], unique=False, schema='customer', postgresql_using='gist')
    op.create_index(op.f('ix_customer_way_modified_bicycle'), 'way_modified', ['bicycle'], unique=False, schema='customer')
    op.create_index(op.f('ix_customer_way_modified_edge_id'), 'way_modified', ['edge_id'], unique=False, schema='customer')
    op.create_index(op.f('ix_customer_way_modified_foot'), 'way_modified', ['foot'], unique=False, schema='customer')
    op.create_index(op.f('ix_customer_way_modified_scenario_id'), 'way_modified', ['scenario_id'], unique=False, schema='customer')
    op.create_table('reached_edge_heatmap_grid_calculation',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('start_cost', sa.SmallInteger(), nullable=False),
    sa.Column('end_cost', sa.SmallInteger(), nullable=False),
    sa.Column('grid_calculation_id', sa.BigInteger(), nullable=False),
    sa.Column('reached_edge_heatmap_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['grid_calculation_id'], ['basic.grid_calculation.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['reached_edge_heatmap_id'], ['basic.reached_edge_heatmap.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='basic'
    )
    op.create_index(op.f('ix_basic_reached_edge_heatmap_grid_calculation_grid_calculation_id'), 'reached_edge_heatmap_grid_calculation', ['grid_calculation_id'], unique=False, schema='basic')
    op.create_index(op.f('ix_basic_reached_edge_heatmap_grid_calculation_reached_edge_heatmap_id'), 'reached_edge_heatmap_grid_calculation', ['reached_edge_heatmap_id'], unique=False, schema='basic')
    # ### end Alembic commands ###


def downgrade():
    op.execute('DROP SCHEMA IF EXISTS temporal')
    op.execute('DROP SCHEMA IF EXISTS extra')
    op.execute('DROP SCHEMA IF EXISTS  basic')
    op.execute('DROP SCHEMA IF EXISTS  customer')
    op.execute('CREATE SCHEMA IF NOT EXISTS tiger')
    op.execute('CREATE SCHEMA IF NOT EXISTS  tiger_data')
    op.execute('CREATE SCHEMA IF NOT EXISTS  topology')
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_basic_reached_edge_heatmap_grid_calculation_reached_edge_heatmap_id'), table_name='reached_edge_heatmap_grid_calculation', schema='basic')
    op.drop_index(op.f('ix_basic_reached_edge_heatmap_grid_calculation_grid_calculation_id'), table_name='reached_edge_heatmap_grid_calculation', schema='basic')
    op.drop_table('reached_edge_heatmap_grid_calculation', schema='basic')
    op.drop_index(op.f('ix_customer_way_modified_scenario_id'), table_name='way_modified', schema='customer')
    op.drop_index(op.f('ix_customer_way_modified_foot'), table_name='way_modified', schema='customer')
    op.drop_index(op.f('ix_customer_way_modified_edge_id'), table_name='way_modified', schema='customer')
    op.drop_index(op.f('ix_customer_way_modified_bicycle'), table_name='way_modified', schema='customer')
    op.drop_index('idx_way_modified_geom', table_name='way_modified', schema='customer', postgresql_using='gist')
    op.drop_table('way_modified', schema='customer')
    op.drop_index(op.f('ix_customer_isochrone_edge_isochrone_calculation_id'), table_name='isochrone_edge', schema='customer')
    op.drop_table('isochrone_edge', schema='customer')
    op.drop_index(op.f('ix_basic_reached_edge_heatmap_scenario_id'), table_name='reached_edge_heatmap', schema='basic')
    op.drop_index(op.f('ix_basic_reached_edge_heatmap_edge_id'), table_name='reached_edge_heatmap', schema='basic')
    op.drop_index('idx_reached_edge_heatmap_geom', table_name='reached_edge_heatmap', schema='basic', postgresql_using='gist')
    op.drop_table('reached_edge_heatmap', schema='basic')
    op.drop_index(op.f('ix_customer_population_modified_scenario_id'), table_name='population_modified', schema='customer')
    op.drop_index(op.f('ix_customer_population_modified_building_modified_id'), table_name='population_modified', schema='customer')
    op.drop_index('idx_population_modified_geom', table_name='population_modified', schema='customer', postgresql_using='gist')
    op.drop_table('population_modified', schema='customer')
    op.drop_index(op.f('ix_customer_isochrone_feature_isochrone_calculation_id'), table_name='isochrone_feature', schema='customer')
    op.drop_index('idx_isochrone_feature_geom', table_name='isochrone_feature', schema='customer', postgresql_using='gist')
    op.drop_table('isochrone_feature', schema='customer')
    op.drop_table('reached_poi_heatmap_accessibility', schema='basic')
    op.drop_index(op.f('ix_basic_edge_target'), table_name='edge', schema='basic')
    op.drop_index(op.f('ix_basic_edge_source'), table_name='edge', schema='basic')
    op.drop_index(op.f('ix_basic_edge_scenario_id'), table_name='edge', schema='basic')
    op.drop_index(op.f('ix_basic_edge_foot'), table_name='edge', schema='basic')
    op.drop_index(op.f('ix_basic_edge_edge_id'), table_name='edge', schema='basic')
    op.drop_index(op.f('ix_basic_edge_bicycle'), table_name='edge', schema='basic')
    op.drop_index('idx_edge_geom', table_name='edge', schema='basic', postgresql_using='gist')
    op.drop_table('edge', schema='basic')
    op.drop_index(op.f('ix_customer_poi_user_uid'), table_name='poi_user', schema='customer')
    op.drop_index(op.f('ix_customer_poi_user_data_upload_id'), table_name='poi_user', schema='customer')
    op.drop_index(op.f('ix_customer_poi_user_category'), table_name='poi_user', schema='customer')
    op.drop_index('idx_poi_user_geom', table_name='poi_user', schema='customer', postgresql_using='gist')
    op.drop_table('poi_user', schema='customer')
    op.drop_index(op.f('ix_customer_poi_modified_uid'), table_name='poi_modified', schema='customer')
    op.drop_index(op.f('ix_customer_poi_modified_table_name'), table_name='poi_modified', schema='customer')
    op.drop_index(op.f('ix_customer_poi_modified_scenario_id'), table_name='poi_modified', schema='customer')
    op.drop_index(op.f('ix_customer_poi_modified_edit_type'), table_name='poi_modified', schema='customer')
    op.drop_index(op.f('ix_customer_poi_modified_category'), table_name='poi_modified', schema='customer')
    op.drop_index('idx_poi_modified_geom', table_name='poi_modified', schema='customer', postgresql_using='gist')
    op.drop_table('poi_modified', schema='customer')
    op.drop_table('isochrone_calculation', schema='customer')
    op.drop_index(op.f('ix_customer_building_modified_scenario_id'), table_name='building_modified', schema='customer')
    op.drop_index('idx_building_modified_geom', table_name='building_modified', schema='customer', postgresql_using='gist')
    op.drop_table('building_modified', schema='customer')
    op.drop_index(op.f('ix_customer_aoi_user_data_upload_id'), table_name='aoi_user', schema='customer')
    op.drop_index(op.f('ix_customer_aoi_user_category'), table_name='aoi_user', schema='customer')
    op.drop_index('idx_aoi_user_geom', table_name='aoi_user', schema='customer', postgresql_using='gist')
    op.drop_table('aoi_user', schema='customer')
    op.drop_index(op.f('ix_customer_aoi_modified_scenario_id'), table_name='aoi_modified', schema='customer')
    op.drop_index(op.f('ix_customer_aoi_modified_category'), table_name='aoi_modified', schema='customer')
    op.drop_index('idx_aoi_modified_geom', table_name='aoi_modified', schema='customer', postgresql_using='gist')
    op.drop_table('aoi_modified', schema='customer')
    op.drop_index(op.f('ix_basic_reached_poi_heatmap_scenario_id'), table_name='reached_poi_heatmap', schema='basic')
    op.drop_table('reached_poi_heatmap', schema='basic')
    op.drop_index(op.f('ix_basic_node_scenario_id'), table_name='node', schema='basic')
    op.drop_index(op.f('ix_basic_node_death_end'), table_name='node', schema='basic')
    op.drop_index('idx_node_geom', table_name='node', schema='basic', postgresql_using='gist')
    op.drop_table('node', schema='basic')
    op.drop_table('user_study_area', schema='customer')
    op.drop_table('user_role', schema='customer')
    op.drop_table('user_customization', schema='customer')
    op.drop_table('scenario', schema='customer')
    op.drop_table('data_upload', schema='customer')
    op.drop_table('user', schema='customer')
    op.drop_table('customization', schema='customer')
    op.drop_index(op.f('ix_basic_sub_study_area_study_area_id'), table_name='sub_study_area', schema='basic')
    op.drop_index('idx_sub_study_area_geom', table_name='sub_study_area', schema='basic', postgresql_using='gist')
    op.drop_table('sub_study_area', schema='basic')
    op.drop_index(op.f('ix_basic_study_area_grid_visualization_study_area_id'), table_name='study_area_grid_visualization', schema='basic')
    op.drop_table('study_area_grid_visualization', schema='basic')
    op.drop_index(op.f('ix_basic_population_building_id'), table_name='population', schema='basic')
    op.drop_index('idx_population_geom', table_name='population', schema='basic', postgresql_using='gist')
    op.drop_table('population', schema='basic')
    op.drop_table('grid_visualization_parameter', schema='basic')
    op.drop_index('idx_grid_caclulation_geom', table_name='grid_calculation', schema='basic', postgresql_using='gist')
    op.drop_table('grid_calculation', schema='basic')
    op.drop_table('role', schema='customer')
    op.drop_table('organization', schema='customer')
    op.drop_index('idx_study_area_geom', table_name='study_area', schema='basic', postgresql_using='gist')
    op.drop_table('study_area', schema='basic')
    op.drop_index(op.f('ix_basic_poi_uid'), table_name='poi', schema='basic')
    op.drop_index(op.f('ix_basic_poi_category'), table_name='poi', schema='basic')
    op.drop_index('idx_poi_geom', table_name='poi', schema='basic', postgresql_using='gist')
    op.drop_table('poi', schema='basic')
    op.drop_index('idx_grid_visualization_geom', table_name='grid_visualization', schema='basic', postgresql_using='gist')
    op.drop_table('grid_visualization', schema='basic')
    op.drop_index('idx_building_geom', table_name='building', schema='basic', postgresql_using='gist')
    op.drop_table('building', schema='basic')
    op.drop_index(op.f('ix_basic_aoi_category'), table_name='aoi', schema='basic')
    op.drop_index('idx_aoi_geom', table_name='aoi', schema='basic', postgresql_using='gist')
    op.drop_table('aoi', schema='basic')
    # ### end Alembic commands ###

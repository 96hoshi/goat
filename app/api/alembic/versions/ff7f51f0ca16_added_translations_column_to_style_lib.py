"""added translations column to style lib

Revision ID: ff7f51f0ca16
Revises: db471c586acc
Create Date: 2022-03-19 09:43:34.872021

"""
from alembic import op
import sqlalchemy as sa
import geoalchemy2
import sqlmodel  

from alembic_utils.pg_grant_table import PGGrantTable
from sqlalchemy import text as sql_text
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'ff7f51f0ca16'
down_revision = 'db471c586acc'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('style_library', sa.Column('translations', postgresql.JSONB(astext_type=sa.Text()), nullable=True), schema='customer')
    customer_layer_library_postgres_insert = PGGrantTable(schema='customer', table='layer_library', columns=['access_token', 'attributes', 'id', 'map_attribution', 'name', 'style_library_id', 'type', 'url'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(customer_layer_library_postgres_insert)

    customer_layer_library_postgres_references = PGGrantTable(schema='customer', table='layer_library', columns=['access_token', 'attributes', 'id', 'map_attribution', 'name', 'style_library_id', 'type', 'url'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(customer_layer_library_postgres_references)

    customer_layer_library_postgres_select = PGGrantTable(schema='customer', table='layer_library', columns=['access_token', 'attributes', 'id', 'map_attribution', 'name', 'style_library_id', 'type', 'url'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(customer_layer_library_postgres_select)

    customer_layer_library_postgres_update = PGGrantTable(schema='customer', table='layer_library', columns=['access_token', 'attributes', 'id', 'map_attribution', 'name', 'style_library_id', 'type', 'url'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(customer_layer_library_postgres_update)

    customer_style_library_postgres_insert = PGGrantTable(schema='customer', table='style_library', columns=['id', 'name', 'style'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(customer_style_library_postgres_insert)

    customer_style_library_postgres_references = PGGrantTable(schema='customer', table='style_library', columns=['id', 'name', 'style'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(customer_style_library_postgres_references)

    customer_style_library_postgres_select = PGGrantTable(schema='customer', table='style_library', columns=['id', 'name', 'style'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(customer_style_library_postgres_select)

    customer_style_library_postgres_update = PGGrantTable(schema='customer', table='style_library', columns=['id', 'name', 'style'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(customer_style_library_postgres_update)

    customer_style_library_postgres_delete = PGGrantTable(schema='customer', table='style_library', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(customer_style_library_postgres_delete)

    customer_style_library_postgres_truncate = PGGrantTable(schema='customer', table='style_library', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(customer_style_library_postgres_truncate)

    customer_style_library_postgres_trigger = PGGrantTable(schema='customer', table='style_library', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(customer_style_library_postgres_trigger)

    customer_layer_library_postgres_delete = PGGrantTable(schema='customer', table='layer_library', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(customer_layer_library_postgres_delete)

    customer_layer_library_postgres_truncate = PGGrantTable(schema='customer', table='layer_library', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(customer_layer_library_postgres_truncate)

    customer_layer_library_postgres_trigger = PGGrantTable(schema='customer', table='layer_library', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(customer_layer_library_postgres_trigger)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    customer_layer_library_postgres_trigger = PGGrantTable(schema='customer', table='layer_library', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(customer_layer_library_postgres_trigger)

    customer_layer_library_postgres_truncate = PGGrantTable(schema='customer', table='layer_library', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(customer_layer_library_postgres_truncate)

    customer_layer_library_postgres_delete = PGGrantTable(schema='customer', table='layer_library', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(customer_layer_library_postgres_delete)

    customer_style_library_postgres_trigger = PGGrantTable(schema='customer', table='style_library', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(customer_style_library_postgres_trigger)

    customer_style_library_postgres_truncate = PGGrantTable(schema='customer', table='style_library', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(customer_style_library_postgres_truncate)

    customer_style_library_postgres_delete = PGGrantTable(schema='customer', table='style_library', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(customer_style_library_postgres_delete)

    customer_style_library_postgres_update = PGGrantTable(schema='customer', table='style_library', columns=['id', 'name', 'style'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(customer_style_library_postgres_update)

    customer_style_library_postgres_select = PGGrantTable(schema='customer', table='style_library', columns=['id', 'name', 'style'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(customer_style_library_postgres_select)

    customer_style_library_postgres_references = PGGrantTable(schema='customer', table='style_library', columns=['id', 'name', 'style'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(customer_style_library_postgres_references)

    customer_style_library_postgres_insert = PGGrantTable(schema='customer', table='style_library', columns=['id', 'name', 'style'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(customer_style_library_postgres_insert)

    customer_layer_library_postgres_update = PGGrantTable(schema='customer', table='layer_library', columns=['access_token', 'attributes', 'id', 'map_attribution', 'name', 'style_library_id', 'type', 'url'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(customer_layer_library_postgres_update)

    customer_layer_library_postgres_select = PGGrantTable(schema='customer', table='layer_library', columns=['access_token', 'attributes', 'id', 'map_attribution', 'name', 'style_library_id', 'type', 'url'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(customer_layer_library_postgres_select)

    customer_layer_library_postgres_references = PGGrantTable(schema='customer', table='layer_library', columns=['access_token', 'attributes', 'id', 'map_attribution', 'name', 'style_library_id', 'type', 'url'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(customer_layer_library_postgres_references)

    customer_layer_library_postgres_insert = PGGrantTable(schema='customer', table='layer_library', columns=['access_token', 'attributes', 'id', 'map_attribution', 'name', 'style_library_id', 'type', 'url'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(customer_layer_library_postgres_insert)

    op.drop_column('style_library', 'translations', schema='customer')
    # ### end Alembic commands ###

"""empty message

Revision ID: 864f72e51788
Revises: 9eb64b50f1eb
Create Date: 2022-03-27 23:25:01.595784

"""
from alembic import op
import sqlalchemy as sa
import geoalchemy2
import sqlmodel  

from alembic_utils.pg_function import PGFunction
from sqlalchemy import text as sql_text
from alembic_utils.pg_grant_table import PGGrantTable
from sqlalchemy import text as sql_text

# revision identifiers, used by Alembic.
revision = '864f72e51788'
down_revision = '9eb64b50f1eb'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    basic_prepare_heatmap_local_accessibility = PGFunction(
        schema="basic",
        signature="prepare_heatmap_local_accessibility(amenities_json jsonb, user_id_input integer, active_study_area_id integer, modus_input text DEFAULT 'default', scenario_id_input integer DEFAULT 0, data_upload_ids integer[] DEFAULT '{}'::integer[])",
        definition='returns TABLE(grid_visualization_id bigint, accessibility_index bigint)\n LANGUAGE plpgsql\nAS $function$\nDECLARE\n\tarray_amenities text[];\n\tpois_one_entrance jsonb := basic.poi_categories(user_id_input) -> \'false\';\n\tpois_more_entrances jsonb := basic.poi_categories(user_id_input) -> \'true\';\n\tsensitivities integer[]; \n\ttranslation_sensitivities jsonb;\n\texcluded_poi_uids text[] := \'{}\'::TEXT[];\nBEGIN\n  \t\n\tSELECT ARRAY_AGG(s.sensitivity::integer) \n\tINTO sensitivities \n\tFROM (\n\t\tSELECT jsonb_array_elements_text(basic.select_customization(\'heatmap_sensitivities\')) sensitivity \n\t) s;\n\n\tSELECT jsonb_agg(a.category)\n\tINTO pois_one_entrance  \n\tFROM jsonb_object_keys(amenities_json) AS a(category), jsonb_array_elements_text(pois_one_entrance) AS o(category) \n\tWHERE a.category = o.category; \n\t\n\tSELECT jsonb_agg(a.category)\n\tINTO pois_more_entrances  \n\tFROM jsonb_object_keys(amenities_json) AS a(category), jsonb_array_elements_text(pois_more_entrances) AS o(category) \n\tWHERE a.category = o.category; \n\n\tSELECT jsonb_object_agg(k, (sensitivities  # (v ->> \'sensitivity\')::integer)::smallint)\n\tINTO translation_sensitivities\n\tFROM jsonb_each(amenities_json) AS u(k, v);\n\n\tIF modus_input <> \'default\' AND scenario_id_input <> 0 THEN \n\t\texcluded_poi_uids = basic.modified_pois(scenario_id_input); \n\tEND IF; \n\n\tRETURN query\n\tSELECT u.grid_visualization_id, (u.accessibility_index * (amenities_json -> x.category ->> \'weight\')::SMALLINT)::bigint AS accessibility_index  \n\tFROM (\n\t\tSELECT grid_visualization_ids, accessibility_indices[(translation_sensitivities ->> p.category)::integer\\:(translation_sensitivities ->> p.category)::integer][1\\:], p.category\n\t\tFROM customer.reached_poi_heatmap r, basic.study_area s, basic.poi p   \n\t\tWHERE s.id = active_study_area_id \n\t\tAND ST_Intersects(p.geom, s.buffer_geom_heatmap)\n\t\tAND p.uid = r.poi_uid \n\t\tAND p.category IN (SELECT jsonb_array_elements_text(pois_one_entrance))\n\t\tAND p.uid NOT IN (SELECT UNNEST(excluded_poi_uids))\n\t)x, UNNEST(x.grid_visualization_ids, x.accessibility_indices) AS u(grid_visualization_id, accessibility_index);\n\n\tRETURN query \n\tSELECT u.grid_visualization_id, (max(u.accessibility_index) * (amenities_json -> x.category ->> \'weight\')::SMALLINT)::bigint AS accessibility_index  \n\tFROM (\n\t\tSELECT grid_visualization_ids, accessibility_indices[(translation_sensitivities ->> p.category)::integer\\:(translation_sensitivities ->> p.category)::integer][1\\:], \n\t\tp.category, p.name\n\t\tFROM customer.reached_poi_heatmap r, basic.study_area s, basic.poi p   \n\t\tWHERE s.id = active_study_area_id \n\t\tAND ST_Intersects(p.geom, s.buffer_geom_heatmap)\n\t\tAND p.uid = r.poi_uid \n\t\tAND p.uid NOT IN (SELECT UNNEST(excluded_poi_uids))\n\t\tAND p.category IN (SELECT jsonb_array_elements_text(pois_more_entrances))\n\t)x, UNNEST(x.grid_visualization_ids, x.accessibility_indices) AS u(grid_visualization_id, accessibility_index)\n\tGROUP BY u.grid_visualization_id, x.category, x.name;  \n\t\n\tIF data_upload_ids <> \'{}\'::integer[] THEN \n\t\tRETURN query\n\t\tSELECT u.grid_visualization_id, (u.accessibility_index * (amenities_json -> x.category ->> \'weight\')::SMALLINT)::bigint AS accessibility_index  \n\t\tFROM (\n\t\t\tSELECT grid_visualization_ids, accessibility_indices[(translation_sensitivities ->> p.category)::integer\\:(translation_sensitivities ->> p.category)::integer][1\\:], p.category\n\t\t\tFROM customer.reached_poi_heatmap r, basic.study_area s, customer.poi_user p   \n\t\t\tWHERE s.id = active_study_area_id \n\t\t\tAND ST_Intersects(p.geom, s.buffer_geom_heatmap)\n\t\t\tAND p.uid = r.poi_uid \n\t\t\tAND p.category IN (SELECT jsonb_array_elements_text(pois_one_entrance))\n\t\t\tAND p.uid NOT IN (SELECT UNNEST(excluded_poi_uids))\n\t\t\tAND p.data_upload_id IN (SELECT UNNEST(data_upload_ids))\n\t\t)x, UNNEST(x.grid_visualization_ids, x.accessibility_indices) AS u(grid_visualization_id, accessibility_index);\n\t\n\t\tRETURN query \n\t\tSELECT u.grid_visualization_id, (max(u.accessibility_index) * (amenities_json -> x.category ->> \'weight\')::SMALLINT)::bigint AS accessibility_index  \n\t\tFROM (\n\t\t\tSELECT grid_visualization_ids, accessibility_indices[(translation_sensitivities ->> p.category)::integer\\:(translation_sensitivities ->> p.category)::integer][1\\:], \n\t\t\tp.category, p.name\n\t\t\tFROM customer.reached_poi_heatmap r, basic.study_area s, customer.poi_user p   \n\t\t\tWHERE s.id = active_study_area_id \n\t\t\tAND ST_Intersects(p.geom, s.buffer_geom_heatmap)\n\t\t\tAND p.uid = r.poi_uid \n\t\t\tAND p.uid NOT IN (SELECT UNNEST(excluded_poi_uids))\n\t\t\tAND p.category IN (SELECT jsonb_array_elements_text(pois_more_entrances))\n\t\t\tAND p.data_upload_id IN (SELECT UNNEST(data_upload_ids))\n\t\t)x, UNNEST(x.grid_visualization_ids, x.accessibility_indices) AS u(grid_visualization_id, accessibility_index)\n\t\tGROUP BY u.grid_visualization_id, x.category, x.name;  \t\n\tEND IF;\n\n\tIF modus_input <> \'default\' AND scenario_id_input <> 0 THEN \n\t\tRETURN query \n\t\tSELECT u.grid_visualization_id, (u.accessibility_index * (amenities_json -> x.category ->> \'weight\')::SMALLINT)::bigint AS accessibility_index  \n\t\tFROM (\n\t\t\tSELECT grid_visualization_ids, accessibility_indices[(translation_sensitivities ->> p.category)::integer\\:(translation_sensitivities ->> p.category)::integer][1\\:], p.category\n\t\t\tFROM customer.reached_poi_heatmap r, basic.study_area s, customer.poi_modified p  \n\t\t\tWHERE s.id = active_study_area_id \n\t\t\tAND ST_Intersects(p.geom, s.buffer_geom_heatmap)\n\t\t\tAND p.uid = r.poi_uid \n\t\t\tAND p.scenario_id = scenario_id_input \n\t\t\tAND p.edit_type <> \'d\'\n\t\t\tAND p.category IN (SELECT jsonb_array_elements_text(pois_one_entrance))\n\t\t)x, UNNEST(x.grid_visualization_ids, x.accessibility_indices) AS u(grid_visualization_id, accessibility_index);\n\t\t\n\t\tRETURN query \n\t\tSELECT u.grid_visualization_id, (max(u.accessibility_index) * (amenities_json -> x.category ->> \'weight\')::SMALLINT)::bigint AS accessibility_index  \n\t\tFROM (\n\t\t\tSELECT grid_visualization_ids, accessibility_indices[(translation_sensitivities ->> p.category)::integer\\:(translation_sensitivities ->> p.category)::integer][1\\:], \n\t\t\tp.category, p.name\n\t\t\tFROM customer.reached_poi_heatmap r, basic.study_area s, customer.poi_modified p   \n\t\t\tWHERE s.id = active_study_area_id \n\t\t\tAND ST_Intersects(p.geom, s.buffer_geom_heatmap)\n\t\t\tAND p.uid = r.poi_uid \n\t\t\tAND p.edit_type <> \'d\'\n\t\t\tAND p.scenario_id = scenario_id_input \n\t\t\tAND p.category IN (SELECT jsonb_array_elements_text(pois_more_entrances))\t\n\t\t)x, UNNEST(x.grid_visualization_ids, x.accessibility_indices) AS u(grid_visualization_id, accessibility_index)\n\t\tGROUP BY u.grid_visualization_id, x.category, x.name;  \n\tEND IF; \n\t\nEND;\n$function$;\n\n\n/*\nDROP TABLE IF EXISTS default_heatmap;\nCREATE TABLE default_heatmap AS \nWITH heatmap_grids AS \n(\n\tSELECT grid_visualization_id, sum(accessibility_index) \n\tFROM basic.prepare_heatmap_local_accessibility(\'{"supermarket"\\:{"sensitivity"\\:250000,"weight"\\:1}}\'::jsonb, 4, 1, \'default\',10) h\n\tGROUP BY grid_visualization_id \n)\nSELECT h.*, g.geom \nFROM basic.grid_visualization g, heatmap_grids h \nWHERE h.grid_visualization_id = g.id;  \n\nDROP TABLE IF EXISTS pois_to_explore; \nCREATE TABLE pois_to_explore AS \nSELECT * \nFROM basic.poi_aoi_visualization(4, 2, \'default\', ARRAY[0], 1)\nWHERE category = \'supermarket\'\n*/'
    )
    op.replace_entity(basic_prepare_heatmap_local_accessibility)

    basic_poi_aoi_visualization = PGFunction(
        schema="basic",
        signature="poi_aoi_visualization(user_id_input integer, scenario_id_input integer, active_upload_ids integer[], active_study_area_id integer)",
        definition="returns TABLE (id integer, uid TEXT, category TEXT, name TEXT, opening_hours TEXT, street TEXT, housenumber TEXT, zipcode TEXT, edit_type TEXT, geom geometry)\nLANGUAGE plpgsql\nAS $function$\nDECLARE \t\n\taoi_categories TEXT[]; \n\tpoi_categories jsonb = basic.poi_categories(user_id_input);\n\tdata_upload_poi_categories TEXT[] = '{}'::TEXT[];\n\tcombined_poi_categories text[];\n\texcluded_pois_id text[] := ARRAY[]::text[]; \n\tbuffer_geom_study_area geometry; \nBEGIN\n\tdata_upload_poi_categories = basic.poi_categories_data_uploads(user_id_input);\n\t\n\t/*Get combined poi categories*/\n\tSELECT ARRAY_AGG(c.category)\n\tINTO combined_poi_categories\n\tFROM \t\n\t(\n\t\tSELECT jsonb_array_elements_text(poi_categories -> 'true') category\n\t\tUNION ALL \n\t\tSELECT jsonb_array_elements_text(poi_categories -> 'false') category\n\t) c;\n\n\t/*Prepare AOI categories*/\n\tDROP TABLE IF EXISTS aoi_groups_default; \n\tCREATE TEMP TABLE aoi_groups_default AS \n\tWITH aoi_groups AS \n\t(\n\t\tSELECT jsonb_array_elements(basic.select_customization('aoi_groups')) aoi_group\n\t)\n\tSELECT jsonb_array_elements(p.aoi_group -> jsonb_object_keys(p.aoi_group) -> 'children') AS aoi_category \n\tFROM aoi_groups p;\n\n\tSELECT ARRAY_AGG(object_keys) AS aoi_category\n\tINTO aoi_categories\n\tFROM aoi_groups_default  p, LATERAL jsonb_object_keys(p.aoi_category) object_keys;  \n\t\n\t/*Check if POI scenario*/\n\tIF scenario_id_input <> 0 THEN \n\t\texcluded_pois_id = basic.modified_pois(scenario_id_input);\n\tEND IF; \n\t/*Buffer study area to avoid border effects*/\n\tbuffer_geom_study_area = (SELECT buffer_geom_heatmap AS geom FROM basic.study_area s WHERE s.id = active_study_area_id);\n\n    RETURN query\n   \tSELECT p.id, p.uid, p.category, p.name, p.opening_hours, p.street, p.housenumber, p.zipcode, NULL AS edit_type, p.geom  \n\tFROM basic.poi p\n\tWHERE p.category IN (SELECT UNNEST(combined_poi_categories))\n\tAND p.uid NOT IN (SELECT UNNEST(excluded_pois_id))\n\tAND p.geom && buffer_geom_study_area\n\tAND p.category NOT IN (SELECT UNNEST(data_upload_poi_categories));\n\t\n\tRETURN query \n\tSELECT p.id, p.uid, p.category, p.name, p.opening_hours, p.street, p.housenumber, p.zipcode, NULL AS edit_type, p.geom  \n\tFROM customer.poi_user p\n\tWHERE p.category IN (SELECT UNNEST(combined_poi_categories))\n\tAND p.data_upload_id IN (SELECT UNNEST(active_upload_ids))\n\tAND p.uid NOT IN (SELECT UNNEST(excluded_pois_id))\n\tAND p.geom && buffer_geom_study_area;\n\t\n\tRETURN query \n\t/*No scenarios nor aoi_user is implemented at the moment*/\n\tSELECT p.id, NULL, p.category, p.name, p.opening_hours, NULL AS street, NULL AS housenumber, NULL AS zipcode, NULL AS edit_type, p.geom\n\tFROM basic.aoi p \n\tWHERE p.category IN (SELECT UNNEST(aoi_categories))\n\tAND p.geom && buffer_geom_study_area; \n\t\n\tIF scenario_id_input <> 0 THEN \n\t   \tRETURN query \n\t   \tSELECT p.id, p.uid, p.category, p.name, p.opening_hours, p.street, p.housenumber, p.zipcode, p.edit_type, p.geom  \n\t\tFROM customer.poi_modified p\n\t\tWHERE p.category IN (SELECT UNNEST(combined_poi_categories))\n\t\tAND p.geom && buffer_geom_study_area\n\t\tAND p.scenario_id = scenario_id_input; \n\t   \t\n\t\tRETURN query\n\t   \tSELECT p.id, p.uid, p.category, p.name, p.opening_hours, p.street, p.housenumber, p.zipcode, 'd' AS edit_type, p.geom  \n\t\tFROM basic.poi p\n\t\tWHERE p.category IN (SELECT UNNEST(combined_poi_categories))\n\t\tAND p.uid IN (SELECT UNNEST(excluded_pois_id))\n\t\tAND p.geom && buffer_geom_study_area\n\t\tAND p.category NOT IN (SELECT UNNEST(data_upload_poi_categories));\n\t\n\t\tRETURN query \n\t\tSELECT p.id, p.uid, p.category, p.name, p.opening_hours, p.street, p.housenumber, p.zipcode, 'd' AS edit_type, p.geom  \n\t\tFROM customer.poi_user p\n\t\tWHERE p.category IN (SELECT UNNEST(combined_poi_categories))\n\t\tAND p.data_upload_id IN (SELECT UNNEST(active_upload_ids))\n\t\tAND p.uid IN (SELECT UNNEST(excluded_pois_id))\n\t\tAND p.geom && buffer_geom_study_area;\n\tEND IF; \nEND ;\n$function$;\n\n\n/*\nModus should be default, scenario, comparison\nSELECT * \nFROM basic.poi_aoi_visualization(4, 2, 'default', ARRAY[0], 1)\n*/"
    )
    op.replace_entity(basic_poi_aoi_visualization)

    public_alembic_version_postgres_insert = PGGrantTable(schema='public', table='alembic_version', columns=['version_num'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(public_alembic_version_postgres_insert)

    public_alembic_version_postgres_references = PGGrantTable(schema='public', table='alembic_version', columns=['version_num'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(public_alembic_version_postgres_references)

    public_alembic_version_postgres_select = PGGrantTable(schema='public', table='alembic_version', columns=['version_num'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(public_alembic_version_postgres_select)

    public_alembic_version_postgres_update = PGGrantTable(schema='public', table='alembic_version', columns=['version_num'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(public_alembic_version_postgres_update)

    public_distinct_intersection_existing_network_postgres_insert = PGGrantTable(schema='public', table='distinct_intersection_existing_network', columns=['geom', 'id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(public_distinct_intersection_existing_network_postgres_insert)

    public_distinct_intersection_existing_network_postgres_references = PGGrantTable(schema='public', table='distinct_intersection_existing_network', columns=['geom', 'id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(public_distinct_intersection_existing_network_postgres_references)

    public_distinct_intersection_existing_network_postgres_select = PGGrantTable(schema='public', table='distinct_intersection_existing_network', columns=['geom', 'id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(public_distinct_intersection_existing_network_postgres_select)

    public_distinct_intersection_existing_network_postgres_update = PGGrantTable(schema='public', table='distinct_intersection_existing_network', columns=['geom', 'id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(public_distinct_intersection_existing_network_postgres_update)

    public_new_pois_postgres_insert = PGGrantTable(schema='public', table='new_pois', columns=['category', 'creation_date', 'data_upload_id', 'edit_type', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'scenario_id', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(public_new_pois_postgres_insert)

    public_new_pois_postgres_references = PGGrantTable(schema='public', table='new_pois', columns=['category', 'creation_date', 'data_upload_id', 'edit_type', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'scenario_id', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(public_new_pois_postgres_references)

    public_new_pois_postgres_select = PGGrantTable(schema='public', table='new_pois', columns=['category', 'creation_date', 'data_upload_id', 'edit_type', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'scenario_id', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(public_new_pois_postgres_select)

    public_new_pois_postgres_update = PGGrantTable(schema='public', table='new_pois', columns=['category', 'creation_date', 'data_upload_id', 'edit_type', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'scenario_id', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(public_new_pois_postgres_update)

    public_test_postgres_insert = PGGrantTable(schema='public', table='test', columns=['category', 'geom', 'grid_visualization_ids', 'housenumber', 'id', 'name', 'opening_hours', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(public_test_postgres_insert)

    public_test_postgres_references = PGGrantTable(schema='public', table='test', columns=['category', 'geom', 'grid_visualization_ids', 'housenumber', 'id', 'name', 'opening_hours', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(public_test_postgres_references)

    public_test_postgres_select = PGGrantTable(schema='public', table='test', columns=['category', 'geom', 'grid_visualization_ids', 'housenumber', 'id', 'name', 'opening_hours', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(public_test_postgres_select)

    public_test_postgres_update = PGGrantTable(schema='public', table='test', columns=['category', 'geom', 'grid_visualization_ids', 'housenumber', 'id', 'name', 'opening_hours', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(public_test_postgres_update)

    public_test_grid_postgres_insert = PGGrantTable(schema='public', table='test_grid', columns=['geom', 'grid_visualization_id', 'sum'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(public_test_grid_postgres_insert)

    public_test_grid_postgres_references = PGGrantTable(schema='public', table='test_grid', columns=['geom', 'grid_visualization_id', 'sum'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(public_test_grid_postgres_references)

    public_test_grid_postgres_select = PGGrantTable(schema='public', table='test_grid', columns=['geom', 'grid_visualization_id', 'sum'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(public_test_grid_postgres_select)

    public_test_grid_postgres_update = PGGrantTable(schema='public', table='test_grid', columns=['geom', 'grid_visualization_id', 'sum'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(public_test_grid_postgres_update)

    public_test_postgres_delete = PGGrantTable(schema='public', table='test', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(public_test_postgres_delete)

    public_test_postgres_truncate = PGGrantTable(schema='public', table='test', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(public_test_postgres_truncate)

    public_test_postgres_trigger = PGGrantTable(schema='public', table='test', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(public_test_postgres_trigger)

    public_alembic_version_postgres_delete = PGGrantTable(schema='public', table='alembic_version', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(public_alembic_version_postgres_delete)

    public_alembic_version_postgres_truncate = PGGrantTable(schema='public', table='alembic_version', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(public_alembic_version_postgres_truncate)

    public_alembic_version_postgres_trigger = PGGrantTable(schema='public', table='alembic_version', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(public_alembic_version_postgres_trigger)

    public_test_grid_postgres_delete = PGGrantTable(schema='public', table='test_grid', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(public_test_grid_postgres_delete)

    public_test_grid_postgres_truncate = PGGrantTable(schema='public', table='test_grid', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(public_test_grid_postgres_truncate)

    public_test_grid_postgres_trigger = PGGrantTable(schema='public', table='test_grid', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(public_test_grid_postgres_trigger)

    public_new_pois_postgres_delete = PGGrantTable(schema='public', table='new_pois', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(public_new_pois_postgres_delete)

    public_new_pois_postgres_truncate = PGGrantTable(schema='public', table='new_pois', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(public_new_pois_postgres_truncate)

    public_new_pois_postgres_trigger = PGGrantTable(schema='public', table='new_pois', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(public_new_pois_postgres_trigger)

    public_distinct_intersection_existing_network_postgres_delete = PGGrantTable(schema='public', table='distinct_intersection_existing_network', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(public_distinct_intersection_existing_network_postgres_delete)

    public_distinct_intersection_existing_network_postgres_truncate = PGGrantTable(schema='public', table='distinct_intersection_existing_network', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(public_distinct_intersection_existing_network_postgres_truncate)

    public_distinct_intersection_existing_network_postgres_trigger = PGGrantTable(schema='public', table='distinct_intersection_existing_network', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(public_distinct_intersection_existing_network_postgres_trigger)

    customer_aoi_modified_postgres_insert = PGGrantTable(schema='customer', table='aoi_modified', columns=['category', 'creation_date', 'geom', 'id', 'name', 'opening_hours', 'scenario_id', 'tags', 'wheelchair'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(customer_aoi_modified_postgres_insert)

    customer_aoi_modified_postgres_references = PGGrantTable(schema='customer', table='aoi_modified', columns=['category', 'creation_date', 'geom', 'id', 'name', 'opening_hours', 'scenario_id', 'tags', 'wheelchair'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(customer_aoi_modified_postgres_references)

    customer_aoi_modified_postgres_select = PGGrantTable(schema='customer', table='aoi_modified', columns=['category', 'creation_date', 'geom', 'id', 'name', 'opening_hours', 'scenario_id', 'tags', 'wheelchair'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(customer_aoi_modified_postgres_select)

    customer_aoi_modified_postgres_update = PGGrantTable(schema='customer', table='aoi_modified', columns=['category', 'creation_date', 'geom', 'id', 'name', 'opening_hours', 'scenario_id', 'tags', 'wheelchair'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(customer_aoi_modified_postgres_update)

    customer_aoi_user_postgres_insert = PGGrantTable(schema='customer', table='aoi_user', columns=['category', 'creation_date', 'data_upload_id', 'geom', 'id', 'name', 'opening_hours', 'tags', 'wheelchair'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(customer_aoi_user_postgres_insert)

    customer_aoi_user_postgres_references = PGGrantTable(schema='customer', table='aoi_user', columns=['category', 'creation_date', 'data_upload_id', 'geom', 'id', 'name', 'opening_hours', 'tags', 'wheelchair'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(customer_aoi_user_postgres_references)

    customer_aoi_user_postgres_select = PGGrantTable(schema='customer', table='aoi_user', columns=['category', 'creation_date', 'data_upload_id', 'geom', 'id', 'name', 'opening_hours', 'tags', 'wheelchair'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(customer_aoi_user_postgres_select)

    customer_aoi_user_postgres_update = PGGrantTable(schema='customer', table='aoi_user', columns=['category', 'creation_date', 'data_upload_id', 'geom', 'id', 'name', 'opening_hours', 'tags', 'wheelchair'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(customer_aoi_user_postgres_update)

    customer_building_modified_postgres_insert = PGGrantTable(schema='customer', table='building_modified', columns=['amenity', 'area', 'building_id', 'building_levels', 'building_levels_residential', 'building_type', 'creation_date', 'edit_type', 'geom', 'gross_floor_area_residential', 'height', 'housenumber', 'id', 'population', 'residential_status', 'roof_levels', 'scenario_id', 'street'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(customer_building_modified_postgres_insert)

    customer_building_modified_postgres_references = PGGrantTable(schema='customer', table='building_modified', columns=['amenity', 'area', 'building_id', 'building_levels', 'building_levels_residential', 'building_type', 'creation_date', 'edit_type', 'geom', 'gross_floor_area_residential', 'height', 'housenumber', 'id', 'population', 'residential_status', 'roof_levels', 'scenario_id', 'street'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(customer_building_modified_postgres_references)

    customer_building_modified_postgres_select = PGGrantTable(schema='customer', table='building_modified', columns=['amenity', 'area', 'building_id', 'building_levels', 'building_levels_residential', 'building_type', 'creation_date', 'edit_type', 'geom', 'gross_floor_area_residential', 'height', 'housenumber', 'id', 'population', 'residential_status', 'roof_levels', 'scenario_id', 'street'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(customer_building_modified_postgres_select)

    customer_building_modified_postgres_update = PGGrantTable(schema='customer', table='building_modified', columns=['amenity', 'area', 'building_id', 'building_levels', 'building_levels_residential', 'building_type', 'creation_date', 'edit_type', 'geom', 'gross_floor_area_residential', 'height', 'housenumber', 'id', 'population', 'residential_status', 'roof_levels', 'scenario_id', 'street'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(customer_building_modified_postgres_update)

    customer_customization_postgres_insert = PGGrantTable(schema='customer', table='customization', columns=['id', 'role_id', 'setting', 'type'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(customer_customization_postgres_insert)

    customer_customization_postgres_references = PGGrantTable(schema='customer', table='customization', columns=['id', 'role_id', 'setting', 'type'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(customer_customization_postgres_references)

    customer_customization_postgres_select = PGGrantTable(schema='customer', table='customization', columns=['id', 'role_id', 'setting', 'type'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(customer_customization_postgres_select)

    customer_customization_postgres_update = PGGrantTable(schema='customer', table='customization', columns=['id', 'role_id', 'setting', 'type'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(customer_customization_postgres_update)

    customer_data_upload_postgres_insert = PGGrantTable(schema='customer', table='data_upload', columns=['creation_date', 'data_type', 'id', 'reached_poi_heatmap_computed', 'study_area_id', 'upload_grid_ids', 'upload_size', 'upload_type', 'user_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(customer_data_upload_postgres_insert)

    customer_data_upload_postgres_references = PGGrantTable(schema='customer', table='data_upload', columns=['creation_date', 'data_type', 'id', 'reached_poi_heatmap_computed', 'study_area_id', 'upload_grid_ids', 'upload_size', 'upload_type', 'user_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(customer_data_upload_postgres_references)

    customer_data_upload_postgres_select = PGGrantTable(schema='customer', table='data_upload', columns=['creation_date', 'data_type', 'id', 'reached_poi_heatmap_computed', 'study_area_id', 'upload_grid_ids', 'upload_size', 'upload_type', 'user_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(customer_data_upload_postgres_select)

    customer_data_upload_postgres_update = PGGrantTable(schema='customer', table='data_upload', columns=['creation_date', 'data_type', 'id', 'reached_poi_heatmap_computed', 'study_area_id', 'upload_grid_ids', 'upload_size', 'upload_type', 'user_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(customer_data_upload_postgres_update)

    customer_isochrone_calculation_postgres_insert = PGGrantTable(schema='customer', table='isochrone_calculation', columns=['calculation_type', 'creation_date', 'id', 'modus', 'parent_id', 'routing_profile', 'scenario_id', 'speed', 'starting_point', 'user_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(customer_isochrone_calculation_postgres_insert)

    customer_isochrone_calculation_postgres_references = PGGrantTable(schema='customer', table='isochrone_calculation', columns=['calculation_type', 'creation_date', 'id', 'modus', 'parent_id', 'routing_profile', 'scenario_id', 'speed', 'starting_point', 'user_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(customer_isochrone_calculation_postgres_references)

    customer_isochrone_calculation_postgres_select = PGGrantTable(schema='customer', table='isochrone_calculation', columns=['calculation_type', 'creation_date', 'id', 'modus', 'parent_id', 'routing_profile', 'scenario_id', 'speed', 'starting_point', 'user_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(customer_isochrone_calculation_postgres_select)

    customer_isochrone_calculation_postgres_update = PGGrantTable(schema='customer', table='isochrone_calculation', columns=['calculation_type', 'creation_date', 'id', 'modus', 'parent_id', 'routing_profile', 'scenario_id', 'speed', 'starting_point', 'user_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(customer_isochrone_calculation_postgres_update)

    customer_isochrone_feature_postgres_insert = PGGrantTable(schema='customer', table='isochrone_feature', columns=['geom', 'id', 'isochrone_calculation_id', 'reached_opportunities', 'step'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(customer_isochrone_feature_postgres_insert)

    customer_isochrone_feature_postgres_references = PGGrantTable(schema='customer', table='isochrone_feature', columns=['geom', 'id', 'isochrone_calculation_id', 'reached_opportunities', 'step'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(customer_isochrone_feature_postgres_references)

    customer_isochrone_feature_postgres_select = PGGrantTable(schema='customer', table='isochrone_feature', columns=['geom', 'id', 'isochrone_calculation_id', 'reached_opportunities', 'step'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(customer_isochrone_feature_postgres_select)

    customer_isochrone_feature_postgres_update = PGGrantTable(schema='customer', table='isochrone_feature', columns=['geom', 'id', 'isochrone_calculation_id', 'reached_opportunities', 'step'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(customer_isochrone_feature_postgres_update)

    customer_layer_library_postgres_insert = PGGrantTable(schema='customer', table='layer_library', columns=['access_token', 'date', 'date_1', 'id', 'legend_urls', 'map_attribution', 'max_resolution', 'min_resolution', 'name', 'source', 'source_1', 'special_attribute', 'style_library_name', 'type', 'url'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(customer_layer_library_postgres_insert)

    customer_layer_library_postgres_references = PGGrantTable(schema='customer', table='layer_library', columns=['access_token', 'date', 'date_1', 'id', 'legend_urls', 'map_attribution', 'max_resolution', 'min_resolution', 'name', 'source', 'source_1', 'special_attribute', 'style_library_name', 'type', 'url'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(customer_layer_library_postgres_references)

    customer_layer_library_postgres_select = PGGrantTable(schema='customer', table='layer_library', columns=['access_token', 'date', 'date_1', 'id', 'legend_urls', 'map_attribution', 'max_resolution', 'min_resolution', 'name', 'source', 'source_1', 'special_attribute', 'style_library_name', 'type', 'url'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(customer_layer_library_postgres_select)

    customer_layer_library_postgres_update = PGGrantTable(schema='customer', table='layer_library', columns=['access_token', 'date', 'date_1', 'id', 'legend_urls', 'map_attribution', 'max_resolution', 'min_resolution', 'name', 'source', 'source_1', 'special_attribute', 'style_library_name', 'type', 'url'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(customer_layer_library_postgres_update)

    customer_layer_source_postgres_insert = PGGrantTable(schema='customer', table='layer_source', columns=['id', 'name'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(customer_layer_source_postgres_insert)

    customer_layer_source_postgres_references = PGGrantTable(schema='customer', table='layer_source', columns=['id', 'name'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(customer_layer_source_postgres_references)

    customer_layer_source_postgres_select = PGGrantTable(schema='customer', table='layer_source', columns=['id', 'name'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(customer_layer_source_postgres_select)

    customer_layer_source_postgres_update = PGGrantTable(schema='customer', table='layer_source', columns=['id', 'name'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(customer_layer_source_postgres_update)

    customer_organization_postgres_insert = PGGrantTable(schema='customer', table='organization', columns=['creation_date', 'id', 'name'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(customer_organization_postgres_insert)

    customer_organization_postgres_references = PGGrantTable(schema='customer', table='organization', columns=['creation_date', 'id', 'name'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(customer_organization_postgres_references)

    customer_organization_postgres_select = PGGrantTable(schema='customer', table='organization', columns=['creation_date', 'id', 'name'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(customer_organization_postgres_select)

    customer_organization_postgres_update = PGGrantTable(schema='customer', table='organization', columns=['creation_date', 'id', 'name'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(customer_organization_postgres_update)

    customer_poi_modified_postgres_insert = PGGrantTable(schema='customer', table='poi_modified', columns=['category', 'creation_date', 'data_upload_id', 'edit_type', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'scenario_id', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(customer_poi_modified_postgres_insert)

    customer_poi_modified_postgres_references = PGGrantTable(schema='customer', table='poi_modified', columns=['category', 'creation_date', 'data_upload_id', 'edit_type', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'scenario_id', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(customer_poi_modified_postgres_references)

    customer_poi_modified_postgres_select = PGGrantTable(schema='customer', table='poi_modified', columns=['category', 'creation_date', 'data_upload_id', 'edit_type', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'scenario_id', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(customer_poi_modified_postgres_select)

    customer_poi_modified_postgres_update = PGGrantTable(schema='customer', table='poi_modified', columns=['category', 'creation_date', 'data_upload_id', 'edit_type', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'scenario_id', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(customer_poi_modified_postgres_update)

    customer_poi_user_postgres_insert = PGGrantTable(schema='customer', table='poi_user', columns=['category', 'creation_date', 'data_upload_id', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(customer_poi_user_postgres_insert)

    customer_poi_user_postgres_references = PGGrantTable(schema='customer', table='poi_user', columns=['category', 'creation_date', 'data_upload_id', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(customer_poi_user_postgres_references)

    customer_poi_user_postgres_select = PGGrantTable(schema='customer', table='poi_user', columns=['category', 'creation_date', 'data_upload_id', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(customer_poi_user_postgres_select)

    customer_poi_user_postgres_update = PGGrantTable(schema='customer', table='poi_user', columns=['category', 'creation_date', 'data_upload_id', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(customer_poi_user_postgres_update)

    customer_population_modified_postgres_insert = PGGrantTable(schema='customer', table='population_modified', columns=['building_modified_id', 'creation_date', 'geom', 'id', 'population', 'scenario_id', 'sub_study_area_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(customer_population_modified_postgres_insert)

    customer_population_modified_postgres_references = PGGrantTable(schema='customer', table='population_modified', columns=['building_modified_id', 'creation_date', 'geom', 'id', 'population', 'scenario_id', 'sub_study_area_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(customer_population_modified_postgres_references)

    customer_population_modified_postgres_select = PGGrantTable(schema='customer', table='population_modified', columns=['building_modified_id', 'creation_date', 'geom', 'id', 'population', 'scenario_id', 'sub_study_area_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(customer_population_modified_postgres_select)

    customer_population_modified_postgres_update = PGGrantTable(schema='customer', table='population_modified', columns=['building_modified_id', 'creation_date', 'geom', 'id', 'population', 'scenario_id', 'sub_study_area_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(customer_population_modified_postgres_update)

    customer_reached_edge_full_heatmap_postgres_insert = PGGrantTable(schema='customer', table='reached_edge_full_heatmap', columns=['edge_id', 'geom', 'id', 'scenario_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(customer_reached_edge_full_heatmap_postgres_insert)

    customer_reached_edge_full_heatmap_postgres_references = PGGrantTable(schema='customer', table='reached_edge_full_heatmap', columns=['edge_id', 'geom', 'id', 'scenario_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(customer_reached_edge_full_heatmap_postgres_references)

    customer_reached_edge_full_heatmap_postgres_select = PGGrantTable(schema='customer', table='reached_edge_full_heatmap', columns=['edge_id', 'geom', 'id', 'scenario_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(customer_reached_edge_full_heatmap_postgres_select)

    customer_reached_edge_full_heatmap_postgres_update = PGGrantTable(schema='customer', table='reached_edge_full_heatmap', columns=['edge_id', 'geom', 'id', 'scenario_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(customer_reached_edge_full_heatmap_postgres_update)

    customer_reached_edge_heatmap_grid_calculation_postgres_insert = PGGrantTable(schema='customer', table='reached_edge_heatmap_grid_calculation', columns=['edge_type', 'end_cost', 'end_perc', 'grid_calculation_id', 'id', 'reached_edge_heatmap_id', 'start_cost', 'start_perc'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(customer_reached_edge_heatmap_grid_calculation_postgres_insert)

    customer_reached_edge_heatmap_grid_calculation_postgres_references = PGGrantTable(schema='customer', table='reached_edge_heatmap_grid_calculation', columns=['edge_type', 'end_cost', 'end_perc', 'grid_calculation_id', 'id', 'reached_edge_heatmap_id', 'start_cost', 'start_perc'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(customer_reached_edge_heatmap_grid_calculation_postgres_references)

    customer_reached_edge_heatmap_grid_calculation_postgres_select = PGGrantTable(schema='customer', table='reached_edge_heatmap_grid_calculation', columns=['edge_type', 'end_cost', 'end_perc', 'grid_calculation_id', 'id', 'reached_edge_heatmap_id', 'start_cost', 'start_perc'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(customer_reached_edge_heatmap_grid_calculation_postgres_select)

    customer_reached_edge_heatmap_grid_calculation_postgres_update = PGGrantTable(schema='customer', table='reached_edge_heatmap_grid_calculation', columns=['edge_type', 'end_cost', 'end_perc', 'grid_calculation_id', 'id', 'reached_edge_heatmap_id', 'start_cost', 'start_perc'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(customer_reached_edge_heatmap_grid_calculation_postgres_update)

    customer_reached_poi_heatmap_postgres_insert = PGGrantTable(schema='customer', table='reached_poi_heatmap', columns=['accessibility_indices', 'costs', 'data_upload_id', 'grid_visualization_ids', 'id', 'poi_uid', 'scenario_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(customer_reached_poi_heatmap_postgres_insert)

    customer_reached_poi_heatmap_postgres_references = PGGrantTable(schema='customer', table='reached_poi_heatmap', columns=['accessibility_indices', 'costs', 'data_upload_id', 'grid_visualization_ids', 'id', 'poi_uid', 'scenario_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(customer_reached_poi_heatmap_postgres_references)

    customer_reached_poi_heatmap_postgres_select = PGGrantTable(schema='customer', table='reached_poi_heatmap', columns=['accessibility_indices', 'costs', 'data_upload_id', 'grid_visualization_ids', 'id', 'poi_uid', 'scenario_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(customer_reached_poi_heatmap_postgres_select)

    customer_reached_poi_heatmap_postgres_update = PGGrantTable(schema='customer', table='reached_poi_heatmap', columns=['accessibility_indices', 'costs', 'data_upload_id', 'grid_visualization_ids', 'id', 'poi_uid', 'scenario_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(customer_reached_poi_heatmap_postgres_update)

    customer_role_postgres_insert = PGGrantTable(schema='customer', table='role', columns=['id', 'name'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(customer_role_postgres_insert)

    customer_role_postgres_references = PGGrantTable(schema='customer', table='role', columns=['id', 'name'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(customer_role_postgres_references)

    customer_role_postgres_select = PGGrantTable(schema='customer', table='role', columns=['id', 'name'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(customer_role_postgres_select)

    customer_role_postgres_update = PGGrantTable(schema='customer', table='role', columns=['id', 'name'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(customer_role_postgres_update)

    customer_scenario_postgres_insert = PGGrantTable(schema='customer', table='scenario', columns=['creation_date', 'data_upload_ids', 'id', 'routing_heatmap_computed', 'scenario_name', 'study_area_id', 'user_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(customer_scenario_postgres_insert)

    customer_scenario_postgres_references = PGGrantTable(schema='customer', table='scenario', columns=['creation_date', 'data_upload_ids', 'id', 'routing_heatmap_computed', 'scenario_name', 'study_area_id', 'user_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(customer_scenario_postgres_references)

    customer_scenario_postgres_select = PGGrantTable(schema='customer', table='scenario', columns=['creation_date', 'data_upload_ids', 'id', 'routing_heatmap_computed', 'scenario_name', 'study_area_id', 'user_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(customer_scenario_postgres_select)

    customer_scenario_postgres_update = PGGrantTable(schema='customer', table='scenario', columns=['creation_date', 'data_upload_ids', 'id', 'routing_heatmap_computed', 'scenario_name', 'study_area_id', 'user_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(customer_scenario_postgres_update)

    customer_style_library_postgres_insert = PGGrantTable(schema='customer', table='style_library', columns=['id', 'name', 'style', 'translation'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(customer_style_library_postgres_insert)

    customer_style_library_postgres_references = PGGrantTable(schema='customer', table='style_library', columns=['id', 'name', 'style', 'translation'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(customer_style_library_postgres_references)

    customer_style_library_postgres_select = PGGrantTable(schema='customer', table='style_library', columns=['id', 'name', 'style', 'translation'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(customer_style_library_postgres_select)

    customer_style_library_postgres_update = PGGrantTable(schema='customer', table='style_library', columns=['id', 'name', 'style', 'translation'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(customer_style_library_postgres_update)

    customer_user_postgres_insert = PGGrantTable(schema='customer', table='user', columns=['active_data_upload_ids', 'active_study_area_id', 'creation_date', 'email', 'hashed_password', 'id', 'is_active', 'language_preference', 'limit_scenarios', 'name', 'organization_id', 'storage', 'surname'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(customer_user_postgres_insert)

    customer_user_postgres_references = PGGrantTable(schema='customer', table='user', columns=['active_data_upload_ids', 'active_study_area_id', 'creation_date', 'email', 'hashed_password', 'id', 'is_active', 'language_preference', 'limit_scenarios', 'name', 'organization_id', 'storage', 'surname'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(customer_user_postgres_references)

    customer_user_postgres_select = PGGrantTable(schema='customer', table='user', columns=['active_data_upload_ids', 'active_study_area_id', 'creation_date', 'email', 'hashed_password', 'id', 'is_active', 'language_preference', 'limit_scenarios', 'name', 'organization_id', 'storage', 'surname'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(customer_user_postgres_select)

    customer_user_postgres_update = PGGrantTable(schema='customer', table='user', columns=['active_data_upload_ids', 'active_study_area_id', 'creation_date', 'email', 'hashed_password', 'id', 'is_active', 'language_preference', 'limit_scenarios', 'name', 'organization_id', 'storage', 'surname'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(customer_user_postgres_update)

    customer_user_customization_postgres_insert = PGGrantTable(schema='customer', table='user_customization', columns=['creation_date', 'customization_id', 'id', 'setting', 'study_area_id', 'user_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(customer_user_customization_postgres_insert)

    customer_user_customization_postgres_references = PGGrantTable(schema='customer', table='user_customization', columns=['creation_date', 'customization_id', 'id', 'setting', 'study_area_id', 'user_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(customer_user_customization_postgres_references)

    customer_user_customization_postgres_select = PGGrantTable(schema='customer', table='user_customization', columns=['creation_date', 'customization_id', 'id', 'setting', 'study_area_id', 'user_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(customer_user_customization_postgres_select)

    customer_user_customization_postgres_update = PGGrantTable(schema='customer', table='user_customization', columns=['creation_date', 'customization_id', 'id', 'setting', 'study_area_id', 'user_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(customer_user_customization_postgres_update)

    customer_user_role_postgres_insert = PGGrantTable(schema='customer', table='user_role', columns=['id', 'role_id', 'user_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(customer_user_role_postgres_insert)

    customer_user_role_postgres_references = PGGrantTable(schema='customer', table='user_role', columns=['id', 'role_id', 'user_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(customer_user_role_postgres_references)

    customer_user_role_postgres_select = PGGrantTable(schema='customer', table='user_role', columns=['id', 'role_id', 'user_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(customer_user_role_postgres_select)

    customer_user_role_postgres_update = PGGrantTable(schema='customer', table='user_role', columns=['id', 'role_id', 'user_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(customer_user_role_postgres_update)

    customer_user_study_area_postgres_insert = PGGrantTable(schema='customer', table='user_study_area', columns=['creation_date', 'id', 'study_area_id', 'user_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(customer_user_study_area_postgres_insert)

    customer_user_study_area_postgres_references = PGGrantTable(schema='customer', table='user_study_area', columns=['creation_date', 'id', 'study_area_id', 'user_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(customer_user_study_area_postgres_references)

    customer_user_study_area_postgres_select = PGGrantTable(schema='customer', table='user_study_area', columns=['creation_date', 'id', 'study_area_id', 'user_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(customer_user_study_area_postgres_select)

    customer_user_study_area_postgres_update = PGGrantTable(schema='customer', table='user_study_area', columns=['creation_date', 'id', 'study_area_id', 'user_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(customer_user_study_area_postgres_update)

    customer_way_modified_postgres_insert = PGGrantTable(schema='customer', table='way_modified', columns=['bicycle', 'bicycle_road', 'class_id', 'creation_date', 'crossing', 'crossing_delay_category', 'cycleway', 'death_end', 'edit_type', 'foot', 'geom', 'highway', 'id', 'impedance_surface', 'incline', 'incline_percent', 'lanes', 'lit', 'lit_classified', 'maxspeed_backward', 'maxspeed_forward', 'name', 'one_link_crossing', 'one_way', 'oneway', 'osm_id', 'parking', 'parking_lane_both', 'parking_lane_left', 'parking_lane_right', 'rs_imp', 's_imp', 'scenario_id', 'segregated', 'sidewalk', 'sidewalk_both_width', 'sidewalk_left_width', 'sidewalk_right_width', 'smoothness', 'surface', 'way_id', 'way_type', 'wheelchair', 'wheelchair_classified', 'width'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(customer_way_modified_postgres_insert)

    customer_way_modified_postgres_references = PGGrantTable(schema='customer', table='way_modified', columns=['bicycle', 'bicycle_road', 'class_id', 'creation_date', 'crossing', 'crossing_delay_category', 'cycleway', 'death_end', 'edit_type', 'foot', 'geom', 'highway', 'id', 'impedance_surface', 'incline', 'incline_percent', 'lanes', 'lit', 'lit_classified', 'maxspeed_backward', 'maxspeed_forward', 'name', 'one_link_crossing', 'one_way', 'oneway', 'osm_id', 'parking', 'parking_lane_both', 'parking_lane_left', 'parking_lane_right', 'rs_imp', 's_imp', 'scenario_id', 'segregated', 'sidewalk', 'sidewalk_both_width', 'sidewalk_left_width', 'sidewalk_right_width', 'smoothness', 'surface', 'way_id', 'way_type', 'wheelchair', 'wheelchair_classified', 'width'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(customer_way_modified_postgres_references)

    customer_way_modified_postgres_select = PGGrantTable(schema='customer', table='way_modified', columns=['bicycle', 'bicycle_road', 'class_id', 'creation_date', 'crossing', 'crossing_delay_category', 'cycleway', 'death_end', 'edit_type', 'foot', 'geom', 'highway', 'id', 'impedance_surface', 'incline', 'incline_percent', 'lanes', 'lit', 'lit_classified', 'maxspeed_backward', 'maxspeed_forward', 'name', 'one_link_crossing', 'one_way', 'oneway', 'osm_id', 'parking', 'parking_lane_both', 'parking_lane_left', 'parking_lane_right', 'rs_imp', 's_imp', 'scenario_id', 'segregated', 'sidewalk', 'sidewalk_both_width', 'sidewalk_left_width', 'sidewalk_right_width', 'smoothness', 'surface', 'way_id', 'way_type', 'wheelchair', 'wheelchair_classified', 'width'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(customer_way_modified_postgres_select)

    customer_way_modified_postgres_update = PGGrantTable(schema='customer', table='way_modified', columns=['bicycle', 'bicycle_road', 'class_id', 'creation_date', 'crossing', 'crossing_delay_category', 'cycleway', 'death_end', 'edit_type', 'foot', 'geom', 'highway', 'id', 'impedance_surface', 'incline', 'incline_percent', 'lanes', 'lit', 'lit_classified', 'maxspeed_backward', 'maxspeed_forward', 'name', 'one_link_crossing', 'one_way', 'oneway', 'osm_id', 'parking', 'parking_lane_both', 'parking_lane_left', 'parking_lane_right', 'rs_imp', 's_imp', 'scenario_id', 'segregated', 'sidewalk', 'sidewalk_both_width', 'sidewalk_left_width', 'sidewalk_right_width', 'smoothness', 'surface', 'way_id', 'way_type', 'wheelchair', 'wheelchair_classified', 'width'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(customer_way_modified_postgres_update)

    customer_aoi_user_postgres_delete = PGGrantTable(schema='customer', table='aoi_user', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(customer_aoi_user_postgres_delete)

    customer_aoi_user_postgres_truncate = PGGrantTable(schema='customer', table='aoi_user', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(customer_aoi_user_postgres_truncate)

    customer_aoi_user_postgres_trigger = PGGrantTable(schema='customer', table='aoi_user', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(customer_aoi_user_postgres_trigger)

    customer_aoi_modified_postgres_delete = PGGrantTable(schema='customer', table='aoi_modified', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(customer_aoi_modified_postgres_delete)

    customer_aoi_modified_postgres_truncate = PGGrantTable(schema='customer', table='aoi_modified', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(customer_aoi_modified_postgres_truncate)

    customer_aoi_modified_postgres_trigger = PGGrantTable(schema='customer', table='aoi_modified', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(customer_aoi_modified_postgres_trigger)

    customer_building_modified_postgres_delete = PGGrantTable(schema='customer', table='building_modified', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(customer_building_modified_postgres_delete)

    customer_building_modified_postgres_truncate = PGGrantTable(schema='customer', table='building_modified', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(customer_building_modified_postgres_truncate)

    customer_building_modified_postgres_trigger = PGGrantTable(schema='customer', table='building_modified', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(customer_building_modified_postgres_trigger)

    customer_isochrone_calculation_postgres_delete = PGGrantTable(schema='customer', table='isochrone_calculation', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(customer_isochrone_calculation_postgres_delete)

    customer_isochrone_calculation_postgres_truncate = PGGrantTable(schema='customer', table='isochrone_calculation', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(customer_isochrone_calculation_postgres_truncate)

    customer_isochrone_calculation_postgres_trigger = PGGrantTable(schema='customer', table='isochrone_calculation', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(customer_isochrone_calculation_postgres_trigger)

    customer_layer_source_postgres_delete = PGGrantTable(schema='customer', table='layer_source', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(customer_layer_source_postgres_delete)

    customer_layer_source_postgres_truncate = PGGrantTable(schema='customer', table='layer_source', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(customer_layer_source_postgres_truncate)

    customer_layer_source_postgres_trigger = PGGrantTable(schema='customer', table='layer_source', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(customer_layer_source_postgres_trigger)

    customer_organization_postgres_delete = PGGrantTable(schema='customer', table='organization', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(customer_organization_postgres_delete)

    customer_organization_postgres_truncate = PGGrantTable(schema='customer', table='organization', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(customer_organization_postgres_truncate)

    customer_organization_postgres_trigger = PGGrantTable(schema='customer', table='organization', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(customer_organization_postgres_trigger)

    customer_data_upload_postgres_delete = PGGrantTable(schema='customer', table='data_upload', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(customer_data_upload_postgres_delete)

    customer_data_upload_postgres_truncate = PGGrantTable(schema='customer', table='data_upload', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(customer_data_upload_postgres_truncate)

    customer_data_upload_postgres_trigger = PGGrantTable(schema='customer', table='data_upload', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(customer_data_upload_postgres_trigger)

    customer_poi_modified_postgres_delete = PGGrantTable(schema='customer', table='poi_modified', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(customer_poi_modified_postgres_delete)

    customer_poi_modified_postgres_truncate = PGGrantTable(schema='customer', table='poi_modified', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(customer_poi_modified_postgres_truncate)

    customer_poi_modified_postgres_trigger = PGGrantTable(schema='customer', table='poi_modified', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(customer_poi_modified_postgres_trigger)

    customer_customization_postgres_delete = PGGrantTable(schema='customer', table='customization', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(customer_customization_postgres_delete)

    customer_customization_postgres_truncate = PGGrantTable(schema='customer', table='customization', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(customer_customization_postgres_truncate)

    customer_customization_postgres_trigger = PGGrantTable(schema='customer', table='customization', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(customer_customization_postgres_trigger)

    customer_poi_user_postgres_delete = PGGrantTable(schema='customer', table='poi_user', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(customer_poi_user_postgres_delete)

    customer_poi_user_postgres_truncate = PGGrantTable(schema='customer', table='poi_user', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(customer_poi_user_postgres_truncate)

    customer_poi_user_postgres_trigger = PGGrantTable(schema='customer', table='poi_user', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(customer_poi_user_postgres_trigger)

    customer_population_modified_postgres_delete = PGGrantTable(schema='customer', table='population_modified', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(customer_population_modified_postgres_delete)

    customer_population_modified_postgres_truncate = PGGrantTable(schema='customer', table='population_modified', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(customer_population_modified_postgres_truncate)

    customer_population_modified_postgres_trigger = PGGrantTable(schema='customer', table='population_modified', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(customer_population_modified_postgres_trigger)

    customer_reached_poi_heatmap_postgres_delete = PGGrantTable(schema='customer', table='reached_poi_heatmap', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(customer_reached_poi_heatmap_postgres_delete)

    customer_reached_poi_heatmap_postgres_truncate = PGGrantTable(schema='customer', table='reached_poi_heatmap', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(customer_reached_poi_heatmap_postgres_truncate)

    customer_reached_poi_heatmap_postgres_trigger = PGGrantTable(schema='customer', table='reached_poi_heatmap', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(customer_reached_poi_heatmap_postgres_trigger)

    customer_role_postgres_delete = PGGrantTable(schema='customer', table='role', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(customer_role_postgres_delete)

    customer_role_postgres_truncate = PGGrantTable(schema='customer', table='role', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(customer_role_postgres_truncate)

    customer_role_postgres_trigger = PGGrantTable(schema='customer', table='role', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(customer_role_postgres_trigger)

    customer_user_customization_postgres_delete = PGGrantTable(schema='customer', table='user_customization', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(customer_user_customization_postgres_delete)

    customer_user_customization_postgres_truncate = PGGrantTable(schema='customer', table='user_customization', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(customer_user_customization_postgres_truncate)

    customer_user_customization_postgres_trigger = PGGrantTable(schema='customer', table='user_customization', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(customer_user_customization_postgres_trigger)

    customer_style_library_postgres_delete = PGGrantTable(schema='customer', table='style_library', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(customer_style_library_postgres_delete)

    customer_style_library_postgres_truncate = PGGrantTable(schema='customer', table='style_library', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(customer_style_library_postgres_truncate)

    customer_style_library_postgres_trigger = PGGrantTable(schema='customer', table='style_library', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(customer_style_library_postgres_trigger)

    customer_user_role_postgres_delete = PGGrantTable(schema='customer', table='user_role', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(customer_user_role_postgres_delete)

    customer_user_role_postgres_truncate = PGGrantTable(schema='customer', table='user_role', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(customer_user_role_postgres_truncate)

    customer_user_role_postgres_trigger = PGGrantTable(schema='customer', table='user_role', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(customer_user_role_postgres_trigger)

    customer_scenario_postgres_delete = PGGrantTable(schema='customer', table='scenario', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(customer_scenario_postgres_delete)

    customer_scenario_postgres_truncate = PGGrantTable(schema='customer', table='scenario', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(customer_scenario_postgres_truncate)

    customer_scenario_postgres_trigger = PGGrantTable(schema='customer', table='scenario', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(customer_scenario_postgres_trigger)

    customer_way_modified_postgres_delete = PGGrantTable(schema='customer', table='way_modified', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(customer_way_modified_postgres_delete)

    customer_way_modified_postgres_truncate = PGGrantTable(schema='customer', table='way_modified', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(customer_way_modified_postgres_truncate)

    customer_way_modified_postgres_trigger = PGGrantTable(schema='customer', table='way_modified', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(customer_way_modified_postgres_trigger)

    customer_user_postgres_delete = PGGrantTable(schema='customer', table='user', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(customer_user_postgres_delete)

    customer_user_postgres_truncate = PGGrantTable(schema='customer', table='user', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(customer_user_postgres_truncate)

    customer_user_postgres_trigger = PGGrantTable(schema='customer', table='user', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(customer_user_postgres_trigger)

    customer_user_study_area_postgres_delete = PGGrantTable(schema='customer', table='user_study_area', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(customer_user_study_area_postgres_delete)

    customer_user_study_area_postgres_truncate = PGGrantTable(schema='customer', table='user_study_area', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(customer_user_study_area_postgres_truncate)

    customer_user_study_area_postgres_trigger = PGGrantTable(schema='customer', table='user_study_area', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(customer_user_study_area_postgres_trigger)

    customer_isochrone_feature_postgres_delete = PGGrantTable(schema='customer', table='isochrone_feature', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(customer_isochrone_feature_postgres_delete)

    customer_isochrone_feature_postgres_truncate = PGGrantTable(schema='customer', table='isochrone_feature', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(customer_isochrone_feature_postgres_truncate)

    customer_isochrone_feature_postgres_trigger = PGGrantTable(schema='customer', table='isochrone_feature', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(customer_isochrone_feature_postgres_trigger)

    customer_layer_library_postgres_delete = PGGrantTable(schema='customer', table='layer_library', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(customer_layer_library_postgres_delete)

    customer_layer_library_postgres_truncate = PGGrantTable(schema='customer', table='layer_library', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(customer_layer_library_postgres_truncate)

    customer_layer_library_postgres_trigger = PGGrantTable(schema='customer', table='layer_library', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(customer_layer_library_postgres_trigger)

    customer_reached_edge_full_heatmap_postgres_delete = PGGrantTable(schema='customer', table='reached_edge_full_heatmap', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(customer_reached_edge_full_heatmap_postgres_delete)

    customer_reached_edge_full_heatmap_postgres_truncate = PGGrantTable(schema='customer', table='reached_edge_full_heatmap', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(customer_reached_edge_full_heatmap_postgres_truncate)

    customer_reached_edge_full_heatmap_postgres_trigger = PGGrantTable(schema='customer', table='reached_edge_full_heatmap', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(customer_reached_edge_full_heatmap_postgres_trigger)

    customer_reached_edge_heatmap_grid_calculation_postgres_delete = PGGrantTable(schema='customer', table='reached_edge_heatmap_grid_calculation', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(customer_reached_edge_heatmap_grid_calculation_postgres_delete)

    customer_reached_edge_heatmap_grid_calculation_postgres_truncate = PGGrantTable(schema='customer', table='reached_edge_heatmap_grid_calculation', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(customer_reached_edge_heatmap_grid_calculation_postgres_truncate)

    customer_reached_edge_heatmap_grid_calculation_postgres_trigger = PGGrantTable(schema='customer', table='reached_edge_heatmap_grid_calculation', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(customer_reached_edge_heatmap_grid_calculation_postgres_trigger)

    extra_accidents_postgres_insert = PGGrantTable(schema='extra', table='accidents', columns=['geom', 'gid', 'istfuss', 'istgkfz', 'istkrad', 'istpkw', 'istrad', 'istsonstig', 'linrefx', 'linrefy', 'objectid', 'strzustand', 'uart', 'ugemeinde', 'ujahr', 'ukategorie', 'ukreis', 'uland', 'ulichtverh', 'umonat', 'uregbez', 'ustunde', 'utyp1', 'uwochentag', 'xgcswgs84', 'ygcswgs84'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(extra_accidents_postgres_insert)

    extra_accidents_postgres_references = PGGrantTable(schema='extra', table='accidents', columns=['geom', 'gid', 'istfuss', 'istgkfz', 'istkrad', 'istpkw', 'istrad', 'istsonstig', 'linrefx', 'linrefy', 'objectid', 'strzustand', 'uart', 'ugemeinde', 'ujahr', 'ukategorie', 'ukreis', 'uland', 'ulichtverh', 'umonat', 'uregbez', 'ustunde', 'utyp1', 'uwochentag', 'xgcswgs84', 'ygcswgs84'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(extra_accidents_postgres_references)

    extra_accidents_postgres_select = PGGrantTable(schema='extra', table='accidents', columns=['geom', 'gid', 'istfuss', 'istgkfz', 'istkrad', 'istpkw', 'istrad', 'istsonstig', 'linrefx', 'linrefy', 'objectid', 'strzustand', 'uart', 'ugemeinde', 'ujahr', 'ukategorie', 'ukreis', 'uland', 'ulichtverh', 'umonat', 'uregbez', 'ustunde', 'utyp1', 'uwochentag', 'xgcswgs84', 'ygcswgs84'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(extra_accidents_postgres_select)

    extra_accidents_postgres_update = PGGrantTable(schema='extra', table='accidents', columns=['geom', 'gid', 'istfuss', 'istgkfz', 'istkrad', 'istpkw', 'istrad', 'istsonstig', 'linrefx', 'linrefy', 'objectid', 'strzustand', 'uart', 'ugemeinde', 'ujahr', 'ukategorie', 'ukreis', 'uland', 'ulichtverh', 'umonat', 'uregbez', 'ustunde', 'utyp1', 'uwochentag', 'xgcswgs84', 'ygcswgs84'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(extra_accidents_postgres_update)

    extra_accidents_cyclists_postgres_insert = PGGrantTable(schema='extra', table='accidents_cyclists', columns=['geom', 'gid', 'istfuss', 'istgkfz', 'istkrad', 'istpkw', 'istrad', 'istsonstig', 'linrefx', 'linrefy', 'objectid', 'strzustand', 'uart', 'ugemeinde', 'ujahr', 'ukategorie', 'ukreis', 'uland', 'ulichtverh', 'umonat', 'uregbez', 'ustunde', 'utyp1', 'uwochentag', 'xgcswgs84', 'ygcswgs84'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(extra_accidents_cyclists_postgres_insert)

    extra_accidents_cyclists_postgres_references = PGGrantTable(schema='extra', table='accidents_cyclists', columns=['geom', 'gid', 'istfuss', 'istgkfz', 'istkrad', 'istpkw', 'istrad', 'istsonstig', 'linrefx', 'linrefy', 'objectid', 'strzustand', 'uart', 'ugemeinde', 'ujahr', 'ukategorie', 'ukreis', 'uland', 'ulichtverh', 'umonat', 'uregbez', 'ustunde', 'utyp1', 'uwochentag', 'xgcswgs84', 'ygcswgs84'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(extra_accidents_cyclists_postgres_references)

    extra_accidents_cyclists_postgres_select = PGGrantTable(schema='extra', table='accidents_cyclists', columns=['geom', 'gid', 'istfuss', 'istgkfz', 'istkrad', 'istpkw', 'istrad', 'istsonstig', 'linrefx', 'linrefy', 'objectid', 'strzustand', 'uart', 'ugemeinde', 'ujahr', 'ukategorie', 'ukreis', 'uland', 'ulichtverh', 'umonat', 'uregbez', 'ustunde', 'utyp1', 'uwochentag', 'xgcswgs84', 'ygcswgs84'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(extra_accidents_cyclists_postgres_select)

    extra_accidents_cyclists_postgres_update = PGGrantTable(schema='extra', table='accidents_cyclists', columns=['geom', 'gid', 'istfuss', 'istgkfz', 'istkrad', 'istpkw', 'istrad', 'istsonstig', 'linrefx', 'linrefy', 'objectid', 'strzustand', 'uart', 'ugemeinde', 'ujahr', 'ukategorie', 'ukreis', 'uland', 'ulichtverh', 'umonat', 'uregbez', 'ustunde', 'utyp1', 'uwochentag', 'xgcswgs84', 'ygcswgs84'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(extra_accidents_cyclists_postgres_update)

    extra_accidents_pedestrians_postgres_insert = PGGrantTable(schema='extra', table='accidents_pedestrians', columns=['geom', 'gid', 'istfuss', 'istgkfz', 'istkrad', 'istpkw', 'istrad', 'istsonstig', 'linrefx', 'linrefy', 'objectid', 'strzustand', 'uart', 'ugemeinde', 'ujahr', 'ukategorie', 'ukreis', 'uland', 'ulichtverh', 'umonat', 'uregbez', 'ustunde', 'utyp1', 'uwochentag', 'xgcswgs84', 'ygcswgs84'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(extra_accidents_pedestrians_postgres_insert)

    extra_accidents_pedestrians_postgres_references = PGGrantTable(schema='extra', table='accidents_pedestrians', columns=['geom', 'gid', 'istfuss', 'istgkfz', 'istkrad', 'istpkw', 'istrad', 'istsonstig', 'linrefx', 'linrefy', 'objectid', 'strzustand', 'uart', 'ugemeinde', 'ujahr', 'ukategorie', 'ukreis', 'uland', 'ulichtverh', 'umonat', 'uregbez', 'ustunde', 'utyp1', 'uwochentag', 'xgcswgs84', 'ygcswgs84'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(extra_accidents_pedestrians_postgres_references)

    extra_accidents_pedestrians_postgres_select = PGGrantTable(schema='extra', table='accidents_pedestrians', columns=['geom', 'gid', 'istfuss', 'istgkfz', 'istkrad', 'istpkw', 'istrad', 'istsonstig', 'linrefx', 'linrefy', 'objectid', 'strzustand', 'uart', 'ugemeinde', 'ujahr', 'ukategorie', 'ukreis', 'uland', 'ulichtverh', 'umonat', 'uregbez', 'ustunde', 'utyp1', 'uwochentag', 'xgcswgs84', 'ygcswgs84'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(extra_accidents_pedestrians_postgres_select)

    extra_accidents_pedestrians_postgres_update = PGGrantTable(schema='extra', table='accidents_pedestrians', columns=['geom', 'gid', 'istfuss', 'istgkfz', 'istkrad', 'istpkw', 'istrad', 'istsonstig', 'linrefx', 'linrefy', 'objectid', 'strzustand', 'uart', 'ugemeinde', 'ujahr', 'ukategorie', 'ukreis', 'uland', 'ulichtverh', 'umonat', 'uregbez', 'ustunde', 'utyp1', 'uwochentag', 'xgcswgs84', 'ygcswgs84'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(extra_accidents_pedestrians_postgres_update)

    extra_building_postgres_insert = PGGrantTable(schema='extra', table='building', columns=['amenity', 'area', 'building_levels', 'building_levels_residential', 'building_type', 'geom', 'gross_floor_area_residential', 'height', 'housenumber', 'id', 'osm_id', 'residential_status', 'roof_levels', 'street'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(extra_building_postgres_insert)

    extra_building_postgres_references = PGGrantTable(schema='extra', table='building', columns=['amenity', 'area', 'building_levels', 'building_levels_residential', 'building_type', 'geom', 'gross_floor_area_residential', 'height', 'housenumber', 'id', 'osm_id', 'residential_status', 'roof_levels', 'street'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(extra_building_postgres_references)

    extra_building_postgres_select = PGGrantTable(schema='extra', table='building', columns=['amenity', 'area', 'building_levels', 'building_levels_residential', 'building_type', 'geom', 'gross_floor_area_residential', 'height', 'housenumber', 'id', 'osm_id', 'residential_status', 'roof_levels', 'street'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(extra_building_postgres_select)

    extra_building_postgres_update = PGGrantTable(schema='extra', table='building', columns=['amenity', 'area', 'building_levels', 'building_levels_residential', 'building_type', 'geom', 'gross_floor_area_residential', 'height', 'housenumber', 'id', 'osm_id', 'residential_status', 'roof_levels', 'street'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(extra_building_postgres_update)

    extra_landuse_atkis_postgres_insert = PGGrantTable(schema='extra', table='landuse_atkis', columns=['geom', 'gid', 'landuse'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(extra_landuse_atkis_postgres_insert)

    extra_landuse_atkis_postgres_references = PGGrantTable(schema='extra', table='landuse_atkis', columns=['geom', 'gid', 'landuse'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(extra_landuse_atkis_postgres_references)

    extra_landuse_atkis_postgres_select = PGGrantTable(schema='extra', table='landuse_atkis', columns=['geom', 'gid', 'landuse'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(extra_landuse_atkis_postgres_select)

    extra_landuse_atkis_postgres_update = PGGrantTable(schema='extra', table='landuse_atkis', columns=['geom', 'gid', 'landuse'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(extra_landuse_atkis_postgres_update)

    extra_accidents_postgres_delete = PGGrantTable(schema='extra', table='accidents', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(extra_accidents_postgres_delete)

    extra_accidents_postgres_truncate = PGGrantTable(schema='extra', table='accidents', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(extra_accidents_postgres_truncate)

    extra_accidents_postgres_trigger = PGGrantTable(schema='extra', table='accidents', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(extra_accidents_postgres_trigger)

    extra_accidents_cyclists_postgres_delete = PGGrantTable(schema='extra', table='accidents_cyclists', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(extra_accidents_cyclists_postgres_delete)

    extra_accidents_cyclists_postgres_truncate = PGGrantTable(schema='extra', table='accidents_cyclists', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(extra_accidents_cyclists_postgres_truncate)

    extra_accidents_cyclists_postgres_trigger = PGGrantTable(schema='extra', table='accidents_cyclists', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(extra_accidents_cyclists_postgres_trigger)

    extra_accidents_pedestrians_postgres_delete = PGGrantTable(schema='extra', table='accidents_pedestrians', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(extra_accidents_pedestrians_postgres_delete)

    extra_accidents_pedestrians_postgres_truncate = PGGrantTable(schema='extra', table='accidents_pedestrians', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(extra_accidents_pedestrians_postgres_truncate)

    extra_accidents_pedestrians_postgres_trigger = PGGrantTable(schema='extra', table='accidents_pedestrians', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(extra_accidents_pedestrians_postgres_trigger)

    extra_building_postgres_delete = PGGrantTable(schema='extra', table='building', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(extra_building_postgres_delete)

    extra_building_postgres_truncate = PGGrantTable(schema='extra', table='building', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(extra_building_postgres_truncate)

    extra_building_postgres_trigger = PGGrantTable(schema='extra', table='building', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(extra_building_postgres_trigger)

    extra_landuse_atkis_postgres_delete = PGGrantTable(schema='extra', table='landuse_atkis', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(extra_landuse_atkis_postgres_delete)

    extra_landuse_atkis_postgres_truncate = PGGrantTable(schema='extra', table='landuse_atkis', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(extra_landuse_atkis_postgres_truncate)

    extra_landuse_atkis_postgres_trigger = PGGrantTable(schema='extra', table='landuse_atkis', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(extra_landuse_atkis_postgres_trigger)

    basic_aoi_postgres_insert = PGGrantTable(schema='basic', table='aoi', columns=['category', 'geom', 'id', 'name', 'opening_hours', 'tags', 'wheelchair'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(basic_aoi_postgres_insert)

    basic_aoi_postgres_references = PGGrantTable(schema='basic', table='aoi', columns=['category', 'geom', 'id', 'name', 'opening_hours', 'tags', 'wheelchair'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(basic_aoi_postgres_references)

    basic_aoi_postgres_select = PGGrantTable(schema='basic', table='aoi', columns=['category', 'geom', 'id', 'name', 'opening_hours', 'tags', 'wheelchair'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(basic_aoi_postgres_select)

    basic_aoi_postgres_update = PGGrantTable(schema='basic', table='aoi', columns=['category', 'geom', 'id', 'name', 'opening_hours', 'tags', 'wheelchair'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(basic_aoi_postgres_update)

    basic_building_postgres_insert = PGGrantTable(schema='basic', table='building', columns=['amenity', 'area', 'building_levels', 'building_levels_residential', 'building_type', 'geom', 'gross_floor_area_residential', 'height', 'housenumber', 'id', 'osm_id', 'residential_status', 'roof_levels', 'street'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(basic_building_postgres_insert)

    basic_building_postgres_references = PGGrantTable(schema='basic', table='building', columns=['amenity', 'area', 'building_levels', 'building_levels_residential', 'building_type', 'geom', 'gross_floor_area_residential', 'height', 'housenumber', 'id', 'osm_id', 'residential_status', 'roof_levels', 'street'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(basic_building_postgres_references)

    basic_building_postgres_select = PGGrantTable(schema='basic', table='building', columns=['amenity', 'area', 'building_levels', 'building_levels_residential', 'building_type', 'geom', 'gross_floor_area_residential', 'height', 'housenumber', 'id', 'osm_id', 'residential_status', 'roof_levels', 'street'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(basic_building_postgres_select)

    basic_building_postgres_update = PGGrantTable(schema='basic', table='building', columns=['amenity', 'area', 'building_levels', 'building_levels_residential', 'building_type', 'geom', 'gross_floor_area_residential', 'height', 'housenumber', 'id', 'osm_id', 'residential_status', 'roof_levels', 'street'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(basic_building_postgres_update)

    basic_edge_postgres_insert = PGGrantTable(schema='basic', table='edge', columns=['bicycle', 'bicycle_road', 'class_id', 'coordinates_3857', 'crossing', 'crossing_delay_category', 'cycleway', 'death_end', 'edge_id', 'foot', 'geom', 'highway', 'id', 'impedance_surface', 'incline', 'incline_percent', 'lanes', 'length_3857', 'length_m', 'lit', 'lit_classified', 'maxspeed_backward', 'maxspeed_forward', 'name', 'one_link_crossing', 'one_way', 'oneway', 'osm_id', 'parking', 'parking_lane_both', 'parking_lane_left', 'parking_lane_right', 'rs_imp', 's_imp', 'scenario_id', 'segregated', 'sidewalk', 'sidewalk_both_width', 'sidewalk_left_width', 'sidewalk_right_width', 'smoothness', 'source', 'surface', 'target', 'wheelchair', 'wheelchair_classified', 'width'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(basic_edge_postgres_insert)

    basic_edge_postgres_references = PGGrantTable(schema='basic', table='edge', columns=['bicycle', 'bicycle_road', 'class_id', 'coordinates_3857', 'crossing', 'crossing_delay_category', 'cycleway', 'death_end', 'edge_id', 'foot', 'geom', 'highway', 'id', 'impedance_surface', 'incline', 'incline_percent', 'lanes', 'length_3857', 'length_m', 'lit', 'lit_classified', 'maxspeed_backward', 'maxspeed_forward', 'name', 'one_link_crossing', 'one_way', 'oneway', 'osm_id', 'parking', 'parking_lane_both', 'parking_lane_left', 'parking_lane_right', 'rs_imp', 's_imp', 'scenario_id', 'segregated', 'sidewalk', 'sidewalk_both_width', 'sidewalk_left_width', 'sidewalk_right_width', 'smoothness', 'source', 'surface', 'target', 'wheelchair', 'wheelchair_classified', 'width'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(basic_edge_postgres_references)

    basic_edge_postgres_select = PGGrantTable(schema='basic', table='edge', columns=['bicycle', 'bicycle_road', 'class_id', 'coordinates_3857', 'crossing', 'crossing_delay_category', 'cycleway', 'death_end', 'edge_id', 'foot', 'geom', 'highway', 'id', 'impedance_surface', 'incline', 'incline_percent', 'lanes', 'length_3857', 'length_m', 'lit', 'lit_classified', 'maxspeed_backward', 'maxspeed_forward', 'name', 'one_link_crossing', 'one_way', 'oneway', 'osm_id', 'parking', 'parking_lane_both', 'parking_lane_left', 'parking_lane_right', 'rs_imp', 's_imp', 'scenario_id', 'segregated', 'sidewalk', 'sidewalk_both_width', 'sidewalk_left_width', 'sidewalk_right_width', 'smoothness', 'source', 'surface', 'target', 'wheelchair', 'wheelchair_classified', 'width'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(basic_edge_postgres_select)

    basic_edge_postgres_update = PGGrantTable(schema='basic', table='edge', columns=['bicycle', 'bicycle_road', 'class_id', 'coordinates_3857', 'crossing', 'crossing_delay_category', 'cycleway', 'death_end', 'edge_id', 'foot', 'geom', 'highway', 'id', 'impedance_surface', 'incline', 'incline_percent', 'lanes', 'length_3857', 'length_m', 'lit', 'lit_classified', 'maxspeed_backward', 'maxspeed_forward', 'name', 'one_link_crossing', 'one_way', 'oneway', 'osm_id', 'parking', 'parking_lane_both', 'parking_lane_left', 'parking_lane_right', 'rs_imp', 's_imp', 'scenario_id', 'segregated', 'sidewalk', 'sidewalk_both_width', 'sidewalk_left_width', 'sidewalk_right_width', 'smoothness', 'source', 'surface', 'target', 'wheelchair', 'wheelchair_classified', 'width'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(basic_edge_postgres_update)

    basic_grid_calculation_postgres_insert = PGGrantTable(schema='basic', table='grid_calculation', columns=['geom', 'grid_visualization_id', 'id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(basic_grid_calculation_postgres_insert)

    basic_grid_calculation_postgres_references = PGGrantTable(schema='basic', table='grid_calculation', columns=['geom', 'grid_visualization_id', 'id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(basic_grid_calculation_postgres_references)

    basic_grid_calculation_postgres_select = PGGrantTable(schema='basic', table='grid_calculation', columns=['geom', 'grid_visualization_id', 'id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(basic_grid_calculation_postgres_select)

    basic_grid_calculation_postgres_update = PGGrantTable(schema='basic', table='grid_calculation', columns=['geom', 'grid_visualization_id', 'id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(basic_grid_calculation_postgres_update)

    basic_grid_visualization_postgres_insert = PGGrantTable(schema='basic', table='grid_visualization', columns=['area_isochrone', 'geom', 'id', 'percentile_area_isochrone', 'percentile_population', 'population'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(basic_grid_visualization_postgres_insert)

    basic_grid_visualization_postgres_references = PGGrantTable(schema='basic', table='grid_visualization', columns=['area_isochrone', 'geom', 'id', 'percentile_area_isochrone', 'percentile_population', 'population'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(basic_grid_visualization_postgres_references)

    basic_grid_visualization_postgres_select = PGGrantTable(schema='basic', table='grid_visualization', columns=['area_isochrone', 'geom', 'id', 'percentile_area_isochrone', 'percentile_population', 'population'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(basic_grid_visualization_postgres_select)

    basic_grid_visualization_postgres_update = PGGrantTable(schema='basic', table='grid_visualization', columns=['area_isochrone', 'geom', 'id', 'percentile_area_isochrone', 'percentile_population', 'population'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(basic_grid_visualization_postgres_update)

    basic_node_postgres_insert = PGGrantTable(schema='basic', table='node', columns=['bicycle', 'class_ids', 'cnt', 'death_end', 'foot', 'geom', 'id', 'lit_classified', 'osm_id', 'scenario_id', 'wheelchair_classified'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(basic_node_postgres_insert)

    basic_node_postgres_references = PGGrantTable(schema='basic', table='node', columns=['bicycle', 'class_ids', 'cnt', 'death_end', 'foot', 'geom', 'id', 'lit_classified', 'osm_id', 'scenario_id', 'wheelchair_classified'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(basic_node_postgres_references)

    basic_node_postgres_select = PGGrantTable(schema='basic', table='node', columns=['bicycle', 'class_ids', 'cnt', 'death_end', 'foot', 'geom', 'id', 'lit_classified', 'osm_id', 'scenario_id', 'wheelchair_classified'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(basic_node_postgres_select)

    basic_node_postgres_update = PGGrantTable(schema='basic', table='node', columns=['bicycle', 'class_ids', 'cnt', 'death_end', 'foot', 'geom', 'id', 'lit_classified', 'osm_id', 'scenario_id', 'wheelchair_classified'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(basic_node_postgres_update)

    basic_poi_postgres_insert = PGGrantTable(schema='basic', table='poi', columns=['category', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(basic_poi_postgres_insert)

    basic_poi_postgres_references = PGGrantTable(schema='basic', table='poi', columns=['category', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(basic_poi_postgres_references)

    basic_poi_postgres_select = PGGrantTable(schema='basic', table='poi', columns=['category', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(basic_poi_postgres_select)

    basic_poi_postgres_update = PGGrantTable(schema='basic', table='poi', columns=['category', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(basic_poi_postgres_update)

    basic_population_postgres_insert = PGGrantTable(schema='basic', table='population', columns=['building_id', 'demography', 'geom', 'id', 'population', 'sub_study_area_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(basic_population_postgres_insert)

    basic_population_postgres_references = PGGrantTable(schema='basic', table='population', columns=['building_id', 'demography', 'geom', 'id', 'population', 'sub_study_area_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(basic_population_postgres_references)

    basic_population_postgres_select = PGGrantTable(schema='basic', table='population', columns=['building_id', 'demography', 'geom', 'id', 'population', 'sub_study_area_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(basic_population_postgres_select)

    basic_population_postgres_update = PGGrantTable(schema='basic', table='population', columns=['building_id', 'demography', 'geom', 'id', 'population', 'sub_study_area_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(basic_population_postgres_update)

    basic_study_area_postgres_insert = PGGrantTable(schema='basic', table='study_area', columns=['buffer_geom_heatmap', 'geom', 'id', 'name', 'population', 'setting'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(basic_study_area_postgres_insert)

    basic_study_area_postgres_references = PGGrantTable(schema='basic', table='study_area', columns=['buffer_geom_heatmap', 'geom', 'id', 'name', 'population', 'setting'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(basic_study_area_postgres_references)

    basic_study_area_postgres_select = PGGrantTable(schema='basic', table='study_area', columns=['buffer_geom_heatmap', 'geom', 'id', 'name', 'population', 'setting'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(basic_study_area_postgres_select)

    basic_study_area_postgres_update = PGGrantTable(schema='basic', table='study_area', columns=['buffer_geom_heatmap', 'geom', 'id', 'name', 'population', 'setting'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(basic_study_area_postgres_update)

    basic_study_area_grid_visualization_postgres_insert = PGGrantTable(schema='basic', table='study_area_grid_visualization', columns=['grid_visualization_id', 'id', 'study_area_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(basic_study_area_grid_visualization_postgres_insert)

    basic_study_area_grid_visualization_postgres_references = PGGrantTable(schema='basic', table='study_area_grid_visualization', columns=['grid_visualization_id', 'id', 'study_area_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(basic_study_area_grid_visualization_postgres_references)

    basic_study_area_grid_visualization_postgres_select = PGGrantTable(schema='basic', table='study_area_grid_visualization', columns=['grid_visualization_id', 'id', 'study_area_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(basic_study_area_grid_visualization_postgres_select)

    basic_study_area_grid_visualization_postgres_update = PGGrantTable(schema='basic', table='study_area_grid_visualization', columns=['grid_visualization_id', 'id', 'study_area_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(basic_study_area_grid_visualization_postgres_update)

    basic_sub_study_area_postgres_insert = PGGrantTable(schema='basic', table='sub_study_area', columns=['area', 'default_building_levels', 'default_roof_levels', 'geom', 'id', 'name', 'population', 'study_area_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(basic_sub_study_area_postgres_insert)

    basic_sub_study_area_postgres_references = PGGrantTable(schema='basic', table='sub_study_area', columns=['area', 'default_building_levels', 'default_roof_levels', 'geom', 'id', 'name', 'population', 'study_area_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(basic_sub_study_area_postgres_references)

    basic_sub_study_area_postgres_select = PGGrantTable(schema='basic', table='sub_study_area', columns=['area', 'default_building_levels', 'default_roof_levels', 'geom', 'id', 'name', 'population', 'study_area_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(basic_sub_study_area_postgres_select)

    basic_sub_study_area_postgres_update = PGGrantTable(schema='basic', table='sub_study_area', columns=['area', 'default_building_levels', 'default_roof_levels', 'geom', 'id', 'name', 'population', 'study_area_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(basic_sub_study_area_postgres_update)

    basic_test_postgres_insert = PGGrantTable(schema='basic', table='test', columns=['id', 'name'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(basic_test_postgres_insert)

    basic_test_postgres_references = PGGrantTable(schema='basic', table='test', columns=['id', 'name'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(basic_test_postgres_references)

    basic_test_postgres_select = PGGrantTable(schema='basic', table='test', columns=['id', 'name'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(basic_test_postgres_select)

    basic_test_postgres_update = PGGrantTable(schema='basic', table='test', columns=['id', 'name'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(basic_test_postgres_update)

    basic_aoi_postgres_delete = PGGrantTable(schema='basic', table='aoi', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(basic_aoi_postgres_delete)

    basic_aoi_postgres_truncate = PGGrantTable(schema='basic', table='aoi', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(basic_aoi_postgres_truncate)

    basic_aoi_postgres_trigger = PGGrantTable(schema='basic', table='aoi', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(basic_aoi_postgres_trigger)

    basic_node_postgres_delete = PGGrantTable(schema='basic', table='node', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(basic_node_postgres_delete)

    basic_node_postgres_truncate = PGGrantTable(schema='basic', table='node', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(basic_node_postgres_truncate)

    basic_node_postgres_trigger = PGGrantTable(schema='basic', table='node', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(basic_node_postgres_trigger)

    basic_building_postgres_delete = PGGrantTable(schema='basic', table='building', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(basic_building_postgres_delete)

    basic_building_postgres_truncate = PGGrantTable(schema='basic', table='building', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(basic_building_postgres_truncate)

    basic_building_postgres_trigger = PGGrantTable(schema='basic', table='building', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(basic_building_postgres_trigger)

    basic_grid_visualization_postgres_delete = PGGrantTable(schema='basic', table='grid_visualization', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(basic_grid_visualization_postgres_delete)

    basic_grid_visualization_postgres_truncate = PGGrantTable(schema='basic', table='grid_visualization', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(basic_grid_visualization_postgres_truncate)

    basic_grid_visualization_postgres_trigger = PGGrantTable(schema='basic', table='grid_visualization', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(basic_grid_visualization_postgres_trigger)

    basic_edge_postgres_delete = PGGrantTable(schema='basic', table='edge', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(basic_edge_postgres_delete)

    basic_edge_postgres_truncate = PGGrantTable(schema='basic', table='edge', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(basic_edge_postgres_truncate)

    basic_edge_postgres_trigger = PGGrantTable(schema='basic', table='edge', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(basic_edge_postgres_trigger)

    basic_poi_postgres_delete = PGGrantTable(schema='basic', table='poi', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(basic_poi_postgres_delete)

    basic_poi_postgres_truncate = PGGrantTable(schema='basic', table='poi', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(basic_poi_postgres_truncate)

    basic_poi_postgres_trigger = PGGrantTable(schema='basic', table='poi', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(basic_poi_postgres_trigger)

    basic_study_area_grid_visualization_postgres_delete = PGGrantTable(schema='basic', table='study_area_grid_visualization', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(basic_study_area_grid_visualization_postgres_delete)

    basic_study_area_grid_visualization_postgres_truncate = PGGrantTable(schema='basic', table='study_area_grid_visualization', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(basic_study_area_grid_visualization_postgres_truncate)

    basic_study_area_grid_visualization_postgres_trigger = PGGrantTable(schema='basic', table='study_area_grid_visualization', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(basic_study_area_grid_visualization_postgres_trigger)

    basic_population_postgres_delete = PGGrantTable(schema='basic', table='population', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(basic_population_postgres_delete)

    basic_population_postgres_truncate = PGGrantTable(schema='basic', table='population', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(basic_population_postgres_truncate)

    basic_population_postgres_trigger = PGGrantTable(schema='basic', table='population', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(basic_population_postgres_trigger)

    basic_study_area_postgres_delete = PGGrantTable(schema='basic', table='study_area', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(basic_study_area_postgres_delete)

    basic_study_area_postgres_truncate = PGGrantTable(schema='basic', table='study_area', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(basic_study_area_postgres_truncate)

    basic_study_area_postgres_trigger = PGGrantTable(schema='basic', table='study_area', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(basic_study_area_postgres_trigger)

    basic_test_postgres_delete = PGGrantTable(schema='basic', table='test', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(basic_test_postgres_delete)

    basic_test_postgres_truncate = PGGrantTable(schema='basic', table='test', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(basic_test_postgres_truncate)

    basic_test_postgres_trigger = PGGrantTable(schema='basic', table='test', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(basic_test_postgres_trigger)

    basic_sub_study_area_postgres_delete = PGGrantTable(schema='basic', table='sub_study_area', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(basic_sub_study_area_postgres_delete)

    basic_sub_study_area_postgres_truncate = PGGrantTable(schema='basic', table='sub_study_area', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(basic_sub_study_area_postgres_truncate)

    basic_sub_study_area_postgres_trigger = PGGrantTable(schema='basic', table='sub_study_area', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(basic_sub_study_area_postgres_trigger)

    basic_grid_calculation_postgres_delete = PGGrantTable(schema='basic', table='grid_calculation', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(basic_grid_calculation_postgres_delete)

    basic_grid_calculation_postgres_truncate = PGGrantTable(schema='basic', table='grid_calculation', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(basic_grid_calculation_postgres_truncate)

    basic_grid_calculation_postgres_trigger = PGGrantTable(schema='basic', table='grid_calculation', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(basic_grid_calculation_postgres_trigger)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    basic_grid_calculation_postgres_trigger = PGGrantTable(schema='basic', table='grid_calculation', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(basic_grid_calculation_postgres_trigger)

    basic_grid_calculation_postgres_truncate = PGGrantTable(schema='basic', table='grid_calculation', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(basic_grid_calculation_postgres_truncate)

    basic_grid_calculation_postgres_delete = PGGrantTable(schema='basic', table='grid_calculation', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(basic_grid_calculation_postgres_delete)

    basic_sub_study_area_postgres_trigger = PGGrantTable(schema='basic', table='sub_study_area', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(basic_sub_study_area_postgres_trigger)

    basic_sub_study_area_postgres_truncate = PGGrantTable(schema='basic', table='sub_study_area', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(basic_sub_study_area_postgres_truncate)

    basic_sub_study_area_postgres_delete = PGGrantTable(schema='basic', table='sub_study_area', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(basic_sub_study_area_postgres_delete)

    basic_test_postgres_trigger = PGGrantTable(schema='basic', table='test', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(basic_test_postgres_trigger)

    basic_test_postgres_truncate = PGGrantTable(schema='basic', table='test', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(basic_test_postgres_truncate)

    basic_test_postgres_delete = PGGrantTable(schema='basic', table='test', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(basic_test_postgres_delete)

    basic_study_area_postgres_trigger = PGGrantTable(schema='basic', table='study_area', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(basic_study_area_postgres_trigger)

    basic_study_area_postgres_truncate = PGGrantTable(schema='basic', table='study_area', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(basic_study_area_postgres_truncate)

    basic_study_area_postgres_delete = PGGrantTable(schema='basic', table='study_area', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(basic_study_area_postgres_delete)

    basic_population_postgres_trigger = PGGrantTable(schema='basic', table='population', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(basic_population_postgres_trigger)

    basic_population_postgres_truncate = PGGrantTable(schema='basic', table='population', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(basic_population_postgres_truncate)

    basic_population_postgres_delete = PGGrantTable(schema='basic', table='population', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(basic_population_postgres_delete)

    basic_study_area_grid_visualization_postgres_trigger = PGGrantTable(schema='basic', table='study_area_grid_visualization', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(basic_study_area_grid_visualization_postgres_trigger)

    basic_study_area_grid_visualization_postgres_truncate = PGGrantTable(schema='basic', table='study_area_grid_visualization', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(basic_study_area_grid_visualization_postgres_truncate)

    basic_study_area_grid_visualization_postgres_delete = PGGrantTable(schema='basic', table='study_area_grid_visualization', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(basic_study_area_grid_visualization_postgres_delete)

    basic_poi_postgres_trigger = PGGrantTable(schema='basic', table='poi', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(basic_poi_postgres_trigger)

    basic_poi_postgres_truncate = PGGrantTable(schema='basic', table='poi', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(basic_poi_postgres_truncate)

    basic_poi_postgres_delete = PGGrantTable(schema='basic', table='poi', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(basic_poi_postgres_delete)

    basic_edge_postgres_trigger = PGGrantTable(schema='basic', table='edge', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(basic_edge_postgres_trigger)

    basic_edge_postgres_truncate = PGGrantTable(schema='basic', table='edge', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(basic_edge_postgres_truncate)

    basic_edge_postgres_delete = PGGrantTable(schema='basic', table='edge', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(basic_edge_postgres_delete)

    basic_grid_visualization_postgres_trigger = PGGrantTable(schema='basic', table='grid_visualization', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(basic_grid_visualization_postgres_trigger)

    basic_grid_visualization_postgres_truncate = PGGrantTable(schema='basic', table='grid_visualization', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(basic_grid_visualization_postgres_truncate)

    basic_grid_visualization_postgres_delete = PGGrantTable(schema='basic', table='grid_visualization', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(basic_grid_visualization_postgres_delete)

    basic_building_postgres_trigger = PGGrantTable(schema='basic', table='building', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(basic_building_postgres_trigger)

    basic_building_postgres_truncate = PGGrantTable(schema='basic', table='building', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(basic_building_postgres_truncate)

    basic_building_postgres_delete = PGGrantTable(schema='basic', table='building', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(basic_building_postgres_delete)

    basic_node_postgres_trigger = PGGrantTable(schema='basic', table='node', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(basic_node_postgres_trigger)

    basic_node_postgres_truncate = PGGrantTable(schema='basic', table='node', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(basic_node_postgres_truncate)

    basic_node_postgres_delete = PGGrantTable(schema='basic', table='node', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(basic_node_postgres_delete)

    basic_aoi_postgres_trigger = PGGrantTable(schema='basic', table='aoi', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(basic_aoi_postgres_trigger)

    basic_aoi_postgres_truncate = PGGrantTable(schema='basic', table='aoi', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(basic_aoi_postgres_truncate)

    basic_aoi_postgres_delete = PGGrantTable(schema='basic', table='aoi', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(basic_aoi_postgres_delete)

    basic_test_postgres_update = PGGrantTable(schema='basic', table='test', columns=['id', 'name'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(basic_test_postgres_update)

    basic_test_postgres_select = PGGrantTable(schema='basic', table='test', columns=['id', 'name'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(basic_test_postgres_select)

    basic_test_postgres_references = PGGrantTable(schema='basic', table='test', columns=['id', 'name'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(basic_test_postgres_references)

    basic_test_postgres_insert = PGGrantTable(schema='basic', table='test', columns=['id', 'name'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(basic_test_postgres_insert)

    basic_sub_study_area_postgres_update = PGGrantTable(schema='basic', table='sub_study_area', columns=['area', 'default_building_levels', 'default_roof_levels', 'geom', 'id', 'name', 'population', 'study_area_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(basic_sub_study_area_postgres_update)

    basic_sub_study_area_postgres_select = PGGrantTable(schema='basic', table='sub_study_area', columns=['area', 'default_building_levels', 'default_roof_levels', 'geom', 'id', 'name', 'population', 'study_area_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(basic_sub_study_area_postgres_select)

    basic_sub_study_area_postgres_references = PGGrantTable(schema='basic', table='sub_study_area', columns=['area', 'default_building_levels', 'default_roof_levels', 'geom', 'id', 'name', 'population', 'study_area_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(basic_sub_study_area_postgres_references)

    basic_sub_study_area_postgres_insert = PGGrantTable(schema='basic', table='sub_study_area', columns=['area', 'default_building_levels', 'default_roof_levels', 'geom', 'id', 'name', 'population', 'study_area_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(basic_sub_study_area_postgres_insert)

    basic_study_area_grid_visualization_postgres_update = PGGrantTable(schema='basic', table='study_area_grid_visualization', columns=['grid_visualization_id', 'id', 'study_area_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(basic_study_area_grid_visualization_postgres_update)

    basic_study_area_grid_visualization_postgres_select = PGGrantTable(schema='basic', table='study_area_grid_visualization', columns=['grid_visualization_id', 'id', 'study_area_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(basic_study_area_grid_visualization_postgres_select)

    basic_study_area_grid_visualization_postgres_references = PGGrantTable(schema='basic', table='study_area_grid_visualization', columns=['grid_visualization_id', 'id', 'study_area_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(basic_study_area_grid_visualization_postgres_references)

    basic_study_area_grid_visualization_postgres_insert = PGGrantTable(schema='basic', table='study_area_grid_visualization', columns=['grid_visualization_id', 'id', 'study_area_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(basic_study_area_grid_visualization_postgres_insert)

    basic_study_area_postgres_update = PGGrantTable(schema='basic', table='study_area', columns=['buffer_geom_heatmap', 'geom', 'id', 'name', 'population', 'setting'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(basic_study_area_postgres_update)

    basic_study_area_postgres_select = PGGrantTable(schema='basic', table='study_area', columns=['buffer_geom_heatmap', 'geom', 'id', 'name', 'population', 'setting'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(basic_study_area_postgres_select)

    basic_study_area_postgres_references = PGGrantTable(schema='basic', table='study_area', columns=['buffer_geom_heatmap', 'geom', 'id', 'name', 'population', 'setting'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(basic_study_area_postgres_references)

    basic_study_area_postgres_insert = PGGrantTable(schema='basic', table='study_area', columns=['buffer_geom_heatmap', 'geom', 'id', 'name', 'population', 'setting'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(basic_study_area_postgres_insert)

    basic_population_postgres_update = PGGrantTable(schema='basic', table='population', columns=['building_id', 'demography', 'geom', 'id', 'population', 'sub_study_area_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(basic_population_postgres_update)

    basic_population_postgres_select = PGGrantTable(schema='basic', table='population', columns=['building_id', 'demography', 'geom', 'id', 'population', 'sub_study_area_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(basic_population_postgres_select)

    basic_population_postgres_references = PGGrantTable(schema='basic', table='population', columns=['building_id', 'demography', 'geom', 'id', 'population', 'sub_study_area_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(basic_population_postgres_references)

    basic_population_postgres_insert = PGGrantTable(schema='basic', table='population', columns=['building_id', 'demography', 'geom', 'id', 'population', 'sub_study_area_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(basic_population_postgres_insert)

    basic_poi_postgres_update = PGGrantTable(schema='basic', table='poi', columns=['category', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(basic_poi_postgres_update)

    basic_poi_postgres_select = PGGrantTable(schema='basic', table='poi', columns=['category', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(basic_poi_postgres_select)

    basic_poi_postgres_references = PGGrantTable(schema='basic', table='poi', columns=['category', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(basic_poi_postgres_references)

    basic_poi_postgres_insert = PGGrantTable(schema='basic', table='poi', columns=['category', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(basic_poi_postgres_insert)

    basic_node_postgres_update = PGGrantTable(schema='basic', table='node', columns=['bicycle', 'class_ids', 'cnt', 'death_end', 'foot', 'geom', 'id', 'lit_classified', 'osm_id', 'scenario_id', 'wheelchair_classified'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(basic_node_postgres_update)

    basic_node_postgres_select = PGGrantTable(schema='basic', table='node', columns=['bicycle', 'class_ids', 'cnt', 'death_end', 'foot', 'geom', 'id', 'lit_classified', 'osm_id', 'scenario_id', 'wheelchair_classified'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(basic_node_postgres_select)

    basic_node_postgres_references = PGGrantTable(schema='basic', table='node', columns=['bicycle', 'class_ids', 'cnt', 'death_end', 'foot', 'geom', 'id', 'lit_classified', 'osm_id', 'scenario_id', 'wheelchair_classified'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(basic_node_postgres_references)

    basic_node_postgres_insert = PGGrantTable(schema='basic', table='node', columns=['bicycle', 'class_ids', 'cnt', 'death_end', 'foot', 'geom', 'id', 'lit_classified', 'osm_id', 'scenario_id', 'wheelchair_classified'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(basic_node_postgres_insert)

    basic_grid_visualization_postgres_update = PGGrantTable(schema='basic', table='grid_visualization', columns=['area_isochrone', 'geom', 'id', 'percentile_area_isochrone', 'percentile_population', 'population'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(basic_grid_visualization_postgres_update)

    basic_grid_visualization_postgres_select = PGGrantTable(schema='basic', table='grid_visualization', columns=['area_isochrone', 'geom', 'id', 'percentile_area_isochrone', 'percentile_population', 'population'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(basic_grid_visualization_postgres_select)

    basic_grid_visualization_postgres_references = PGGrantTable(schema='basic', table='grid_visualization', columns=['area_isochrone', 'geom', 'id', 'percentile_area_isochrone', 'percentile_population', 'population'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(basic_grid_visualization_postgres_references)

    basic_grid_visualization_postgres_insert = PGGrantTable(schema='basic', table='grid_visualization', columns=['area_isochrone', 'geom', 'id', 'percentile_area_isochrone', 'percentile_population', 'population'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(basic_grid_visualization_postgres_insert)

    basic_grid_calculation_postgres_update = PGGrantTable(schema='basic', table='grid_calculation', columns=['geom', 'grid_visualization_id', 'id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(basic_grid_calculation_postgres_update)

    basic_grid_calculation_postgres_select = PGGrantTable(schema='basic', table='grid_calculation', columns=['geom', 'grid_visualization_id', 'id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(basic_grid_calculation_postgres_select)

    basic_grid_calculation_postgres_references = PGGrantTable(schema='basic', table='grid_calculation', columns=['geom', 'grid_visualization_id', 'id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(basic_grid_calculation_postgres_references)

    basic_grid_calculation_postgres_insert = PGGrantTable(schema='basic', table='grid_calculation', columns=['geom', 'grid_visualization_id', 'id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(basic_grid_calculation_postgres_insert)

    basic_edge_postgres_update = PGGrantTable(schema='basic', table='edge', columns=['bicycle', 'bicycle_road', 'class_id', 'coordinates_3857', 'crossing', 'crossing_delay_category', 'cycleway', 'death_end', 'edge_id', 'foot', 'geom', 'highway', 'id', 'impedance_surface', 'incline', 'incline_percent', 'lanes', 'length_3857', 'length_m', 'lit', 'lit_classified', 'maxspeed_backward', 'maxspeed_forward', 'name', 'one_link_crossing', 'one_way', 'oneway', 'osm_id', 'parking', 'parking_lane_both', 'parking_lane_left', 'parking_lane_right', 'rs_imp', 's_imp', 'scenario_id', 'segregated', 'sidewalk', 'sidewalk_both_width', 'sidewalk_left_width', 'sidewalk_right_width', 'smoothness', 'source', 'surface', 'target', 'wheelchair', 'wheelchair_classified', 'width'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(basic_edge_postgres_update)

    basic_edge_postgres_select = PGGrantTable(schema='basic', table='edge', columns=['bicycle', 'bicycle_road', 'class_id', 'coordinates_3857', 'crossing', 'crossing_delay_category', 'cycleway', 'death_end', 'edge_id', 'foot', 'geom', 'highway', 'id', 'impedance_surface', 'incline', 'incline_percent', 'lanes', 'length_3857', 'length_m', 'lit', 'lit_classified', 'maxspeed_backward', 'maxspeed_forward', 'name', 'one_link_crossing', 'one_way', 'oneway', 'osm_id', 'parking', 'parking_lane_both', 'parking_lane_left', 'parking_lane_right', 'rs_imp', 's_imp', 'scenario_id', 'segregated', 'sidewalk', 'sidewalk_both_width', 'sidewalk_left_width', 'sidewalk_right_width', 'smoothness', 'source', 'surface', 'target', 'wheelchair', 'wheelchair_classified', 'width'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(basic_edge_postgres_select)

    basic_edge_postgres_references = PGGrantTable(schema='basic', table='edge', columns=['bicycle', 'bicycle_road', 'class_id', 'coordinates_3857', 'crossing', 'crossing_delay_category', 'cycleway', 'death_end', 'edge_id', 'foot', 'geom', 'highway', 'id', 'impedance_surface', 'incline', 'incline_percent', 'lanes', 'length_3857', 'length_m', 'lit', 'lit_classified', 'maxspeed_backward', 'maxspeed_forward', 'name', 'one_link_crossing', 'one_way', 'oneway', 'osm_id', 'parking', 'parking_lane_both', 'parking_lane_left', 'parking_lane_right', 'rs_imp', 's_imp', 'scenario_id', 'segregated', 'sidewalk', 'sidewalk_both_width', 'sidewalk_left_width', 'sidewalk_right_width', 'smoothness', 'source', 'surface', 'target', 'wheelchair', 'wheelchair_classified', 'width'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(basic_edge_postgres_references)

    basic_edge_postgres_insert = PGGrantTable(schema='basic', table='edge', columns=['bicycle', 'bicycle_road', 'class_id', 'coordinates_3857', 'crossing', 'crossing_delay_category', 'cycleway', 'death_end', 'edge_id', 'foot', 'geom', 'highway', 'id', 'impedance_surface', 'incline', 'incline_percent', 'lanes', 'length_3857', 'length_m', 'lit', 'lit_classified', 'maxspeed_backward', 'maxspeed_forward', 'name', 'one_link_crossing', 'one_way', 'oneway', 'osm_id', 'parking', 'parking_lane_both', 'parking_lane_left', 'parking_lane_right', 'rs_imp', 's_imp', 'scenario_id', 'segregated', 'sidewalk', 'sidewalk_both_width', 'sidewalk_left_width', 'sidewalk_right_width', 'smoothness', 'source', 'surface', 'target', 'wheelchair', 'wheelchair_classified', 'width'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(basic_edge_postgres_insert)

    basic_building_postgres_update = PGGrantTable(schema='basic', table='building', columns=['amenity', 'area', 'building_levels', 'building_levels_residential', 'building_type', 'geom', 'gross_floor_area_residential', 'height', 'housenumber', 'id', 'osm_id', 'residential_status', 'roof_levels', 'street'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(basic_building_postgres_update)

    basic_building_postgres_select = PGGrantTable(schema='basic', table='building', columns=['amenity', 'area', 'building_levels', 'building_levels_residential', 'building_type', 'geom', 'gross_floor_area_residential', 'height', 'housenumber', 'id', 'osm_id', 'residential_status', 'roof_levels', 'street'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(basic_building_postgres_select)

    basic_building_postgres_references = PGGrantTable(schema='basic', table='building', columns=['amenity', 'area', 'building_levels', 'building_levels_residential', 'building_type', 'geom', 'gross_floor_area_residential', 'height', 'housenumber', 'id', 'osm_id', 'residential_status', 'roof_levels', 'street'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(basic_building_postgres_references)

    basic_building_postgres_insert = PGGrantTable(schema='basic', table='building', columns=['amenity', 'area', 'building_levels', 'building_levels_residential', 'building_type', 'geom', 'gross_floor_area_residential', 'height', 'housenumber', 'id', 'osm_id', 'residential_status', 'roof_levels', 'street'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(basic_building_postgres_insert)

    basic_aoi_postgres_update = PGGrantTable(schema='basic', table='aoi', columns=['category', 'geom', 'id', 'name', 'opening_hours', 'tags', 'wheelchair'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(basic_aoi_postgres_update)

    basic_aoi_postgres_select = PGGrantTable(schema='basic', table='aoi', columns=['category', 'geom', 'id', 'name', 'opening_hours', 'tags', 'wheelchair'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(basic_aoi_postgres_select)

    basic_aoi_postgres_references = PGGrantTable(schema='basic', table='aoi', columns=['category', 'geom', 'id', 'name', 'opening_hours', 'tags', 'wheelchair'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(basic_aoi_postgres_references)

    basic_aoi_postgres_insert = PGGrantTable(schema='basic', table='aoi', columns=['category', 'geom', 'id', 'name', 'opening_hours', 'tags', 'wheelchair'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(basic_aoi_postgres_insert)

    extra_landuse_atkis_postgres_trigger = PGGrantTable(schema='extra', table='landuse_atkis', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(extra_landuse_atkis_postgres_trigger)

    extra_landuse_atkis_postgres_truncate = PGGrantTable(schema='extra', table='landuse_atkis', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(extra_landuse_atkis_postgres_truncate)

    extra_landuse_atkis_postgres_delete = PGGrantTable(schema='extra', table='landuse_atkis', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(extra_landuse_atkis_postgres_delete)

    extra_building_postgres_trigger = PGGrantTable(schema='extra', table='building', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(extra_building_postgres_trigger)

    extra_building_postgres_truncate = PGGrantTable(schema='extra', table='building', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(extra_building_postgres_truncate)

    extra_building_postgres_delete = PGGrantTable(schema='extra', table='building', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(extra_building_postgres_delete)

    extra_accidents_pedestrians_postgres_trigger = PGGrantTable(schema='extra', table='accidents_pedestrians', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(extra_accidents_pedestrians_postgres_trigger)

    extra_accidents_pedestrians_postgres_truncate = PGGrantTable(schema='extra', table='accidents_pedestrians', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(extra_accidents_pedestrians_postgres_truncate)

    extra_accidents_pedestrians_postgres_delete = PGGrantTable(schema='extra', table='accidents_pedestrians', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(extra_accidents_pedestrians_postgres_delete)

    extra_accidents_cyclists_postgres_trigger = PGGrantTable(schema='extra', table='accidents_cyclists', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(extra_accidents_cyclists_postgres_trigger)

    extra_accidents_cyclists_postgres_truncate = PGGrantTable(schema='extra', table='accidents_cyclists', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(extra_accidents_cyclists_postgres_truncate)

    extra_accidents_cyclists_postgres_delete = PGGrantTable(schema='extra', table='accidents_cyclists', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(extra_accidents_cyclists_postgres_delete)

    extra_accidents_postgres_trigger = PGGrantTable(schema='extra', table='accidents', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(extra_accidents_postgres_trigger)

    extra_accidents_postgres_truncate = PGGrantTable(schema='extra', table='accidents', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(extra_accidents_postgres_truncate)

    extra_accidents_postgres_delete = PGGrantTable(schema='extra', table='accidents', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(extra_accidents_postgres_delete)

    extra_landuse_atkis_postgres_update = PGGrantTable(schema='extra', table='landuse_atkis', columns=['geom', 'gid', 'landuse'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(extra_landuse_atkis_postgres_update)

    extra_landuse_atkis_postgres_select = PGGrantTable(schema='extra', table='landuse_atkis', columns=['geom', 'gid', 'landuse'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(extra_landuse_atkis_postgres_select)

    extra_landuse_atkis_postgres_references = PGGrantTable(schema='extra', table='landuse_atkis', columns=['geom', 'gid', 'landuse'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(extra_landuse_atkis_postgres_references)

    extra_landuse_atkis_postgres_insert = PGGrantTable(schema='extra', table='landuse_atkis', columns=['geom', 'gid', 'landuse'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(extra_landuse_atkis_postgres_insert)

    extra_building_postgres_update = PGGrantTable(schema='extra', table='building', columns=['amenity', 'area', 'building_levels', 'building_levels_residential', 'building_type', 'geom', 'gross_floor_area_residential', 'height', 'housenumber', 'id', 'osm_id', 'residential_status', 'roof_levels', 'street'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(extra_building_postgres_update)

    extra_building_postgres_select = PGGrantTable(schema='extra', table='building', columns=['amenity', 'area', 'building_levels', 'building_levels_residential', 'building_type', 'geom', 'gross_floor_area_residential', 'height', 'housenumber', 'id', 'osm_id', 'residential_status', 'roof_levels', 'street'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(extra_building_postgres_select)

    extra_building_postgres_references = PGGrantTable(schema='extra', table='building', columns=['amenity', 'area', 'building_levels', 'building_levels_residential', 'building_type', 'geom', 'gross_floor_area_residential', 'height', 'housenumber', 'id', 'osm_id', 'residential_status', 'roof_levels', 'street'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(extra_building_postgres_references)

    extra_building_postgres_insert = PGGrantTable(schema='extra', table='building', columns=['amenity', 'area', 'building_levels', 'building_levels_residential', 'building_type', 'geom', 'gross_floor_area_residential', 'height', 'housenumber', 'id', 'osm_id', 'residential_status', 'roof_levels', 'street'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(extra_building_postgres_insert)

    extra_accidents_pedestrians_postgres_update = PGGrantTable(schema='extra', table='accidents_pedestrians', columns=['geom', 'gid', 'istfuss', 'istgkfz', 'istkrad', 'istpkw', 'istrad', 'istsonstig', 'linrefx', 'linrefy', 'objectid', 'strzustand', 'uart', 'ugemeinde', 'ujahr', 'ukategorie', 'ukreis', 'uland', 'ulichtverh', 'umonat', 'uregbez', 'ustunde', 'utyp1', 'uwochentag', 'xgcswgs84', 'ygcswgs84'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(extra_accidents_pedestrians_postgres_update)

    extra_accidents_pedestrians_postgres_select = PGGrantTable(schema='extra', table='accidents_pedestrians', columns=['geom', 'gid', 'istfuss', 'istgkfz', 'istkrad', 'istpkw', 'istrad', 'istsonstig', 'linrefx', 'linrefy', 'objectid', 'strzustand', 'uart', 'ugemeinde', 'ujahr', 'ukategorie', 'ukreis', 'uland', 'ulichtverh', 'umonat', 'uregbez', 'ustunde', 'utyp1', 'uwochentag', 'xgcswgs84', 'ygcswgs84'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(extra_accidents_pedestrians_postgres_select)

    extra_accidents_pedestrians_postgres_references = PGGrantTable(schema='extra', table='accidents_pedestrians', columns=['geom', 'gid', 'istfuss', 'istgkfz', 'istkrad', 'istpkw', 'istrad', 'istsonstig', 'linrefx', 'linrefy', 'objectid', 'strzustand', 'uart', 'ugemeinde', 'ujahr', 'ukategorie', 'ukreis', 'uland', 'ulichtverh', 'umonat', 'uregbez', 'ustunde', 'utyp1', 'uwochentag', 'xgcswgs84', 'ygcswgs84'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(extra_accidents_pedestrians_postgres_references)

    extra_accidents_pedestrians_postgres_insert = PGGrantTable(schema='extra', table='accidents_pedestrians', columns=['geom', 'gid', 'istfuss', 'istgkfz', 'istkrad', 'istpkw', 'istrad', 'istsonstig', 'linrefx', 'linrefy', 'objectid', 'strzustand', 'uart', 'ugemeinde', 'ujahr', 'ukategorie', 'ukreis', 'uland', 'ulichtverh', 'umonat', 'uregbez', 'ustunde', 'utyp1', 'uwochentag', 'xgcswgs84', 'ygcswgs84'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(extra_accidents_pedestrians_postgres_insert)

    extra_accidents_cyclists_postgres_update = PGGrantTable(schema='extra', table='accidents_cyclists', columns=['geom', 'gid', 'istfuss', 'istgkfz', 'istkrad', 'istpkw', 'istrad', 'istsonstig', 'linrefx', 'linrefy', 'objectid', 'strzustand', 'uart', 'ugemeinde', 'ujahr', 'ukategorie', 'ukreis', 'uland', 'ulichtverh', 'umonat', 'uregbez', 'ustunde', 'utyp1', 'uwochentag', 'xgcswgs84', 'ygcswgs84'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(extra_accidents_cyclists_postgres_update)

    extra_accidents_cyclists_postgres_select = PGGrantTable(schema='extra', table='accidents_cyclists', columns=['geom', 'gid', 'istfuss', 'istgkfz', 'istkrad', 'istpkw', 'istrad', 'istsonstig', 'linrefx', 'linrefy', 'objectid', 'strzustand', 'uart', 'ugemeinde', 'ujahr', 'ukategorie', 'ukreis', 'uland', 'ulichtverh', 'umonat', 'uregbez', 'ustunde', 'utyp1', 'uwochentag', 'xgcswgs84', 'ygcswgs84'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(extra_accidents_cyclists_postgres_select)

    extra_accidents_cyclists_postgres_references = PGGrantTable(schema='extra', table='accidents_cyclists', columns=['geom', 'gid', 'istfuss', 'istgkfz', 'istkrad', 'istpkw', 'istrad', 'istsonstig', 'linrefx', 'linrefy', 'objectid', 'strzustand', 'uart', 'ugemeinde', 'ujahr', 'ukategorie', 'ukreis', 'uland', 'ulichtverh', 'umonat', 'uregbez', 'ustunde', 'utyp1', 'uwochentag', 'xgcswgs84', 'ygcswgs84'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(extra_accidents_cyclists_postgres_references)

    extra_accidents_cyclists_postgres_insert = PGGrantTable(schema='extra', table='accidents_cyclists', columns=['geom', 'gid', 'istfuss', 'istgkfz', 'istkrad', 'istpkw', 'istrad', 'istsonstig', 'linrefx', 'linrefy', 'objectid', 'strzustand', 'uart', 'ugemeinde', 'ujahr', 'ukategorie', 'ukreis', 'uland', 'ulichtverh', 'umonat', 'uregbez', 'ustunde', 'utyp1', 'uwochentag', 'xgcswgs84', 'ygcswgs84'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(extra_accidents_cyclists_postgres_insert)

    extra_accidents_postgres_update = PGGrantTable(schema='extra', table='accidents', columns=['geom', 'gid', 'istfuss', 'istgkfz', 'istkrad', 'istpkw', 'istrad', 'istsonstig', 'linrefx', 'linrefy', 'objectid', 'strzustand', 'uart', 'ugemeinde', 'ujahr', 'ukategorie', 'ukreis', 'uland', 'ulichtverh', 'umonat', 'uregbez', 'ustunde', 'utyp1', 'uwochentag', 'xgcswgs84', 'ygcswgs84'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(extra_accidents_postgres_update)

    extra_accidents_postgres_select = PGGrantTable(schema='extra', table='accidents', columns=['geom', 'gid', 'istfuss', 'istgkfz', 'istkrad', 'istpkw', 'istrad', 'istsonstig', 'linrefx', 'linrefy', 'objectid', 'strzustand', 'uart', 'ugemeinde', 'ujahr', 'ukategorie', 'ukreis', 'uland', 'ulichtverh', 'umonat', 'uregbez', 'ustunde', 'utyp1', 'uwochentag', 'xgcswgs84', 'ygcswgs84'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(extra_accidents_postgres_select)

    extra_accidents_postgres_references = PGGrantTable(schema='extra', table='accidents', columns=['geom', 'gid', 'istfuss', 'istgkfz', 'istkrad', 'istpkw', 'istrad', 'istsonstig', 'linrefx', 'linrefy', 'objectid', 'strzustand', 'uart', 'ugemeinde', 'ujahr', 'ukategorie', 'ukreis', 'uland', 'ulichtverh', 'umonat', 'uregbez', 'ustunde', 'utyp1', 'uwochentag', 'xgcswgs84', 'ygcswgs84'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(extra_accidents_postgres_references)

    extra_accidents_postgres_insert = PGGrantTable(schema='extra', table='accidents', columns=['geom', 'gid', 'istfuss', 'istgkfz', 'istkrad', 'istpkw', 'istrad', 'istsonstig', 'linrefx', 'linrefy', 'objectid', 'strzustand', 'uart', 'ugemeinde', 'ujahr', 'ukategorie', 'ukreis', 'uland', 'ulichtverh', 'umonat', 'uregbez', 'ustunde', 'utyp1', 'uwochentag', 'xgcswgs84', 'ygcswgs84'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(extra_accidents_postgres_insert)

    customer_reached_edge_heatmap_grid_calculation_postgres_trigger = PGGrantTable(schema='customer', table='reached_edge_heatmap_grid_calculation', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(customer_reached_edge_heatmap_grid_calculation_postgres_trigger)

    customer_reached_edge_heatmap_grid_calculation_postgres_truncate = PGGrantTable(schema='customer', table='reached_edge_heatmap_grid_calculation', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(customer_reached_edge_heatmap_grid_calculation_postgres_truncate)

    customer_reached_edge_heatmap_grid_calculation_postgres_delete = PGGrantTable(schema='customer', table='reached_edge_heatmap_grid_calculation', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(customer_reached_edge_heatmap_grid_calculation_postgres_delete)

    customer_reached_edge_full_heatmap_postgres_trigger = PGGrantTable(schema='customer', table='reached_edge_full_heatmap', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(customer_reached_edge_full_heatmap_postgres_trigger)

    customer_reached_edge_full_heatmap_postgres_truncate = PGGrantTable(schema='customer', table='reached_edge_full_heatmap', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(customer_reached_edge_full_heatmap_postgres_truncate)

    customer_reached_edge_full_heatmap_postgres_delete = PGGrantTable(schema='customer', table='reached_edge_full_heatmap', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(customer_reached_edge_full_heatmap_postgres_delete)

    customer_layer_library_postgres_trigger = PGGrantTable(schema='customer', table='layer_library', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(customer_layer_library_postgres_trigger)

    customer_layer_library_postgres_truncate = PGGrantTable(schema='customer', table='layer_library', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(customer_layer_library_postgres_truncate)

    customer_layer_library_postgres_delete = PGGrantTable(schema='customer', table='layer_library', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(customer_layer_library_postgres_delete)

    customer_isochrone_feature_postgres_trigger = PGGrantTable(schema='customer', table='isochrone_feature', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(customer_isochrone_feature_postgres_trigger)

    customer_isochrone_feature_postgres_truncate = PGGrantTable(schema='customer', table='isochrone_feature', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(customer_isochrone_feature_postgres_truncate)

    customer_isochrone_feature_postgres_delete = PGGrantTable(schema='customer', table='isochrone_feature', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(customer_isochrone_feature_postgres_delete)

    customer_user_study_area_postgres_trigger = PGGrantTable(schema='customer', table='user_study_area', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(customer_user_study_area_postgres_trigger)

    customer_user_study_area_postgres_truncate = PGGrantTable(schema='customer', table='user_study_area', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(customer_user_study_area_postgres_truncate)

    customer_user_study_area_postgres_delete = PGGrantTable(schema='customer', table='user_study_area', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(customer_user_study_area_postgres_delete)

    customer_user_postgres_trigger = PGGrantTable(schema='customer', table='user', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(customer_user_postgres_trigger)

    customer_user_postgres_truncate = PGGrantTable(schema='customer', table='user', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(customer_user_postgres_truncate)

    customer_user_postgres_delete = PGGrantTable(schema='customer', table='user', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(customer_user_postgres_delete)

    customer_way_modified_postgres_trigger = PGGrantTable(schema='customer', table='way_modified', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(customer_way_modified_postgres_trigger)

    customer_way_modified_postgres_truncate = PGGrantTable(schema='customer', table='way_modified', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(customer_way_modified_postgres_truncate)

    customer_way_modified_postgres_delete = PGGrantTable(schema='customer', table='way_modified', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(customer_way_modified_postgres_delete)

    customer_scenario_postgres_trigger = PGGrantTable(schema='customer', table='scenario', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(customer_scenario_postgres_trigger)

    customer_scenario_postgres_truncate = PGGrantTable(schema='customer', table='scenario', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(customer_scenario_postgres_truncate)

    customer_scenario_postgres_delete = PGGrantTable(schema='customer', table='scenario', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(customer_scenario_postgres_delete)

    customer_user_role_postgres_trigger = PGGrantTable(schema='customer', table='user_role', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(customer_user_role_postgres_trigger)

    customer_user_role_postgres_truncate = PGGrantTable(schema='customer', table='user_role', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(customer_user_role_postgres_truncate)

    customer_user_role_postgres_delete = PGGrantTable(schema='customer', table='user_role', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(customer_user_role_postgres_delete)

    customer_style_library_postgres_trigger = PGGrantTable(schema='customer', table='style_library', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(customer_style_library_postgres_trigger)

    customer_style_library_postgres_truncate = PGGrantTable(schema='customer', table='style_library', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(customer_style_library_postgres_truncate)

    customer_style_library_postgres_delete = PGGrantTable(schema='customer', table='style_library', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(customer_style_library_postgres_delete)

    customer_user_customization_postgres_trigger = PGGrantTable(schema='customer', table='user_customization', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(customer_user_customization_postgres_trigger)

    customer_user_customization_postgres_truncate = PGGrantTable(schema='customer', table='user_customization', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(customer_user_customization_postgres_truncate)

    customer_user_customization_postgres_delete = PGGrantTable(schema='customer', table='user_customization', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(customer_user_customization_postgres_delete)

    customer_role_postgres_trigger = PGGrantTable(schema='customer', table='role', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(customer_role_postgres_trigger)

    customer_role_postgres_truncate = PGGrantTable(schema='customer', table='role', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(customer_role_postgres_truncate)

    customer_role_postgres_delete = PGGrantTable(schema='customer', table='role', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(customer_role_postgres_delete)

    customer_reached_poi_heatmap_postgres_trigger = PGGrantTable(schema='customer', table='reached_poi_heatmap', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(customer_reached_poi_heatmap_postgres_trigger)

    customer_reached_poi_heatmap_postgres_truncate = PGGrantTable(schema='customer', table='reached_poi_heatmap', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(customer_reached_poi_heatmap_postgres_truncate)

    customer_reached_poi_heatmap_postgres_delete = PGGrantTable(schema='customer', table='reached_poi_heatmap', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(customer_reached_poi_heatmap_postgres_delete)

    customer_population_modified_postgres_trigger = PGGrantTable(schema='customer', table='population_modified', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(customer_population_modified_postgres_trigger)

    customer_population_modified_postgres_truncate = PGGrantTable(schema='customer', table='population_modified', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(customer_population_modified_postgres_truncate)

    customer_population_modified_postgres_delete = PGGrantTable(schema='customer', table='population_modified', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(customer_population_modified_postgres_delete)

    customer_poi_user_postgres_trigger = PGGrantTable(schema='customer', table='poi_user', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(customer_poi_user_postgres_trigger)

    customer_poi_user_postgres_truncate = PGGrantTable(schema='customer', table='poi_user', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(customer_poi_user_postgres_truncate)

    customer_poi_user_postgres_delete = PGGrantTable(schema='customer', table='poi_user', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(customer_poi_user_postgres_delete)

    customer_customization_postgres_trigger = PGGrantTable(schema='customer', table='customization', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(customer_customization_postgres_trigger)

    customer_customization_postgres_truncate = PGGrantTable(schema='customer', table='customization', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(customer_customization_postgres_truncate)

    customer_customization_postgres_delete = PGGrantTable(schema='customer', table='customization', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(customer_customization_postgres_delete)

    customer_poi_modified_postgres_trigger = PGGrantTable(schema='customer', table='poi_modified', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(customer_poi_modified_postgres_trigger)

    customer_poi_modified_postgres_truncate = PGGrantTable(schema='customer', table='poi_modified', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(customer_poi_modified_postgres_truncate)

    customer_poi_modified_postgres_delete = PGGrantTable(schema='customer', table='poi_modified', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(customer_poi_modified_postgres_delete)

    customer_data_upload_postgres_trigger = PGGrantTable(schema='customer', table='data_upload', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(customer_data_upload_postgres_trigger)

    customer_data_upload_postgres_truncate = PGGrantTable(schema='customer', table='data_upload', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(customer_data_upload_postgres_truncate)

    customer_data_upload_postgres_delete = PGGrantTable(schema='customer', table='data_upload', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(customer_data_upload_postgres_delete)

    customer_organization_postgres_trigger = PGGrantTable(schema='customer', table='organization', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(customer_organization_postgres_trigger)

    customer_organization_postgres_truncate = PGGrantTable(schema='customer', table='organization', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(customer_organization_postgres_truncate)

    customer_organization_postgres_delete = PGGrantTable(schema='customer', table='organization', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(customer_organization_postgres_delete)

    customer_layer_source_postgres_trigger = PGGrantTable(schema='customer', table='layer_source', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(customer_layer_source_postgres_trigger)

    customer_layer_source_postgres_truncate = PGGrantTable(schema='customer', table='layer_source', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(customer_layer_source_postgres_truncate)

    customer_layer_source_postgres_delete = PGGrantTable(schema='customer', table='layer_source', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(customer_layer_source_postgres_delete)

    customer_isochrone_calculation_postgres_trigger = PGGrantTable(schema='customer', table='isochrone_calculation', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(customer_isochrone_calculation_postgres_trigger)

    customer_isochrone_calculation_postgres_truncate = PGGrantTable(schema='customer', table='isochrone_calculation', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(customer_isochrone_calculation_postgres_truncate)

    customer_isochrone_calculation_postgres_delete = PGGrantTable(schema='customer', table='isochrone_calculation', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(customer_isochrone_calculation_postgres_delete)

    customer_building_modified_postgres_trigger = PGGrantTable(schema='customer', table='building_modified', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(customer_building_modified_postgres_trigger)

    customer_building_modified_postgres_truncate = PGGrantTable(schema='customer', table='building_modified', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(customer_building_modified_postgres_truncate)

    customer_building_modified_postgres_delete = PGGrantTable(schema='customer', table='building_modified', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(customer_building_modified_postgres_delete)

    customer_aoi_modified_postgres_trigger = PGGrantTable(schema='customer', table='aoi_modified', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(customer_aoi_modified_postgres_trigger)

    customer_aoi_modified_postgres_truncate = PGGrantTable(schema='customer', table='aoi_modified', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(customer_aoi_modified_postgres_truncate)

    customer_aoi_modified_postgres_delete = PGGrantTable(schema='customer', table='aoi_modified', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(customer_aoi_modified_postgres_delete)

    customer_aoi_user_postgres_trigger = PGGrantTable(schema='customer', table='aoi_user', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(customer_aoi_user_postgres_trigger)

    customer_aoi_user_postgres_truncate = PGGrantTable(schema='customer', table='aoi_user', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(customer_aoi_user_postgres_truncate)

    customer_aoi_user_postgres_delete = PGGrantTable(schema='customer', table='aoi_user', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(customer_aoi_user_postgres_delete)

    customer_way_modified_postgres_update = PGGrantTable(schema='customer', table='way_modified', columns=['bicycle', 'bicycle_road', 'class_id', 'creation_date', 'crossing', 'crossing_delay_category', 'cycleway', 'death_end', 'edit_type', 'foot', 'geom', 'highway', 'id', 'impedance_surface', 'incline', 'incline_percent', 'lanes', 'lit', 'lit_classified', 'maxspeed_backward', 'maxspeed_forward', 'name', 'one_link_crossing', 'one_way', 'oneway', 'osm_id', 'parking', 'parking_lane_both', 'parking_lane_left', 'parking_lane_right', 'rs_imp', 's_imp', 'scenario_id', 'segregated', 'sidewalk', 'sidewalk_both_width', 'sidewalk_left_width', 'sidewalk_right_width', 'smoothness', 'surface', 'way_id', 'way_type', 'wheelchair', 'wheelchair_classified', 'width'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(customer_way_modified_postgres_update)

    customer_way_modified_postgres_select = PGGrantTable(schema='customer', table='way_modified', columns=['bicycle', 'bicycle_road', 'class_id', 'creation_date', 'crossing', 'crossing_delay_category', 'cycleway', 'death_end', 'edit_type', 'foot', 'geom', 'highway', 'id', 'impedance_surface', 'incline', 'incline_percent', 'lanes', 'lit', 'lit_classified', 'maxspeed_backward', 'maxspeed_forward', 'name', 'one_link_crossing', 'one_way', 'oneway', 'osm_id', 'parking', 'parking_lane_both', 'parking_lane_left', 'parking_lane_right', 'rs_imp', 's_imp', 'scenario_id', 'segregated', 'sidewalk', 'sidewalk_both_width', 'sidewalk_left_width', 'sidewalk_right_width', 'smoothness', 'surface', 'way_id', 'way_type', 'wheelchair', 'wheelchair_classified', 'width'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(customer_way_modified_postgres_select)

    customer_way_modified_postgres_references = PGGrantTable(schema='customer', table='way_modified', columns=['bicycle', 'bicycle_road', 'class_id', 'creation_date', 'crossing', 'crossing_delay_category', 'cycleway', 'death_end', 'edit_type', 'foot', 'geom', 'highway', 'id', 'impedance_surface', 'incline', 'incline_percent', 'lanes', 'lit', 'lit_classified', 'maxspeed_backward', 'maxspeed_forward', 'name', 'one_link_crossing', 'one_way', 'oneway', 'osm_id', 'parking', 'parking_lane_both', 'parking_lane_left', 'parking_lane_right', 'rs_imp', 's_imp', 'scenario_id', 'segregated', 'sidewalk', 'sidewalk_both_width', 'sidewalk_left_width', 'sidewalk_right_width', 'smoothness', 'surface', 'way_id', 'way_type', 'wheelchair', 'wheelchair_classified', 'width'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(customer_way_modified_postgres_references)

    customer_way_modified_postgres_insert = PGGrantTable(schema='customer', table='way_modified', columns=['bicycle', 'bicycle_road', 'class_id', 'creation_date', 'crossing', 'crossing_delay_category', 'cycleway', 'death_end', 'edit_type', 'foot', 'geom', 'highway', 'id', 'impedance_surface', 'incline', 'incline_percent', 'lanes', 'lit', 'lit_classified', 'maxspeed_backward', 'maxspeed_forward', 'name', 'one_link_crossing', 'one_way', 'oneway', 'osm_id', 'parking', 'parking_lane_both', 'parking_lane_left', 'parking_lane_right', 'rs_imp', 's_imp', 'scenario_id', 'segregated', 'sidewalk', 'sidewalk_both_width', 'sidewalk_left_width', 'sidewalk_right_width', 'smoothness', 'surface', 'way_id', 'way_type', 'wheelchair', 'wheelchair_classified', 'width'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(customer_way_modified_postgres_insert)

    customer_user_study_area_postgres_update = PGGrantTable(schema='customer', table='user_study_area', columns=['creation_date', 'id', 'study_area_id', 'user_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(customer_user_study_area_postgres_update)

    customer_user_study_area_postgres_select = PGGrantTable(schema='customer', table='user_study_area', columns=['creation_date', 'id', 'study_area_id', 'user_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(customer_user_study_area_postgres_select)

    customer_user_study_area_postgres_references = PGGrantTable(schema='customer', table='user_study_area', columns=['creation_date', 'id', 'study_area_id', 'user_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(customer_user_study_area_postgres_references)

    customer_user_study_area_postgres_insert = PGGrantTable(schema='customer', table='user_study_area', columns=['creation_date', 'id', 'study_area_id', 'user_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(customer_user_study_area_postgres_insert)

    customer_user_role_postgres_update = PGGrantTable(schema='customer', table='user_role', columns=['id', 'role_id', 'user_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(customer_user_role_postgres_update)

    customer_user_role_postgres_select = PGGrantTable(schema='customer', table='user_role', columns=['id', 'role_id', 'user_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(customer_user_role_postgres_select)

    customer_user_role_postgres_references = PGGrantTable(schema='customer', table='user_role', columns=['id', 'role_id', 'user_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(customer_user_role_postgres_references)

    customer_user_role_postgres_insert = PGGrantTable(schema='customer', table='user_role', columns=['id', 'role_id', 'user_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(customer_user_role_postgres_insert)

    customer_user_customization_postgres_update = PGGrantTable(schema='customer', table='user_customization', columns=['creation_date', 'customization_id', 'id', 'setting', 'study_area_id', 'user_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(customer_user_customization_postgres_update)

    customer_user_customization_postgres_select = PGGrantTable(schema='customer', table='user_customization', columns=['creation_date', 'customization_id', 'id', 'setting', 'study_area_id', 'user_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(customer_user_customization_postgres_select)

    customer_user_customization_postgres_references = PGGrantTable(schema='customer', table='user_customization', columns=['creation_date', 'customization_id', 'id', 'setting', 'study_area_id', 'user_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(customer_user_customization_postgres_references)

    customer_user_customization_postgres_insert = PGGrantTable(schema='customer', table='user_customization', columns=['creation_date', 'customization_id', 'id', 'setting', 'study_area_id', 'user_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(customer_user_customization_postgres_insert)

    customer_user_postgres_update = PGGrantTable(schema='customer', table='user', columns=['active_data_upload_ids', 'active_study_area_id', 'creation_date', 'email', 'hashed_password', 'id', 'is_active', 'language_preference', 'limit_scenarios', 'name', 'organization_id', 'storage', 'surname'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(customer_user_postgres_update)

    customer_user_postgres_select = PGGrantTable(schema='customer', table='user', columns=['active_data_upload_ids', 'active_study_area_id', 'creation_date', 'email', 'hashed_password', 'id', 'is_active', 'language_preference', 'limit_scenarios', 'name', 'organization_id', 'storage', 'surname'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(customer_user_postgres_select)

    customer_user_postgres_references = PGGrantTable(schema='customer', table='user', columns=['active_data_upload_ids', 'active_study_area_id', 'creation_date', 'email', 'hashed_password', 'id', 'is_active', 'language_preference', 'limit_scenarios', 'name', 'organization_id', 'storage', 'surname'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(customer_user_postgres_references)

    customer_user_postgres_insert = PGGrantTable(schema='customer', table='user', columns=['active_data_upload_ids', 'active_study_area_id', 'creation_date', 'email', 'hashed_password', 'id', 'is_active', 'language_preference', 'limit_scenarios', 'name', 'organization_id', 'storage', 'surname'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(customer_user_postgres_insert)

    customer_style_library_postgres_update = PGGrantTable(schema='customer', table='style_library', columns=['id', 'name', 'style', 'translation'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(customer_style_library_postgres_update)

    customer_style_library_postgres_select = PGGrantTable(schema='customer', table='style_library', columns=['id', 'name', 'style', 'translation'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(customer_style_library_postgres_select)

    customer_style_library_postgres_references = PGGrantTable(schema='customer', table='style_library', columns=['id', 'name', 'style', 'translation'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(customer_style_library_postgres_references)

    customer_style_library_postgres_insert = PGGrantTable(schema='customer', table='style_library', columns=['id', 'name', 'style', 'translation'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(customer_style_library_postgres_insert)

    customer_scenario_postgres_update = PGGrantTable(schema='customer', table='scenario', columns=['creation_date', 'data_upload_ids', 'id', 'routing_heatmap_computed', 'scenario_name', 'study_area_id', 'user_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(customer_scenario_postgres_update)

    customer_scenario_postgres_select = PGGrantTable(schema='customer', table='scenario', columns=['creation_date', 'data_upload_ids', 'id', 'routing_heatmap_computed', 'scenario_name', 'study_area_id', 'user_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(customer_scenario_postgres_select)

    customer_scenario_postgres_references = PGGrantTable(schema='customer', table='scenario', columns=['creation_date', 'data_upload_ids', 'id', 'routing_heatmap_computed', 'scenario_name', 'study_area_id', 'user_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(customer_scenario_postgres_references)

    customer_scenario_postgres_insert = PGGrantTable(schema='customer', table='scenario', columns=['creation_date', 'data_upload_ids', 'id', 'routing_heatmap_computed', 'scenario_name', 'study_area_id', 'user_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(customer_scenario_postgres_insert)

    customer_role_postgres_update = PGGrantTable(schema='customer', table='role', columns=['id', 'name'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(customer_role_postgres_update)

    customer_role_postgres_select = PGGrantTable(schema='customer', table='role', columns=['id', 'name'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(customer_role_postgres_select)

    customer_role_postgres_references = PGGrantTable(schema='customer', table='role', columns=['id', 'name'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(customer_role_postgres_references)

    customer_role_postgres_insert = PGGrantTable(schema='customer', table='role', columns=['id', 'name'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(customer_role_postgres_insert)

    customer_reached_poi_heatmap_postgres_update = PGGrantTable(schema='customer', table='reached_poi_heatmap', columns=['accessibility_indices', 'costs', 'data_upload_id', 'grid_visualization_ids', 'id', 'poi_uid', 'scenario_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(customer_reached_poi_heatmap_postgres_update)

    customer_reached_poi_heatmap_postgres_select = PGGrantTable(schema='customer', table='reached_poi_heatmap', columns=['accessibility_indices', 'costs', 'data_upload_id', 'grid_visualization_ids', 'id', 'poi_uid', 'scenario_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(customer_reached_poi_heatmap_postgres_select)

    customer_reached_poi_heatmap_postgres_references = PGGrantTable(schema='customer', table='reached_poi_heatmap', columns=['accessibility_indices', 'costs', 'data_upload_id', 'grid_visualization_ids', 'id', 'poi_uid', 'scenario_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(customer_reached_poi_heatmap_postgres_references)

    customer_reached_poi_heatmap_postgres_insert = PGGrantTable(schema='customer', table='reached_poi_heatmap', columns=['accessibility_indices', 'costs', 'data_upload_id', 'grid_visualization_ids', 'id', 'poi_uid', 'scenario_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(customer_reached_poi_heatmap_postgres_insert)

    customer_reached_edge_heatmap_grid_calculation_postgres_update = PGGrantTable(schema='customer', table='reached_edge_heatmap_grid_calculation', columns=['edge_type', 'end_cost', 'end_perc', 'grid_calculation_id', 'id', 'reached_edge_heatmap_id', 'start_cost', 'start_perc'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(customer_reached_edge_heatmap_grid_calculation_postgres_update)

    customer_reached_edge_heatmap_grid_calculation_postgres_select = PGGrantTable(schema='customer', table='reached_edge_heatmap_grid_calculation', columns=['edge_type', 'end_cost', 'end_perc', 'grid_calculation_id', 'id', 'reached_edge_heatmap_id', 'start_cost', 'start_perc'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(customer_reached_edge_heatmap_grid_calculation_postgres_select)

    customer_reached_edge_heatmap_grid_calculation_postgres_references = PGGrantTable(schema='customer', table='reached_edge_heatmap_grid_calculation', columns=['edge_type', 'end_cost', 'end_perc', 'grid_calculation_id', 'id', 'reached_edge_heatmap_id', 'start_cost', 'start_perc'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(customer_reached_edge_heatmap_grid_calculation_postgres_references)

    customer_reached_edge_heatmap_grid_calculation_postgres_insert = PGGrantTable(schema='customer', table='reached_edge_heatmap_grid_calculation', columns=['edge_type', 'end_cost', 'end_perc', 'grid_calculation_id', 'id', 'reached_edge_heatmap_id', 'start_cost', 'start_perc'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(customer_reached_edge_heatmap_grid_calculation_postgres_insert)

    customer_reached_edge_full_heatmap_postgres_update = PGGrantTable(schema='customer', table='reached_edge_full_heatmap', columns=['edge_id', 'geom', 'id', 'scenario_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(customer_reached_edge_full_heatmap_postgres_update)

    customer_reached_edge_full_heatmap_postgres_select = PGGrantTable(schema='customer', table='reached_edge_full_heatmap', columns=['edge_id', 'geom', 'id', 'scenario_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(customer_reached_edge_full_heatmap_postgres_select)

    customer_reached_edge_full_heatmap_postgres_references = PGGrantTable(schema='customer', table='reached_edge_full_heatmap', columns=['edge_id', 'geom', 'id', 'scenario_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(customer_reached_edge_full_heatmap_postgres_references)

    customer_reached_edge_full_heatmap_postgres_insert = PGGrantTable(schema='customer', table='reached_edge_full_heatmap', columns=['edge_id', 'geom', 'id', 'scenario_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(customer_reached_edge_full_heatmap_postgres_insert)

    customer_population_modified_postgres_update = PGGrantTable(schema='customer', table='population_modified', columns=['building_modified_id', 'creation_date', 'geom', 'id', 'population', 'scenario_id', 'sub_study_area_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(customer_population_modified_postgres_update)

    customer_population_modified_postgres_select = PGGrantTable(schema='customer', table='population_modified', columns=['building_modified_id', 'creation_date', 'geom', 'id', 'population', 'scenario_id', 'sub_study_area_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(customer_population_modified_postgres_select)

    customer_population_modified_postgres_references = PGGrantTable(schema='customer', table='population_modified', columns=['building_modified_id', 'creation_date', 'geom', 'id', 'population', 'scenario_id', 'sub_study_area_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(customer_population_modified_postgres_references)

    customer_population_modified_postgres_insert = PGGrantTable(schema='customer', table='population_modified', columns=['building_modified_id', 'creation_date', 'geom', 'id', 'population', 'scenario_id', 'sub_study_area_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(customer_population_modified_postgres_insert)

    customer_poi_user_postgres_update = PGGrantTable(schema='customer', table='poi_user', columns=['category', 'creation_date', 'data_upload_id', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(customer_poi_user_postgres_update)

    customer_poi_user_postgres_select = PGGrantTable(schema='customer', table='poi_user', columns=['category', 'creation_date', 'data_upload_id', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(customer_poi_user_postgres_select)

    customer_poi_user_postgres_references = PGGrantTable(schema='customer', table='poi_user', columns=['category', 'creation_date', 'data_upload_id', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(customer_poi_user_postgres_references)

    customer_poi_user_postgres_insert = PGGrantTable(schema='customer', table='poi_user', columns=['category', 'creation_date', 'data_upload_id', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(customer_poi_user_postgres_insert)

    customer_poi_modified_postgres_update = PGGrantTable(schema='customer', table='poi_modified', columns=['category', 'creation_date', 'data_upload_id', 'edit_type', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'scenario_id', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(customer_poi_modified_postgres_update)

    customer_poi_modified_postgres_select = PGGrantTable(schema='customer', table='poi_modified', columns=['category', 'creation_date', 'data_upload_id', 'edit_type', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'scenario_id', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(customer_poi_modified_postgres_select)

    customer_poi_modified_postgres_references = PGGrantTable(schema='customer', table='poi_modified', columns=['category', 'creation_date', 'data_upload_id', 'edit_type', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'scenario_id', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(customer_poi_modified_postgres_references)

    customer_poi_modified_postgres_insert = PGGrantTable(schema='customer', table='poi_modified', columns=['category', 'creation_date', 'data_upload_id', 'edit_type', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'scenario_id', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(customer_poi_modified_postgres_insert)

    customer_organization_postgres_update = PGGrantTable(schema='customer', table='organization', columns=['creation_date', 'id', 'name'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(customer_organization_postgres_update)

    customer_organization_postgres_select = PGGrantTable(schema='customer', table='organization', columns=['creation_date', 'id', 'name'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(customer_organization_postgres_select)

    customer_organization_postgres_references = PGGrantTable(schema='customer', table='organization', columns=['creation_date', 'id', 'name'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(customer_organization_postgres_references)

    customer_organization_postgres_insert = PGGrantTable(schema='customer', table='organization', columns=['creation_date', 'id', 'name'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(customer_organization_postgres_insert)

    customer_layer_source_postgres_update = PGGrantTable(schema='customer', table='layer_source', columns=['id', 'name'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(customer_layer_source_postgres_update)

    customer_layer_source_postgres_select = PGGrantTable(schema='customer', table='layer_source', columns=['id', 'name'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(customer_layer_source_postgres_select)

    customer_layer_source_postgres_references = PGGrantTable(schema='customer', table='layer_source', columns=['id', 'name'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(customer_layer_source_postgres_references)

    customer_layer_source_postgres_insert = PGGrantTable(schema='customer', table='layer_source', columns=['id', 'name'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(customer_layer_source_postgres_insert)

    customer_layer_library_postgres_update = PGGrantTable(schema='customer', table='layer_library', columns=['access_token', 'date', 'date_1', 'id', 'legend_urls', 'map_attribution', 'max_resolution', 'min_resolution', 'name', 'source', 'source_1', 'special_attribute', 'style_library_name', 'type', 'url'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(customer_layer_library_postgres_update)

    customer_layer_library_postgres_select = PGGrantTable(schema='customer', table='layer_library', columns=['access_token', 'date', 'date_1', 'id', 'legend_urls', 'map_attribution', 'max_resolution', 'min_resolution', 'name', 'source', 'source_1', 'special_attribute', 'style_library_name', 'type', 'url'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(customer_layer_library_postgres_select)

    customer_layer_library_postgres_references = PGGrantTable(schema='customer', table='layer_library', columns=['access_token', 'date', 'date_1', 'id', 'legend_urls', 'map_attribution', 'max_resolution', 'min_resolution', 'name', 'source', 'source_1', 'special_attribute', 'style_library_name', 'type', 'url'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(customer_layer_library_postgres_references)

    customer_layer_library_postgres_insert = PGGrantTable(schema='customer', table='layer_library', columns=['access_token', 'date', 'date_1', 'id', 'legend_urls', 'map_attribution', 'max_resolution', 'min_resolution', 'name', 'source', 'source_1', 'special_attribute', 'style_library_name', 'type', 'url'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(customer_layer_library_postgres_insert)

    customer_isochrone_feature_postgres_update = PGGrantTable(schema='customer', table='isochrone_feature', columns=['geom', 'id', 'isochrone_calculation_id', 'reached_opportunities', 'step'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(customer_isochrone_feature_postgres_update)

    customer_isochrone_feature_postgres_select = PGGrantTable(schema='customer', table='isochrone_feature', columns=['geom', 'id', 'isochrone_calculation_id', 'reached_opportunities', 'step'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(customer_isochrone_feature_postgres_select)

    customer_isochrone_feature_postgres_references = PGGrantTable(schema='customer', table='isochrone_feature', columns=['geom', 'id', 'isochrone_calculation_id', 'reached_opportunities', 'step'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(customer_isochrone_feature_postgres_references)

    customer_isochrone_feature_postgres_insert = PGGrantTable(schema='customer', table='isochrone_feature', columns=['geom', 'id', 'isochrone_calculation_id', 'reached_opportunities', 'step'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(customer_isochrone_feature_postgres_insert)

    customer_isochrone_calculation_postgres_update = PGGrantTable(schema='customer', table='isochrone_calculation', columns=['calculation_type', 'creation_date', 'id', 'modus', 'parent_id', 'routing_profile', 'scenario_id', 'speed', 'starting_point', 'user_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(customer_isochrone_calculation_postgres_update)

    customer_isochrone_calculation_postgres_select = PGGrantTable(schema='customer', table='isochrone_calculation', columns=['calculation_type', 'creation_date', 'id', 'modus', 'parent_id', 'routing_profile', 'scenario_id', 'speed', 'starting_point', 'user_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(customer_isochrone_calculation_postgres_select)

    customer_isochrone_calculation_postgres_references = PGGrantTable(schema='customer', table='isochrone_calculation', columns=['calculation_type', 'creation_date', 'id', 'modus', 'parent_id', 'routing_profile', 'scenario_id', 'speed', 'starting_point', 'user_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(customer_isochrone_calculation_postgres_references)

    customer_isochrone_calculation_postgres_insert = PGGrantTable(schema='customer', table='isochrone_calculation', columns=['calculation_type', 'creation_date', 'id', 'modus', 'parent_id', 'routing_profile', 'scenario_id', 'speed', 'starting_point', 'user_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(customer_isochrone_calculation_postgres_insert)

    customer_data_upload_postgres_update = PGGrantTable(schema='customer', table='data_upload', columns=['creation_date', 'data_type', 'id', 'reached_poi_heatmap_computed', 'study_area_id', 'upload_grid_ids', 'upload_size', 'upload_type', 'user_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(customer_data_upload_postgres_update)

    customer_data_upload_postgres_select = PGGrantTable(schema='customer', table='data_upload', columns=['creation_date', 'data_type', 'id', 'reached_poi_heatmap_computed', 'study_area_id', 'upload_grid_ids', 'upload_size', 'upload_type', 'user_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(customer_data_upload_postgres_select)

    customer_data_upload_postgres_references = PGGrantTable(schema='customer', table='data_upload', columns=['creation_date', 'data_type', 'id', 'reached_poi_heatmap_computed', 'study_area_id', 'upload_grid_ids', 'upload_size', 'upload_type', 'user_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(customer_data_upload_postgres_references)

    customer_data_upload_postgres_insert = PGGrantTable(schema='customer', table='data_upload', columns=['creation_date', 'data_type', 'id', 'reached_poi_heatmap_computed', 'study_area_id', 'upload_grid_ids', 'upload_size', 'upload_type', 'user_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(customer_data_upload_postgres_insert)

    customer_customization_postgres_update = PGGrantTable(schema='customer', table='customization', columns=['id', 'role_id', 'setting', 'type'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(customer_customization_postgres_update)

    customer_customization_postgres_select = PGGrantTable(schema='customer', table='customization', columns=['id', 'role_id', 'setting', 'type'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(customer_customization_postgres_select)

    customer_customization_postgres_references = PGGrantTable(schema='customer', table='customization', columns=['id', 'role_id', 'setting', 'type'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(customer_customization_postgres_references)

    customer_customization_postgres_insert = PGGrantTable(schema='customer', table='customization', columns=['id', 'role_id', 'setting', 'type'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(customer_customization_postgres_insert)

    customer_building_modified_postgres_update = PGGrantTable(schema='customer', table='building_modified', columns=['amenity', 'area', 'building_id', 'building_levels', 'building_levels_residential', 'building_type', 'creation_date', 'edit_type', 'geom', 'gross_floor_area_residential', 'height', 'housenumber', 'id', 'population', 'residential_status', 'roof_levels', 'scenario_id', 'street'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(customer_building_modified_postgres_update)

    customer_building_modified_postgres_select = PGGrantTable(schema='customer', table='building_modified', columns=['amenity', 'area', 'building_id', 'building_levels', 'building_levels_residential', 'building_type', 'creation_date', 'edit_type', 'geom', 'gross_floor_area_residential', 'height', 'housenumber', 'id', 'population', 'residential_status', 'roof_levels', 'scenario_id', 'street'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(customer_building_modified_postgres_select)

    customer_building_modified_postgres_references = PGGrantTable(schema='customer', table='building_modified', columns=['amenity', 'area', 'building_id', 'building_levels', 'building_levels_residential', 'building_type', 'creation_date', 'edit_type', 'geom', 'gross_floor_area_residential', 'height', 'housenumber', 'id', 'population', 'residential_status', 'roof_levels', 'scenario_id', 'street'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(customer_building_modified_postgres_references)

    customer_building_modified_postgres_insert = PGGrantTable(schema='customer', table='building_modified', columns=['amenity', 'area', 'building_id', 'building_levels', 'building_levels_residential', 'building_type', 'creation_date', 'edit_type', 'geom', 'gross_floor_area_residential', 'height', 'housenumber', 'id', 'population', 'residential_status', 'roof_levels', 'scenario_id', 'street'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(customer_building_modified_postgres_insert)

    customer_aoi_user_postgres_update = PGGrantTable(schema='customer', table='aoi_user', columns=['category', 'creation_date', 'data_upload_id', 'geom', 'id', 'name', 'opening_hours', 'tags', 'wheelchair'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(customer_aoi_user_postgres_update)

    customer_aoi_user_postgres_select = PGGrantTable(schema='customer', table='aoi_user', columns=['category', 'creation_date', 'data_upload_id', 'geom', 'id', 'name', 'opening_hours', 'tags', 'wheelchair'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(customer_aoi_user_postgres_select)

    customer_aoi_user_postgres_references = PGGrantTable(schema='customer', table='aoi_user', columns=['category', 'creation_date', 'data_upload_id', 'geom', 'id', 'name', 'opening_hours', 'tags', 'wheelchair'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(customer_aoi_user_postgres_references)

    customer_aoi_user_postgres_insert = PGGrantTable(schema='customer', table='aoi_user', columns=['category', 'creation_date', 'data_upload_id', 'geom', 'id', 'name', 'opening_hours', 'tags', 'wheelchair'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(customer_aoi_user_postgres_insert)

    customer_aoi_modified_postgres_update = PGGrantTable(schema='customer', table='aoi_modified', columns=['category', 'creation_date', 'geom', 'id', 'name', 'opening_hours', 'scenario_id', 'tags', 'wheelchair'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(customer_aoi_modified_postgres_update)

    customer_aoi_modified_postgres_select = PGGrantTable(schema='customer', table='aoi_modified', columns=['category', 'creation_date', 'geom', 'id', 'name', 'opening_hours', 'scenario_id', 'tags', 'wheelchair'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(customer_aoi_modified_postgres_select)

    customer_aoi_modified_postgres_references = PGGrantTable(schema='customer', table='aoi_modified', columns=['category', 'creation_date', 'geom', 'id', 'name', 'opening_hours', 'scenario_id', 'tags', 'wheelchair'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(customer_aoi_modified_postgres_references)

    customer_aoi_modified_postgres_insert = PGGrantTable(schema='customer', table='aoi_modified', columns=['category', 'creation_date', 'geom', 'id', 'name', 'opening_hours', 'scenario_id', 'tags', 'wheelchair'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(customer_aoi_modified_postgres_insert)

    public_distinct_intersection_existing_network_postgres_trigger = PGGrantTable(schema='public', table='distinct_intersection_existing_network', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(public_distinct_intersection_existing_network_postgres_trigger)

    public_distinct_intersection_existing_network_postgres_truncate = PGGrantTable(schema='public', table='distinct_intersection_existing_network', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(public_distinct_intersection_existing_network_postgres_truncate)

    public_distinct_intersection_existing_network_postgres_delete = PGGrantTable(schema='public', table='distinct_intersection_existing_network', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(public_distinct_intersection_existing_network_postgres_delete)

    public_new_pois_postgres_trigger = PGGrantTable(schema='public', table='new_pois', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(public_new_pois_postgres_trigger)

    public_new_pois_postgres_truncate = PGGrantTable(schema='public', table='new_pois', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(public_new_pois_postgres_truncate)

    public_new_pois_postgres_delete = PGGrantTable(schema='public', table='new_pois', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(public_new_pois_postgres_delete)

    public_test_grid_postgres_trigger = PGGrantTable(schema='public', table='test_grid', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(public_test_grid_postgres_trigger)

    public_test_grid_postgres_truncate = PGGrantTable(schema='public', table='test_grid', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(public_test_grid_postgres_truncate)

    public_test_grid_postgres_delete = PGGrantTable(schema='public', table='test_grid', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(public_test_grid_postgres_delete)

    public_alembic_version_postgres_trigger = PGGrantTable(schema='public', table='alembic_version', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(public_alembic_version_postgres_trigger)

    public_alembic_version_postgres_truncate = PGGrantTable(schema='public', table='alembic_version', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(public_alembic_version_postgres_truncate)

    public_alembic_version_postgres_delete = PGGrantTable(schema='public', table='alembic_version', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(public_alembic_version_postgres_delete)

    public_test_postgres_trigger = PGGrantTable(schema='public', table='test', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(public_test_postgres_trigger)

    public_test_postgres_truncate = PGGrantTable(schema='public', table='test', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(public_test_postgres_truncate)

    public_test_postgres_delete = PGGrantTable(schema='public', table='test', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(public_test_postgres_delete)

    public_test_grid_postgres_update = PGGrantTable(schema='public', table='test_grid', columns=['geom', 'grid_visualization_id', 'sum'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(public_test_grid_postgres_update)

    public_test_grid_postgres_select = PGGrantTable(schema='public', table='test_grid', columns=['geom', 'grid_visualization_id', 'sum'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(public_test_grid_postgres_select)

    public_test_grid_postgres_references = PGGrantTable(schema='public', table='test_grid', columns=['geom', 'grid_visualization_id', 'sum'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(public_test_grid_postgres_references)

    public_test_grid_postgres_insert = PGGrantTable(schema='public', table='test_grid', columns=['geom', 'grid_visualization_id', 'sum'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(public_test_grid_postgres_insert)

    public_test_postgres_update = PGGrantTable(schema='public', table='test', columns=['category', 'geom', 'grid_visualization_ids', 'housenumber', 'id', 'name', 'opening_hours', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(public_test_postgres_update)

    public_test_postgres_select = PGGrantTable(schema='public', table='test', columns=['category', 'geom', 'grid_visualization_ids', 'housenumber', 'id', 'name', 'opening_hours', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(public_test_postgres_select)

    public_test_postgres_references = PGGrantTable(schema='public', table='test', columns=['category', 'geom', 'grid_visualization_ids', 'housenumber', 'id', 'name', 'opening_hours', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(public_test_postgres_references)

    public_test_postgres_insert = PGGrantTable(schema='public', table='test', columns=['category', 'geom', 'grid_visualization_ids', 'housenumber', 'id', 'name', 'opening_hours', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(public_test_postgres_insert)

    public_new_pois_postgres_update = PGGrantTable(schema='public', table='new_pois', columns=['category', 'creation_date', 'data_upload_id', 'edit_type', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'scenario_id', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(public_new_pois_postgres_update)

    public_new_pois_postgres_select = PGGrantTable(schema='public', table='new_pois', columns=['category', 'creation_date', 'data_upload_id', 'edit_type', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'scenario_id', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(public_new_pois_postgres_select)

    public_new_pois_postgres_references = PGGrantTable(schema='public', table='new_pois', columns=['category', 'creation_date', 'data_upload_id', 'edit_type', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'scenario_id', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(public_new_pois_postgres_references)

    public_new_pois_postgres_insert = PGGrantTable(schema='public', table='new_pois', columns=['category', 'creation_date', 'data_upload_id', 'edit_type', 'geom', 'housenumber', 'id', 'name', 'opening_hours', 'scenario_id', 'street', 'tags', 'uid', 'wheelchair', 'zipcode'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(public_new_pois_postgres_insert)

    public_distinct_intersection_existing_network_postgres_update = PGGrantTable(schema='public', table='distinct_intersection_existing_network', columns=['geom', 'id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(public_distinct_intersection_existing_network_postgres_update)

    public_distinct_intersection_existing_network_postgres_select = PGGrantTable(schema='public', table='distinct_intersection_existing_network', columns=['geom', 'id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(public_distinct_intersection_existing_network_postgres_select)

    public_distinct_intersection_existing_network_postgres_references = PGGrantTable(schema='public', table='distinct_intersection_existing_network', columns=['geom', 'id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(public_distinct_intersection_existing_network_postgres_references)

    public_distinct_intersection_existing_network_postgres_insert = PGGrantTable(schema='public', table='distinct_intersection_existing_network', columns=['geom', 'id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(public_distinct_intersection_existing_network_postgres_insert)

    public_alembic_version_postgres_update = PGGrantTable(schema='public', table='alembic_version', columns=['version_num'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(public_alembic_version_postgres_update)

    public_alembic_version_postgres_select = PGGrantTable(schema='public', table='alembic_version', columns=['version_num'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(public_alembic_version_postgres_select)

    public_alembic_version_postgres_references = PGGrantTable(schema='public', table='alembic_version', columns=['version_num'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(public_alembic_version_postgres_references)

    public_alembic_version_postgres_insert = PGGrantTable(schema='public', table='alembic_version', columns=['version_num'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(public_alembic_version_postgres_insert)

    basic_poi_aoi_visualization = PGFunction(
        schema="basic",
        signature="poi_aoi_visualization(user_id_input integer, scenario_id_input integer, active_upload_ids integer[], active_study_area_id integer)",
        definition="returns TABLE(id integer, uid text, category text, name text, opening_hours text, street text, housenumber text, zipcode text, edit_type text, geom geometry)\n LANGUAGE plpgsql\nAS $function$\nDECLARE \t\n\taoi_categories TEXT[]; \n\tpoi_categories jsonb = basic.poi_categories(user_id_input);\n\tdata_upload_poi_categories TEXT[] = '{}'::TEXT[];\n\tcombined_poi_categories text[];\n\texcluded_pois_id text[] := ARRAY[]::text[]; \n\tbuffer_geom_study_area geometry; \nBEGIN\n\tdata_upload_poi_categories = basic.poi_categories_data_uploads(user_id_input);\n\n\t/*Get combined poi categories*/\n\tSELECT ARRAY_AGG(c.category)\n\tINTO combined_poi_categories\n\tFROM \t\n\t(\n\t\tSELECT jsonb_array_elements_text(poi_categories -> 'true') category\n\t\tUNION ALL \n\t\tSELECT jsonb_array_elements_text(poi_categories -> 'false') category\n\t) c;\n\t\n\tRAISE NOTICE '%', excluded_pois_id; \n\tRAISE NOTICE '%', active_upload_ids ; \n\tRAISE NOTICE '%', combined_poi_categories  ; \n\n\n\t/*Prepare AOI categories*/\n\tDROP TABLE IF EXISTS aoi_groups_default; \n\tCREATE TEMP TABLE aoi_groups_default AS \n\tWITH aoi_groups AS \n\t(\n\t\tSELECT jsonb_array_elements(basic.select_customization('aoi_groups')) aoi_group\n\t)\n\tSELECT jsonb_array_elements(p.aoi_group -> jsonb_object_keys(p.aoi_group) -> 'children') AS aoi_category \n\tFROM aoi_groups p;\n\n\tSELECT ARRAY_AGG(object_keys) AS aoi_category\n\tINTO aoi_categories\n\tFROM aoi_groups_default  p, LATERAL jsonb_object_keys(p.aoi_category) object_keys;  \n\t\n\t/*Check if POI scenario*/\n\tIF scenario_id_input <> 0 THEN \n\t\texcluded_pois_id = basic.modified_pois(scenario_id_input);\n\tEND IF; \n\t/*Buffer study area to avoid border effects*/\n\tbuffer_geom_study_area = (SELECT buffer_geom_heatmap AS geom FROM basic.study_area s WHERE s.id = active_study_area_id);\n\n    RETURN query\n   \tSELECT p.id, p.uid, p.category, p.name, p.opening_hours, p.street, p.housenumber, p.zipcode, NULL AS edit_type, p.geom  \n\tFROM basic.poi p\n\tWHERE p.category IN (SELECT UNNEST(combined_poi_categories))\n\tAND p.uid NOT IN (SELECT UNNEST(excluded_pois_id))\n\tAND p.geom && buffer_geom_study_area\n\tAND p.category NOT IN (SELECT UNNEST(data_upload_poi_categories));\n\t\n\tRETURN query \n\tSELECT p.id, p.uid, p.category, p.name, p.opening_hours, p.street, p.housenumber, p.zipcode, NULL AS edit_type, p.geom  \n\tFROM customer.poi_user p\n\tWHERE p.category IN (SELECT UNNEST(combined_poi_categories))\n\tAND p.data_upload_id IN (SELECT UNNEST(active_upload_ids))\n\tAND p.uid NOT IN (SELECT UNNEST(excluded_pois_id))\n\tAND p.geom && buffer_geom_study_area;\n\t\n\tRETURN query \n\t/*No scenarios nor aoi_user is implemented at the moment*/\n\tSELECT p.id, NULL, p.category, p.name, p.opening_hours, NULL AS street, NULL AS housenumber, NULL AS zipcode, NULL AS edit_type, p.geom\n\tFROM basic.aoi p \n\tWHERE p.category IN (SELECT UNNEST(aoi_categories))\n\tAND p.geom && buffer_geom_study_area; \n\t\n\tIF scenario_id_input <> 0 THEN \n\t   \tRETURN query \n\t   \tSELECT p.id, p.uid, p.category, p.name, p.opening_hours, p.street, p.housenumber, p.zipcode, p.edit_type, p.geom  \n\t\tFROM customer.poi_modified p\n\t\tWHERE p.category IN (SELECT UNNEST(combined_poi_categories))\n\t\tAND p.geom && buffer_geom_study_area\n\t\tAND p.scenario_id = scenario_id_input; \n\t   \t\n\t\tRETURN query\n\t   \tSELECT p.id, p.uid, p.category, p.name, p.opening_hours, p.street, p.housenumber, p.zipcode, 'd' AS edit_type, p.geom  \n\t\tFROM basic.poi p\n\t\tWHERE p.category IN (SELECT UNNEST(combined_poi_categories))\n\t\tAND p.uid IN (SELECT UNNEST(excluded_pois_id))\n\t\tAND p.geom && buffer_geom_study_area\n\t\tAND p.category NOT IN (SELECT UNNEST(data_upload_poi_categories));\n\t\n\t\tRETURN query \n\t\tSELECT p.id, p.uid, p.category, p.name, p.opening_hours, p.street, p.housenumber, p.zipcode, 'd' AS edit_type, p.geom  \n\t\tFROM customer.poi_user p\n\t\tWHERE p.category IN (SELECT UNNEST(combined_poi_categories))\n\t\tAND p.data_upload_id IN (SELECT UNNEST(active_upload_ids))\n\t\tAND p.uid IN (SELECT UNNEST(excluded_pois_id))\n\t\tAND p.geom && buffer_geom_study_area;\n\tEND IF; \nEND ;\n$function$"
    )
    op.replace_entity(basic_poi_aoi_visualization)
    basic_prepare_heatmap_local_accessibility = PGFunction(
        schema="basic",
        signature="prepare_heatmap_local_accessibility(amenities_json jsonb, user_id_input integer, active_study_area_id integer, modus_input text DEFAULT 'default'::text, scenario_id_input integer DEFAULT 0, data_upload_ids integer[] DEFAULT '{}'::integer[])",
        definition="returns TABLE(grid_visualization_id bigint, accessibility_index bigint)\n LANGUAGE plpgsql\nAS $function$\nDECLARE\n\tarray_amenities text[];\n\tpois_one_entrance jsonb := basic.poi_categories(user_id_input) -> 'false';\n\tpois_more_entrances jsonb := basic.poi_categories(user_id_input) -> 'true';\n\tsensitivities integer[]; \n\ttranslation_sensitivities jsonb;\n\texcluded_poi_uids text[] := '{}'::TEXT[];\nBEGIN\n  \t\n\tSELECT ARRAY_AGG(s.sensitivity::integer) \n\tINTO sensitivities \n\tFROM (\n\t\tSELECT jsonb_array_elements_text(basic.select_customization('heatmap_sensitivities')) sensitivity \n\t) s;\n\n\tSELECT jsonb_agg(a.category)\n\tINTO pois_one_entrance  \n\tFROM jsonb_object_keys(amenities_json) AS a(category), jsonb_array_elements_text(pois_one_entrance) AS o(category) \n\tWHERE a.category = o.category; \n\t\n\tSELECT jsonb_agg(a.category)\n\tINTO pois_more_entrances  \n\tFROM jsonb_object_keys(amenities_json) AS a(category), jsonb_array_elements_text(pois_more_entrances) AS o(category) \n\tWHERE a.category = o.category; \n\n\tSELECT jsonb_object_agg(k, (sensitivities  # (v ->> 'sensitivity')::integer)::smallint)\n\tINTO translation_sensitivities\n\tFROM jsonb_each(amenities_json) AS u(k, v);\n\n\tIF modus_input <> 'default' AND scenario_id_input <> 0 THEN \n\t\texcluded_poi_uids = basic.modified_pois(scenario_id_input); \n\tEND IF; \n\n\tRETURN query\n\tSELECT u.grid_visualization_id, (u.accessibility_index * (amenities_json -> x.category ->> 'weight')::SMALLINT)::bigint AS accessibility_index  \n\tFROM (\n\t\tSELECT grid_visualization_ids, accessibility_indices[(translation_sensitivities ->> p.category)::integer\\:(translation_sensitivities ->> p.category)::integer][1\\:], p.category\n\t\tFROM customer.reached_poi_heatmap r, \n\t\t(\n\t\t\tSELECT p.uid, p.category \n\t\t\tFROM basic.study_area s, basic.poi p \n\t\t\tWHERE ST_Intersects(p.geom, s.buffer_geom_heatmap) \n\t\t\tAND s.id = active_study_area_id\n\t\t\tAND p.category IN (SELECT jsonb_array_elements_text(pois_one_entrance))\n\t\t\tAND p.uid NOT IN (SELECT UNNEST(excluded_poi_uids))\n\t\t) p  \n\t\tWHERE p.uid = r.poi_uid \n\t\tAND r.scenario_id IS NULL \n\t)x, UNNEST(x.grid_visualization_ids, x.accessibility_indices) AS u(grid_visualization_id, accessibility_index);\n\t\n\tRETURN query \n\tSELECT u.grid_visualization_id, (max(u.accessibility_index) * (amenities_json -> x.category ->> 'weight')::SMALLINT)::bigint AS accessibility_index  \n\tFROM (\n\t\tSELECT grid_visualization_ids, accessibility_indices[(translation_sensitivities ->> p.category)::integer\\:(translation_sensitivities ->> p.category)::integer][1\\:], \n\t\tp.category, p.name\n\t\tFROM customer.reached_poi_heatmap r, \n\t\t(\n\t\t\tSELECT p.uid, p.category, p.name \n\t\t\tFROM basic.study_area s, basic.poi p \n\t\t\tWHERE ST_Intersects(p.geom, s.buffer_geom_heatmap) \n\t\t\tAND s.id = active_study_area_id\n\t\t\tAND p.uid NOT IN (SELECT UNNEST(excluded_poi_uids))\n\t\t\tAND p.category IN (SELECT jsonb_array_elements_text(pois_more_entrances))\n\t\t) p  \n\t\tWHERE p.uid = r.poi_uid \n\t\tAND r.scenario_id IS NULL \n\t)x, UNNEST(x.grid_visualization_ids, x.accessibility_indices) AS u(grid_visualization_id, accessibility_index)\n\tGROUP BY u.grid_visualization_id, x.category, x.name;  \n\t\n\tIF data_upload_ids <> '{}'::integer[] THEN \n\t\tRETURN query\n\t\tSELECT u.grid_visualization_id, (u.accessibility_index * (amenities_json -> x.category ->> 'weight')::SMALLINT)::bigint AS accessibility_index  \n\t\tFROM (\n\t\t\tSELECT grid_visualization_ids, accessibility_indices[(translation_sensitivities ->> p.category)::integer\\:(translation_sensitivities ->> p.category)::integer][1\\:], p.category\n\t\t\tFROM customer.reached_poi_heatmap r, \n\t\t\t(\n\t\t\t\tSELECT p.uid, p.category \n\t\t\t\tFROM basic.study_area s, customer.poi_user p \n\t\t\t\tWHERE ST_Intersects(p.geom, s.buffer_geom_heatmap) \n\t\t\t\tAND s.id = active_study_area_id\n\t\t\t\tAND p.data_upload_id IN (SELECT UNNEST(data_upload_ids))\n\t\t\t\tAND p.category IN (SELECT jsonb_array_elements_text(pois_one_entrance))\n\t\t\t\tAND p.uid NOT IN (SELECT UNNEST(excluded_poi_uids))\n\t\t\t) p    \n\t\t\tWHERE p.uid = r.poi_uid \n\t\t\tAND r.scenario_id IS NULL \n\t\t)x, UNNEST(x.grid_visualization_ids, x.accessibility_indices) AS u(grid_visualization_id, accessibility_index);\n\t\n\t\tRETURN query \n\t\tSELECT u.grid_visualization_id, (max(u.accessibility_index) * (amenities_json -> x.category ->> 'weight')::SMALLINT)::bigint AS accessibility_index  \n\t\tFROM (\n\t\t\tSELECT grid_visualization_ids, accessibility_indices[(translation_sensitivities ->> p.category)::integer\\:(translation_sensitivities ->> p.category)::integer][1\\:], \n\t\t\tp.category, p.name\n\t\t\tFROM customer.reached_poi_heatmap r, \n\t\t\t(\n\t\t\t\tSELECT p.uid, p.category, p.name \n\t\t\t\tFROM basic.study_area s, customer.poi_user p \n\t\t\t\tWHERE ST_Intersects(p.geom, s.buffer_geom_heatmap) \n\t\t\t\tAND s.id = active_study_area_id\n\t\t\t\tAND p.uid NOT IN (SELECT UNNEST(excluded_poi_uids))\n\t\t\t\tAND p.category IN (SELECT jsonb_array_elements_text(pois_more_entrances))\n\t\t\t\tAND p.data_upload_id IN (SELECT UNNEST(data_upload_ids))\n\t\t\t) p    \n\t\t\tWHERE p.uid = r.poi_uid \t\n\t\t\tAND r.scenario_id IS NULL \n\t\t)x, UNNEST(x.grid_visualization_ids, x.accessibility_indices) AS u(grid_visualization_id, accessibility_index)\n\t\tGROUP BY u.grid_visualization_id, x.category, x.name;  \t\n\tEND IF;\n\t\n\tIF modus_input <> 'default' AND scenario_id_input <> 0 THEN \n\t\tRETURN query \n\t\tSELECT u.grid_visualization_id, (u.accessibility_index * (amenities_json -> x.category ->> 'weight')::SMALLINT)::bigint AS accessibility_index  \n\t\tFROM (\n\t\t\tSELECT grid_visualization_ids, accessibility_indices[(translation_sensitivities ->> p.category)::integer\\:(translation_sensitivities ->> p.category)::integer][1\\:], p.category\n\t\t\tFROM customer.reached_poi_heatmap r, \n\t\t\t(\n\t\t\t\tSELECT p.uid, p.category, p.scenario_id  \n\t\t\t\tFROM basic.study_area s, customer.poi_modified  p \n\t\t\t\tWHERE ST_Intersects(p.geom, s.buffer_geom_heatmap) \n\t\t\t\tAND s.id = active_study_area_id\n\t\t\t\tAND p.edit_type <> 'd'\n\t\t\t\tAND p.scenario_id = scenario_id_input \n\t\t\t) p   \n\t\t\tWHERE p.uid = r.poi_uid \n\t\t\tAND r.scenario_id = scenario_id_input \n\t\t\tAND p.category IN (SELECT jsonb_array_elements_text(pois_one_entrance))\n\t\t)x, UNNEST(x.grid_visualization_ids, x.accessibility_indices) AS u(grid_visualization_id, accessibility_index);\n\t\t\n\t\tRETURN query \n\t\tSELECT u.grid_visualization_id, (max(u.accessibility_index) * (amenities_json -> x.category ->> 'weight')::SMALLINT)::bigint AS accessibility_index  \n\t\tFROM (\n\t\t\tSELECT grid_visualization_ids, accessibility_indices[(translation_sensitivities ->> p.category)::integer\\:(translation_sensitivities ->> p.category)::integer][1\\:], \n\t\t\tp.category, p.name\n\t\t\tFROM customer.reached_poi_heatmap r, \n\t\t\t(\n\t\t\t\tSELECT p.uid, p.category, p.name, p.scenario_id FROM basic.study_area s, customer.poi_modified  p \n\t\t\t\tWHERE ST_Intersects(p.geom, s.buffer_geom_heatmap) \n\t\t\t\tAND s.id = active_study_area_id\n\t\t\t\tAND p.edit_type <> 'd'\n\t\t\t\tAND p.scenario_id = scenario_id_input \n\t\t\t) p   \n\t\t\tWHERE p.uid = r.poi_uid \n\t\t\tAND r.scenario_id = scenario_id_input \n\t\t\tAND p.category IN (SELECT jsonb_array_elements_text(pois_more_entrances))\t\n\t\t)x, UNNEST(x.grid_visualization_ids, x.accessibility_indices) AS u(grid_visualization_id, accessibility_index)\n\t\tGROUP BY u.grid_visualization_id, x.category, x.name;  \n\tEND IF; \n\t\nEND;\n$function$"
    )
    op.replace_entity(basic_prepare_heatmap_local_accessibility)
    # ### end Alembic commands ###

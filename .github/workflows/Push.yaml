name: Push

on:
  push:
    branches: [ main, dev, staging ]
    
jobs:
  release:
    runs-on: ubuntu-latest
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      FONTAWESOME_NPM_AUTH_TOKEN: ${{ secrets.FONTAWESOME_NPM_AUTH_TOKEN }}
    steps:
      - uses: actions/checkout@v2
      - name: Get changed files 
        id: get_file_changes
        uses: trilom/file-changes-action@v1.2.4
        with:
          output: ' '
      - name: Release changed client
        if: contains(steps.get_file_changes.outputs.files, 'app/client') || contains(github.event.head_commit.message, 'trigger build')
        run: make release-client-docker-image -e COMPONENT=client
      - name: Release changed api
        if: contains(steps.get_file_changes.outputs.files, 'app/api') || contains(github.event.head_commit.message, 'trigger build')
        run: make release-docker-image -e COMPONENT=api
  deploy:
    runs-on: ubuntu-latest
    needs: [release]
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
      API_SECRET_KEY: ${{ secrets.API_SECRET_KEY }}
      SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
    steps:
      - uses: actions/checkout@v2
      - name: Get changed files 
        id: get_file_changes
        uses: trilom/file-changes-action@v1.2.4
        with:
          output: ' '
      - name: Deploy postgres-service
        run: make deploy -e COMPONENT=postgres
      - name: Deploy changed client
        if: contains(steps.get_file_changes.outputs.files, 'app/client') || contains(github.event.head_commit.message, 'trigger build')
        run: make deploy -e COMPONENT=client
      - name: Deploy changed api
        if: contains(steps.get_file_changes.outputs.files, 'app/api') || contains(github.event.head_commit.message, 'trigger build')
        run: make deploy -e COMPONENT=api
      - name: Deploy ingress
        run: make deploy -e COMPONENT=ingress
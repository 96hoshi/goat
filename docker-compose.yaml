version: "3.7"

networks:
  proxy:

volumes:
  postgres_data:
    name: ${COMPOSE_PROJECT_NAME}_postgres_data
  
services:
  traefik:
    image: "traefik:1.7.2-alpine"
    container_name: "traefik"
    ports:
      - "80:80" # - Default Port
      - "443:443" # - SSL Port
      - "31951:31951" # - Mapproxy
      - "8000:8000" # - Traefik UI
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./app/config/traefik.toml:/etc/traefik/traefik.toml
      - ./app/config/ssl:/ssl
    labels:
      - "traefik.backend=traefik"
      - "traefik.frontend.entryPoints=traefik-ui"
      - "traefik.frontend.rule=Host:localhost;"
      - "traefik.port=8080"
      - "traefik.enable=true"
    networks:
      proxy:

  client:
    image: ${DOCKER_ID}/${COMPOSE_PROJECT_NAME}:client-${PROJECT_VERSION}
    build:
      dockerfile: Dockerfile
      context: ./app/client
    image: goat-client
    volumes:
      - /app/node_modules
      - ./app/client:/app
    container_name: ${COMPOSE_PROJECT_NAME}_client
    hostname: ${COMPOSE_PROJECT_NAME}_client
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.${COMPOSE_PROJECT_NAME}_client.loadbalancer.server.port=80"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}_client.rule=Host(`${DOMAIN_NAME}`) && PathPrefix(`/`)"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}_client.entrypoints=websecure"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}_client.tls.certresolver=myhttpchallenge"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}_client.tls=true"
    networks:
      proxy:

  api:
    build:
      context: ./app/api
    ports:
      - 3000:3000
    env_file:
      - ./app/config/docker-env/api.env
    volumes:
      - ./app/api:/usr/src/app
    labels:
      - "traefik.backend=api-flask"
      - "traefik.frontend.entryPoints=https,http"
      - "traefik.frontend.rule=Host:localhost;PathPrefix:/api"
      - "traefik.port=3000"
      - "traefik.enable=true"
    networks:
      proxy:


  # api-v2:
  #   image: goatcommunity/api-v2:latest
  #   depends_on:
  #     - db
  #   env_file:
  #     - .env
  #   environment:
  #     - SERVER_NAME=${DOMAIN?Variable not set}
  #     - SERVER_HOST=https://${DOMAIN?Variable not set}
  #     # Allow explicit env var override for tests
  #     - SMTP_HOST=${SMTP_HOST}
  #   build:
  #     context: ./backend
  #     dockerfile: backend.dockerfile
  #     args:
  #       INSTALL_DEV: ${INSTALL_DEV-false}
  #   deploy:
  #     labels:
  #       - traefik.enable=true
  #       - traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}
  #       - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.rule=PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`)
  #       - traefik.http.services.${STACK_NAME?Variable not set}-backend.loadbalancer.server.port=80


  # db: 
  #   image: ${DOCKER_ID}/${COMPOSE_PROJECT_NAME}:db-${PROJECT_VERSION}
  #   container_name: goat-database
  #   restart: on-failure
  #   volumes:
  #     # we are mounting a named volume here instead of a data directory path because of
  #     # a windows 10 premission issue. See https://github.com/docker-library/postgres/issues/435)
  #     # .........
  #     - postgres_data:/var/lib/postgresql
  #     - ./app/database:/opt
  #     - ./app/api/src/db:/opt/scripts/db
  #     - ./app/config:/opt/config
  #   env_file:
  #     - ./app/config/docker-env/db.env
  #   ports:
  #     - "65432:5432"
  #   networks:
  #     proxy:

  db:
    image: ${DOCKER_ID}/${COMPOSE_PROJECT_NAME}:db-${PROJECT_VERSION}
    build: ./app/database
    container_name: ${COMPOSE_PROJECT_NAME}_db
    hostname: ${COMPOSE_PROJECT_NAME}_db
    environment:
      - POSTGRES_PASS=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DBNAME=${COMPOSE_PROJECT_NAME}
      - DATABASE_URL=postgis://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${COMPOSE_PROJECT_NAME}_db:5432/${COMPOSE_PROJECT_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./app/database:/opt
      - ./app/api/src/db:/opt/scripts/db
      - ./app/config:/opt/config
      # uncomment to enable remote connections to postgres
    ports:
      - "${POSTGRES_OUTER_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure

  pgadmin:
    image: dpage/pgadmin4
    container_name: ${COMPOSE_PROJECT_NAME}_pgadmin
    hostname: ${COMPOSE_PROJECT_NAME}_pgadmin
    environment:
      - PGADMIN_LISTEN_PORT=${PGADMIN_LISTEN_PORT}
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    depends_on:
      - db
    ports:
      - "5050:5050"
    networks:
      proxy:
        

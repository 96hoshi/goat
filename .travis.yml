language: generic
dist: trusty
services:
  - docker
branches:
  only:
    - master
    - development
    - beta
    - test_travis

before_install:
  - chmod ugo+x ./app/scripts/build-condition.sh

jobs:
  include:
    #BUILD STAGE
    - stage: build
      if: type = pull_request
      name: "Build Stage"
      script:
        - if app/scripts/build-condition.sh $TRAVIS_COMMIT_RANGE "app/client"; then make build-docker-image -e COMPONENT=client; else echo "NO CHANGES SINCE LAST COMMIT"; fi
        - if app/scripts/build-condition.sh $TRAVIS_COMMIT_RANGE "app/api"; then make build-docker-image -e COMPONENT=api; else echo "NO CHANGES SINCE LAST COMMIT"; fi
        - if app/scripts/build-condition.sh $TRAVIS_COMMIT_RANGE "app/print"; then make build-docker-image -e COMPONENT=print; else echo "NO CHANGES SINCE LAST COMMIT"; fi
        - if app/scripts/build-condition.sh $TRAVIS_COMMIT_RANGE "app/mapproxy"; then make build-docker-image -e COMPONENT=mapproxy; else echo "NO CHANGES SINCE LAST COMMIT"; fi
        - if app/scripts/build-condition.sh $TRAVIS_COMMIT_RANGE "app/geoserver"; then make build-docker-image -e COMPONENT=geoserver; else echo "NO CHANGES SINCE LAST COMMIT"; fi
        - if app/scripts/build-condition.sh $TRAVIS_COMMIT_RANGE "app/database"; then make build-database-docker-image; else echo "NO CHANGES SINCE LAST COMMIT"; fi

    #RELEASE STAGE
    - stage: release
      if: type = push AND fork = false
      name: "Release Stage"
      script:
        - if app/scripts/build-condition.sh $TRAVIS_COMMIT_RANGE "app/client"; then make release-docker-image -e COMPONENT=client; else echo "NO CHANGES SINCE LAST COMMIT"; fi
        - if app/scripts/build-condition.sh $TRAVIS_COMMIT_RANGE "app/api"; then make release-docker-image -e COMPONENT=api; else echo "NO CHANGES SINCE LAST COMMIT"; fi
        - if app/scripts/build-condition.sh $TRAVIS_COMMIT_RANGE "app/print"; then make release-docker-image -e COMPONENT=print; else echo "NO CHANGES SINCE LAST COMMIT"; fi
        - if app/scripts/build-condition.sh $TRAVIS_COMMIT_RANGE "app/mapproxy"; then make release-docker-image -e COMPONENT=mapproxy; else echo "NO CHANGES SINCE LAST COMMIT"; fi
        - if app/scripts/build-condition.sh $TRAVIS_COMMIT_RANGE "app/geoserver"; then make release-docker-image -e COMPONENT=geoserver; else echo "NO CHANGES SINCE LAST COMMIT"; fi
        - if app/scripts/build-condition.sh $TRAVIS_COMMIT_RANGE "app/database"; then make release-database-docker-image; else echo "NO CHANGES SINCE LAST COMMIT"; fi


    #DEVELOPMENT DEPLOY STAGE
      stage: development-deploy
      if: branch = development AND type = push AND fork = false
      name: "Development Deploy Stage"
      before_script:
        - curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
        - make setup-kube-config
      script:
        - make deploy -e COMPONENT=client
        - make deploy -e COMPONENT=api
        - make deploy -e COMPONENT=print
        - make deploy -e COMPONENT=mapproxy
        - make deploy -e COMPONENT=geoserver
        - make deploy-postgres-server
        
  
    #BETA DEPLOY STAGE
      stage: beta-deploy
      if: branch = beta AND type = push AND fork = false
      name: "Beta Deploy Stage"
      env: 
        - DOMAIN=test.open-accessibility.org
      before_script:
        - curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
        - make setup-kube-config
      script:
        - make deploy -e COMPONENT=client -e DOMAIN=$DOMAIN
        - make deploy -e COMPONENT=api -e DOMAIN=$DOMAIN
        - make deploy -e COMPONENT=print -e DOMAIN=$DOMAIN
        - make deploy -e COMPONENT=mapproxy -e DOMAIN=$DOMAIN
        - make deploy -e COMPONENT=geoserver -e DOMAIN=$DOMAIN
        - make deploy-postgres-server -e DOMAIN=$DOMAIN
       
  
after_success:
  - make after-success
notifications:
  email:
    on_success: never
    on_failure: always
